{"story_id": 406, "premises": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.", "premises-FOL": "\u2200x (DrinkRegularly(x, coffee) \u2192 IsDependentOn(x, caffeine))\n\u2200x (DrinkRegularly(x, coffee)  \u2228 (\u00acWantToBeAddictedTo(x, caffeine)))\n\u2200x (\u00acWantToBeAddictedTo(x, caffeine) \u2192 \u00acAwareThatDrug(x, caffeine))\n\u00ac(Student(rina) \u2295  \u00acAwareThatDrug(rina, caffeine))\n\u00ac(IsDependentOn(rina, caffeine) \u2295 Student(rina))", "conclusion": "Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.", "conclusion-FOL": "\u00acWantToBeAddictedTo(rina, caffeine) \u2228 (\u00acAwareThatDrug(rina, caffeine))", "label": "True", "example_id": 1126}
{"story_id": 406, "premises": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.", "premises-FOL": "\u2200x (DrinkRegularly(x, coffee) \u2192 IsDependentOn(x, caffeine))\n\u2200x (DrinkRegularly(x, coffee)  \u2228 (\u00acWantToBeAddictedTo(x, caffeine)))\n\u2200x (\u00acWantToBeAddictedTo(x, caffeine) \u2192 \u00acAwareThatDrug(x, caffeine))\n\u00ac(Student(rina) \u2295  \u00acAwareThatDrug(rina, caffeine))\n\u00ac(IsDependentOn(rina, caffeine) \u2295 Student(rina))", "conclusion": "Rina eith doesn't want to be addicted to caffeine or is unaware that caffeine is a drug.", "conclusion-FOL": "\u00acWantToBeAddictedTo(rina, caffeine) \u2295 \u00acAwareThatDrug(rina, caffeine)", "label": "True", "example_id": 1127}
{"story_id": 406, "premises": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.", "premises-FOL": "\u2200x (DrinkRegularly(x, coffee) \u2192 IsDependentOn(x, caffeine))\n\u2200x (DrinkRegularly(x, coffee)  \u2228 (\u00acWantToBeAddictedTo(x, caffeine)))\n\u2200x (\u00acWantToBeAddictedTo(x, caffeine) \u2192 \u00acAwareThatDrug(x, caffeine))\n\u00ac(Student(rina) \u2295  \u00acAwareThatDrug(rina, caffeine))\n\u00ac(IsDependentOn(rina, caffeine) \u2295 Student(rina))", "conclusion": "Rina either regularly drinks coffee or is unaware that caffeine is a drug.", "conclusion-FOL": "DrinkRegularly(rina, coffee)  \u2295 IsUnawareThatCaffeineIsADrug(rina)", "label": "False", "example_id": 1128}
{"story_id": 406, "premises": "All people who regularly drink coffee are dependent on caffeine.\nPeople regularly drink coffee, or they don't want to be addicted to caffeine, or both.\nNo one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug.\nRina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug.\nRina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine.", "premises-FOL": "\u2200x (DrinkRegularly(x, coffee) \u2192 IsDependentOn(x, caffeine))\n\u2200x (DrinkRegularly(x, coffee)  \u2228 (\u00acWantToBeAddictedTo(x, caffeine)))\n\u2200x (\u00acWantToBeAddictedTo(x, caffeine) \u2192 \u00acAwareThatDrug(x, caffeine))\n\u00ac(Student(rina) \u2295  \u00acAwareThatDrug(rina, caffeine))\n\u00ac(IsDependentOn(rina, caffeine) \u2295 Student(rina))", "conclusion": "If Rina either doesn't want to be addicted to caffeine and is unaware that caffeine is a drug, or neither doesn't want to be addicted to caffeine nor is unaware that caffeine is a drug, then Rina doesn't want to be addicted to caffeine and regularly drinks coffee.", "conclusion-FOL": "(DoNotWantToBeAddictedToCaffeine(rina) \u2295 \u00acAwareThatDrug(rina, caffeine)) \u2192 \u00ac(\u00acWantToBeAddictedTo(rina, caffeine) \u2227 DrinkRegularly(rina, coffee))", "label": "True", "example_id": 1129}
{"story_id": 8, "premises": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "premises-FOL": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)\n\u2200x (ChoralConductor(x) \u2192 Musician(x))\n\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)", "conclusion": "Miroslav Venhoda loved music.", "conclusion-FOL": "Love(miroslav, music)", "label": "Uncertain", "example_id": 20}
{"story_id": 8, "premises": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "premises-FOL": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)\n\u2200x (ChoralConductor(x) \u2192 Musician(x))\n\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)", "conclusion": "A Czech published a book in 1946.", "conclusion-FOL": "\u2203x \u2203y (Czech(x) \u2227 PublishedBook(x, y, year1946))", "label": "True", "example_id": 21}
{"story_id": 8, "premises": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "premises-FOL": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)\n\u2200x (ChoralConductor(x) \u2192 Musician(x))\n\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)", "conclusion": "No choral conductor specialized in the performance of Renaissance.", "conclusion-FOL": "\u2200x (ChoralConductor(x) \u2192 \u00acSpecializeInPerformanceOf(x, renaissanceMusic))", "label": "False", "example_id": 22}
{"story_id": 463, "premises": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.", "premises-FOL": "\u2200x (Eel(x) \u2192 Fish(x))\n\u2200x (Fish(x) \u2192 \u00acPlant(x))\n\u2200x (DisplayedIn(x, collection) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Multicellular(x) \u2192 \u00acBacteria(x))\n\u2200x (DisplayedIn(x, collection) \u2227 Animal(x) \u2192 Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) \u2228 Animal(seaEel) \u2228 \u00acPlant(seaEel)", "conclusion": "The sea eel is an eel.", "conclusion-FOL": "Eel(seaEel)", "label": "Uncertain", "example_id": 1336}
{"story_id": 463, "premises": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.", "premises-FOL": "\u2200x (Eel(x) \u2192 Fish(x))\n\u2200x (Fish(x) \u2192 \u00acPlant(x))\n\u2200x (DisplayedIn(x, collection) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Multicellular(x) \u2192 \u00acBacteria(x))\n\u2200x (DisplayedIn(x, collection) \u2227 Animal(x) \u2192 Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) \u2228 Animal(seaEel) \u2228 \u00acPlant(seaEel)", "conclusion": "The sea eel is bacteria.", "conclusion-FOL": "Bacteria(seaEel)", "label": "False", "example_id": 1337}
{"story_id": 463, "premises": "All eels are fish. \nNo fish are plants. \nEverything displayed in the collection is either a plant or an animal.\nAll multicellular animals are not bacteria.\nAll animals displayed in the collection are multicellular.\nA sea eel is displayed in the collection.\nThe sea eel is an eel or an animal or not a plant.", "premises-FOL": "\u2200x (Eel(x) \u2192 Fish(x))\n\u2200x (Fish(x) \u2192 \u00acPlant(x))\n\u2200x (DisplayedIn(x, collection) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Multicellular(x) \u2192 \u00acBacteria(x))\n\u2200x (DisplayedIn(x, collection) \u2227 Animal(x) \u2192 Multicellular(x))\nDisplayedIn(seaEel, collection)\nEel(seaEel) \u2228 Animal(seaEel) \u2228 \u00acPlant(seaEel)", "conclusion": "The sea eel is multicellular or is bacteria.", "conclusion-FOL": "Multicellular(seaEel) \u2228 Bacteria(seaEel)", "label": "True", "example_id": 1338}
{"story_id": 133, "premises": "The Blake McFall Company Building is a building added to the National Register of Historic Places in 1990.\nThe Emmet Building is a five-story building in Portland, Oregon.\nThe Emmet Building was built in 1915.\nThe Emmet Building is another name for the Blake McFall Company Building.\nJohn works at the Emmet Building.", "premises-FOL": "Building(blakeMcFallCompanyBuilding) \u2227 AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) \u2227 Five-Story(emmetBuilding) \u2227 LocatedIn(emmetBuilding, portland) \u2227 LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)", "conclusion": "A five-story building is built in 1915.", "conclusion-FOL": "\u2203x (Building(x) \u2227 Five-Story(x) \u2227 ConstructedIn(x, year1915))", "label": "True", "example_id": 392}
{"story_id": 133, "premises": "The Blake McFall Company Building is a building added to the National Register of Historic Places in 1990.\nThe Emmet Building is a five-story building in Portland, Oregon.\nThe Emmet Building was built in 1915.\nThe Emmet Building is another name for the Blake McFall Company Building.\nJohn works at the Emmet Building.", "premises-FOL": "Building(blakeMcFallCompanyBuilding) \u2227 AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) \u2227 Five-Story(emmetBuilding) \u2227 LocatedIn(emmetBuilding, portland) \u2227 LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)", "conclusion": "The Blake McFall Company Building is located in Portland, Oregon.", "conclusion-FOL": "LocatedIn(blakeMcFallCompanyBuilding, portland)", "label": "True", "example_id": 393}
{"story_id": 133, "premises": "The Blake McFall Company Building is a building added to the National Register of Historic Places in 1990.\nThe Emmet Building is a five-story building in Portland, Oregon.\nThe Emmet Building was built in 1915.\nThe Emmet Building is another name for the Blake McFall Company Building.\nJohn works at the Emmet Building.", "premises-FOL": "Building(blakeMcFallCompanyBuilding) \u2227 AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)\nBuilding(emmetBuilding) \u2227 Five-Story(emmetBuilding) \u2227 LocatedIn(emmetBuilding, portland) \u2227 LocatedIn(portland, oregon))\nBuiltIn(emmetBuilding, year1915)\nemmetBuiling=blakeMcFallCompanyBuilding\nWorkAt(john, emmetBuilding)", "conclusion": "John started his current job in 1990.", "conclusion-FOL": "StartCurrentJobIn(john, year1990)", "label": "Uncertain", "example_id": 394}
{"story_id": 226, "premises": "William Dickinson was a British politician who sat in the House of Commons\nWilliam Dickinson attended Westminster school for high school and then the University of Edinburgh.\nThe University of Edinburgh is a university located in the United Kingdom.\nWilliam Dickinson supported the Portland Whigs.\nPeople who supported the Portland Whigs did not get a seat in the Parliament.", "premises-FOL": "British(williamDickinson) \u2227 Politician(williamDickinson) \u2227 SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) \u2227 Highschool(westminsterSchool) \u2227 Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) \u2227 LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n\u2200x (Supported(x, portlandWhigs) \u2192 \u00acSatIn(x, parliament))", "conclusion": "William Dickinson did not get a seat in Parliament.", "conclusion-FOL": "SatIn(williamDickinson, parliament)", "label": "True", "example_id": 636}
{"story_id": 226, "premises": "William Dickinson was a British politician who sat in the House of Commons\nWilliam Dickinson attended Westminster school for high school and then the University of Edinburgh.\nThe University of Edinburgh is a university located in the United Kingdom.\nWilliam Dickinson supported the Portland Whigs.\nPeople who supported the Portland Whigs did not get a seat in the Parliament.", "premises-FOL": "British(williamDickinson) \u2227 Politician(williamDickinson) \u2227 SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) \u2227 Highschool(westminsterSchool) \u2227 Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) \u2227 LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n\u2200x (Supported(x, portlandWhigs) \u2192 \u00acSatIn(x, parliament))", "conclusion": "William Dickinson went to schools located in the United Kingdom for both high school and university.", "conclusion-FOL": "\u2203x \u2203y (Attended(williamDickinson, x) \u2227 Highschool(x) \u2227 LocatedIn(x, unitedKingdom) \u2227 Attended(williamDickinson, y) \u2227 University(y) \u2227 LocatedIn(y, unitedKingdom))", "label": "Uncertain", "example_id": 637}
{"story_id": 226, "premises": "William Dickinson was a British politician who sat in the House of Commons\nWilliam Dickinson attended Westminster school for high school and then the University of Edinburgh.\nThe University of Edinburgh is a university located in the United Kingdom.\nWilliam Dickinson supported the Portland Whigs.\nPeople who supported the Portland Whigs did not get a seat in the Parliament.", "premises-FOL": "British(williamDickinson) \u2227 Politician(williamDickinson) \u2227 SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) \u2227 Highschool(westminsterSchool) \u2227 Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) \u2227 LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n\u2200x (Supported(x, portlandWhigs) \u2192 \u00acSatIn(x, parliament))", "conclusion": "William Dickinson attended university in the United Kingdom.", "conclusion-FOL": "\u2203x (Attended(williamDickinson, x) \u2227 University(x) \u2227 LocatedIn(x, unitedKingdom))", "label": "True", "example_id": 638}
{"story_id": 226, "premises": "William Dickinson was a British politician who sat in the House of Commons\nWilliam Dickinson attended Westminster school for high school and then the University of Edinburgh.\nThe University of Edinburgh is a university located in the United Kingdom.\nWilliam Dickinson supported the Portland Whigs.\nPeople who supported the Portland Whigs did not get a seat in the Parliament.", "premises-FOL": "British(williamDickinson) \u2227 Politician(williamDickinson) \u2227 SatIn(williamDickinson, houseOfCommons)\nAttended(williamDickinson, westminsterSchool) \u2227 Highschool(westminsterSchool) \u2227 Attended(williamDickinson, universityOfEdinburgh)\nUniversity(universityOfEdinburgh) \u2227 LocatedIn(universityOfEdinburgh, unitedKingdom)\nSupported(williamDickinson, portlandWhigs)\n\u2200x (Supported(x, portlandWhigs) \u2192 \u00acSatIn(x, parliament))", "conclusion": "William Dickinson sat in the House of Commons.", "conclusion-FOL": "SatIn(williamDickinson, houseOfCommons)", "label": "True", "example_id": 639}
{"story_id": 247, "premises": "LanguageA is a universal language\nIf a universal language exists, then for every two people if they both know the same universal language they can communicate.\nKatya cannot communicate with Danil.\nKatya knows LanguageA. ", "premises-FOL": "UniversalLanguage(languageA)\n\u2200x \u2200y (\u2203z (\u00ac(x=y) \u2227 Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 CanCommunicateWith(x, y) \u2227 CanCommunicateWith(y, x))\n\u00acCanCommunicateWith(katya, danil)\nKnow(katya, languageA)", "conclusion": "Danil knows LanguageA.", "conclusion-FOL": "Know(danil, languageA)", "label": "False", "example_id": 690}
{"story_id": 422, "premises": "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. \nSome of the customers in James' family go to the cinema every week.\nCustomers in James' family subscribe to AMC A-List or HBO service. \nCustomers in James' family who prefer TV series will not watch TV series in cinemas.\nAll customers in James' family who subscribe to HBO services prefer TV series to movies. \nLily is in James' family; she watches TV series in cinemas. ", "premises-FOL": "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))\n\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))\nCustomer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)", "conclusion": "Lily goes to cinemas every week.", "conclusion-FOL": "GoToEveryWeek(lily, cinema)", "label": "Uncertain", "example_id": 1192}
{"story_id": 422, "premises": "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. \nSome of the customers in James' family go to the cinema every week.\nCustomers in James' family subscribe to AMC A-List or HBO service. \nCustomers in James' family who prefer TV series will not watch TV series in cinemas.\nAll customers in James' family who subscribe to HBO services prefer TV series to movies. \nLily is in James' family; she watches TV series in cinemas. ", "premises-FOL": "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))\n\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))\nCustomer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)", "conclusion": "Lily does not go to cinemas every week.", "conclusion-FOL": "\u00acGoToEveryWeek(lily, cinema)", "label": "Uncertain", "example_id": 1193}
{"story_id": 422, "premises": "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. \nSome of the customers in James' family go to the cinema every week.\nCustomers in James' family subscribe to AMC A-List or HBO service. \nCustomers in James' family who prefer TV series will not watch TV series in cinemas.\nAll customers in James' family who subscribe to HBO services prefer TV series to movies. \nLily is in James' family; she watches TV series in cinemas. ", "premises-FOL": "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))\n\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))\nCustomer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)", "conclusion": "Lily goes to cinemas every week or watches 3 movies every week without any additional fees.", "conclusion-FOL": "GoToEveryWeek(lily, cinema) \u2228 EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)", "label": "True", "example_id": 1194}
{"story_id": 422, "premises": "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. \nSome of the customers in James' family go to the cinema every week.\nCustomers in James' family subscribe to AMC A-List or HBO service. \nCustomers in James' family who prefer TV series will not watch TV series in cinemas.\nAll customers in James' family who subscribe to HBO services prefer TV series to movies. \nLily is in James' family; she watches TV series in cinemas. ", "premises-FOL": "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))\n\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))\nCustomer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)", "conclusion": "If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more.", "conclusion-FOL": "(GoToEveryWeek(lily, cinema) \u2227 SubscribedTo(lily, hBO)) \u2192 (EligibleForThreeFreeMoviesEveryWeek(lily) \u2295 Prefer(lily, tVSeries))", "label": "True", "example_id": 1195}
{"story_id": 422, "premises": "All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. \nSome of the customers in James' family go to the cinema every week.\nCustomers in James' family subscribe to AMC A-List or HBO service. \nCustomers in James' family who prefer TV series will not watch TV series in cinemas.\nAll customers in James' family who subscribe to HBO services prefer TV series to movies. \nLily is in James' family; she watches TV series in cinemas. ", "premises-FOL": "\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 SubscribedTo(x, aMCAList)) \u2192  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))\n\u2203x \u2203y (Customer(x) \u2227 In(x, jameSFamily) \u2227 GoToEveryWeek(x, cinema) \u2227 (\u00ac(x=y)) \u2227 Customer(y) \u2227 In(y, jameSFamily) \u2227 GoToEveryWeek(y, cinema))\n\u2200x (Customer(x) \u2227 In(x, jameSFamily) \u2227 (SubscribedTo(x, aMCAList) \u2228 SubscribedTo(x, hBO)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227 Prefer(x, tVSeries)) \u2192 (\u00acWatchIn(x, tV, cinema)))\n\u2200x ((Customer(x) \u2227 In(x, jameSFamily) \u2227  SubscribedTo(x, hBO)) \u2192 Prefer(x, tVSeries))\nCustomer(lily) \u2227 In(lily, jameSFamily \u2227 WatchIn(lily, tV, cinema)", "conclusion": "If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more.", "conclusion-FOL": "(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) \u2227 WatchIn(lily, tV, cinema)) \u2192 (GoToEveryWeek(lily, cinema) \u2227 Prefer(lily, tVSeries))", "label": "False", "example_id": 1196}
{"story_id": 193, "premises": "A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.", "premises-FOL": "\u2200x \u2200y (LaLigaSoccerTeam(x) \u2227 LaLigaSoccerTeam(y) \u2227 MorePoints(x, y) \u2192 RankHigherThan(x, y))\n\u2200x \u2200y (LaLigaSoccerTeam(x) \u2227 LaLigaSoccerTeam(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192  RankHigherThan(x, y))\nLaLigaSoccerTeam(realMadrid) \u2227 LaLigaSoccerTeam(barcelona)\nMorePoints(realMadrid, barcelona)\n\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)", "conclusion": "Real Madrid ranks higher than Barcelona.", "conclusion-FOL": "RankHigherThan(realMadrid, barcelona)", "label": "True", "example_id": 550}
{"story_id": 193, "premises": "A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.", "premises-FOL": "\u2200x \u2200y (LaLigaSoccerTeam(x) \u2227 LaLigaSoccerTeam(y) \u2227 MorePoints(x, y) \u2192 RankHigherThan(x, y))\n\u2200x \u2200y (LaLigaSoccerTeam(x) \u2227 LaLigaSoccerTeam(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192  RankHigherThan(x, y))\nLaLigaSoccerTeam(realMadrid) \u2227 LaLigaSoccerTeam(barcelona)\nMorePoints(realMadrid, barcelona)\n\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)", "conclusion": "Barcelona ranks higher than Real Madrid.", "conclusion-FOL": "RankHigherThan(barcelona, realMadrid)", "label": "False", "example_id": 551}
{"story_id": 82, "premises": "Lawton Park is a neighborhood in Seattle. \nAll citizens of Lawton Park use the zip code 98199. \nTom is a citizen of Lawton Park.\nDaniel uses the zip code 98199. ", "premises-FOL": "NeighbourhoodIn(lawtonPark, seattle)\n\u2200x (Residentof(x, lawtonPark) \u2192 UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)", "conclusion": "Tom uses the zip code 98199.", "conclusion-FOL": "UseZipCode(tom, num98199)", "label": "True", "example_id": 249}
{"story_id": 82, "premises": "Lawton Park is a neighborhood in Seattle. \nAll citizens of Lawton Park use the zip code 98199. \nTom is a citizen of Lawton Park.\nDaniel uses the zip code 98199. ", "premises-FOL": "NeighbourhoodIn(lawtonPark, seattle)\n\u2200x (Residentof(x, lawtonPark) \u2192 UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)", "conclusion": "Tom doesn't use the zip code 98199.", "conclusion-FOL": "\u00acUseZipCode(tom, num98199)", "label": "False", "example_id": 250}
{"story_id": 82, "premises": "Lawton Park is a neighborhood in Seattle. \nAll citizens of Lawton Park use the zip code 98199. \nTom is a citizen of Lawton Park.\nDaniel uses the zip code 98199. ", "premises-FOL": "NeighbourhoodIn(lawtonPark, seattle)\n\u2200x (Residentof(x, lawtonPark) \u2192 UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)", "conclusion": "Tom is a citizen of Washington.", "conclusion-FOL": "ResidentOf(tom, washington)", "label": "Uncertain", "example_id": 251}
{"story_id": 82, "premises": "Lawton Park is a neighborhood in Seattle. \nAll citizens of Lawton Park use the zip code 98199. \nTom is a citizen of Lawton Park.\nDaniel uses the zip code 98199. ", "premises-FOL": "NeighbourhoodIn(lawtonPark, seattle)\n\u2200x (Residentof(x, lawtonPark) \u2192 UseZipCode(x, num98199))\nResidentOf(tom, lawtonPark)\nUseZipCode(daniel, num98199)", "conclusion": "Daniel is a citizen of Lawton Park.", "conclusion-FOL": "ResidentOf(daniel, lawtonPark)", "label": "Uncertain", "example_id": 252}
{"story_id": 86, "premises": "If a legislator is found guilty of stealing government funds, they will be suspended from office.\nTiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.\nTiffany T. Alston was found guilty of stealing government funds in 2012.", "premises-FOL": "\u2200x ((Legislator(x) \u2227 StealsFunds(x)) \u2192 Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) \u2227 StealsFundsInYr(tiffanyTAlston, yr2012)", "conclusion": "Tiffany T. Alston was suspended from the Maryland House of Delegates.", "conclusion-FOL": "Suspended(tiffanyTAlston)", "label": "True", "example_id": 261}
{"story_id": 86, "premises": "If a legislator is found guilty of stealing government funds, they will be suspended from office.\nTiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.\nTiffany T. Alston was found guilty of stealing government funds in 2012.", "premises-FOL": "\u2200x ((Legislator(x) \u2227 StealsFunds(x)) \u2192 Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) \u2227 StealsFundsInYr(tiffanyTAlston, yr2012)", "conclusion": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.", "conclusion-FOL": "\u00acSuspended(tiffanyTAlston)", "label": "False", "example_id": 262}
{"story_id": 86, "premises": "If a legislator is found guilty of stealing government funds, they will be suspended from office.\nTiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.\nTiffany T. Alston was found guilty of stealing government funds in 2012.", "premises-FOL": "\u2200x ((Legislator(x) \u2227 StealsFunds(x)) \u2192 Suspended(x))\nLegislator(tiffanyTAlston)\nStealsFunds(tiffanyTAlston) \u2227 StealsFundsInYr(tiffanyTAlston, yr2012)", "conclusion": "Tiffany T. Alston went to prison for stealing government funds.", "conclusion-FOL": "Prison(tiffanyTAlston)", "label": "Uncertain", "example_id": 263}
{"story_id": 171, "premises": "Some fish stings people.\nStonefish is a fish.\nStonefish stings when stepped on. \nIf a stonefish stings someone and they are not treated, it can cause death to them.\nTo treat stonefish stings, apply heat to the affected area or use an antivenom.", "premises-FOL": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))\nFish(stonefish)\n\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))", "conclusion": "If a stonefish stings you and you don\u2019t use an antivenom, it can cause death to you.", "conclusion-FOL": "\u2200x (Sting(stonefish, x) \u2227 \u00acUseAntivenomOn(x) \u2192 CauseDeathTo(stonefish, x))", "label": "Uncertain", "example_id": 491}
{"story_id": 171, "premises": "Some fish stings people.\nStonefish is a fish.\nStonefish stings when stepped on. \nIf a stonefish stings someone and they are not treated, it can cause death to them.\nTo treat stonefish stings, apply heat to the affected area or use an antivenom.", "premises-FOL": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))\nFish(stonefish)\n\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))", "conclusion": "Stings of some fish can cause death if not treated.", "conclusion-FOL": "\u2203x \u2203y (Fish(x) \u2227 Sting(x, y) \u2227 \u00acTreated(y) \u2192 CauseDeathTo(x, y))", "label": "True", "example_id": 492}
{"story_id": 171, "premises": "Some fish stings people.\nStonefish is a fish.\nStonefish stings when stepped on. \nIf a stonefish stings someone and they are not treated, it can cause death to them.\nTo treat stonefish stings, apply heat to the affected area or use an antivenom.", "premises-FOL": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))\nFish(stonefish)\n\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))", "conclusion": "If you step on a stonefish and apply heat to the affected area, it can cause death to you.", "conclusion-FOL": "\u2200x (SteppedOnBy(stonefish, x) \u2227 ApplyHeatTo(x)  \u2192 CauseDeathTo(stonefish, x))", "label": "Uncertain", "example_id": 493}
{"story_id": 417, "premises": "Some monitors made by LG have a type-c port.\nMonitors that have a type-c port were not made before 2010.\nAll monitors in the library are made before 2010. \nThe L-2021 monitor is either used in the library or has a type-c port.\nThe L-2021 monitor is either both produced before 2010 and made by LG, or neither is true.", "premises-FOL": "\u2203x (Monitor(x) \u2227 ProducedBy(x, lG) \u2227 Have(x, typeCPort) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, lG) \u2227 Have(y, typeCPort))\n\u2200x (Have(x, typeCPort) \u2192 \u00acProducedBefore(x, yr2010))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 ProducedBefore(x, yr2010))\nMonitor(l-2021) \u2227 (In(l-2021, library) \u2295 Have(l-2021, typeCPort))\n\u00ac(ProducedBefore(l-2021, yr2010) \u2295 ProducedBy(l-2021, lG))", "conclusion": "The monitor L-2021 is in the library.", "conclusion-FOL": "In(l-2021, library)", "label": "Uncertain", "example_id": 1173}
{"story_id": 417, "premises": "Some monitors made by LG have a type-c port.\nMonitors that have a type-c port were not made before 2010.\nAll monitors in the library are made before 2010. \nThe L-2021 monitor is either used in the library or has a type-c port.\nThe L-2021 monitor is either both produced before 2010 and made by LG, or neither is true.", "premises-FOL": "\u2203x (Monitor(x) \u2227 ProducedBy(x, lG) \u2227 Have(x, typeCPort) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, lG) \u2227 Have(y, typeCPort))\n\u2200x (Have(x, typeCPort) \u2192 \u00acProducedBefore(x, yr2010))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 ProducedBefore(x, yr2010))\nMonitor(l-2021) \u2227 (In(l-2021, library) \u2295 Have(l-2021, typeCPort))\n\u00ac(ProducedBefore(l-2021, yr2010) \u2295 ProducedBy(l-2021, lG))", "conclusion": "The monitor L-2021 is either in the library or produced by LG.", "conclusion-FOL": "In(l-2021, library) \u2295 ProducedBy(l-2021, lG)", "label": "False", "example_id": 1174}
{"story_id": 417, "premises": "Some monitors made by LG have a type-c port.\nMonitors that have a type-c port were not made before 2010.\nAll monitors in the library are made before 2010. \nThe L-2021 monitor is either used in the library or has a type-c port.\nThe L-2021 monitor is either both produced before 2010 and made by LG, or neither is true.", "premises-FOL": "\u2203x (Monitor(x) \u2227 ProducedBy(x, lG) \u2227 Have(x, typeCPort) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, lG) \u2227 Have(y, typeCPort))\n\u2200x (Have(x, typeCPort) \u2192 \u00acProducedBefore(x, yr2010))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 ProducedBefore(x, yr2010))\nMonitor(l-2021) \u2227 (In(l-2021, library) \u2295 Have(l-2021, typeCPort))\n\u00ac(ProducedBefore(l-2021, yr2010) \u2295 ProducedBy(l-2021, lG))", "conclusion": "The L-2021 monitor either has a type-c port or is produced by LG.", "conclusion-FOL": "Have(l-2021, typeCPort) \u2295 ProducedBy(l-2021, lG)", "label": "True", "example_id": 1175}
{"story_id": 417, "premises": "Some monitors made by LG have a type-c port.\nMonitors that have a type-c port were not made before 2010.\nAll monitors in the library are made before 2010. \nThe L-2021 monitor is either used in the library or has a type-c port.\nThe L-2021 monitor is either both produced before 2010 and made by LG, or neither is true.", "premises-FOL": "\u2203x (Monitor(x) \u2227 ProducedBy(x, lG) \u2227 Have(x, typeCPort) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, lG) \u2227 Have(y, typeCPort))\n\u2200x (Have(x, typeCPort) \u2192 \u00acProducedBefore(x, yr2010))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 ProducedBefore(x, yr2010))\nMonitor(l-2021) \u2227 (In(l-2021, library) \u2295 Have(l-2021, typeCPort))\n\u00ac(ProducedBefore(l-2021, yr2010) \u2295 ProducedBy(l-2021, lG))", "conclusion": "If the L-2021 monitor is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.", "conclusion-FOL": "\u00ac(In(l-2021, library) \u2295 ProducedBy(l-2021, lG)) \u2192 (\u00acHave(x, typeCPort) \u2227 \u00acProducedBy(x, lG))", "label": "False", "example_id": 1176}
{"story_id": 417, "premises": "Some monitors made by LG have a type-c port.\nMonitors that have a type-c port were not made before 2010.\nAll monitors in the library are made before 2010. \nThe L-2021 monitor is either used in the library or has a type-c port.\nThe L-2021 monitor is either both produced before 2010 and made by LG, or neither is true.", "premises-FOL": "\u2203x (Monitor(x) \u2227 ProducedBy(x, lG) \u2227 Have(x, typeCPort) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, lG) \u2227 Have(y, typeCPort))\n\u2200x (Have(x, typeCPort) \u2192 \u00acProducedBefore(x, yr2010))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 ProducedBefore(x, yr2010))\nMonitor(l-2021) \u2227 (In(l-2021, library) \u2295 Have(l-2021, typeCPort))\n\u00ac(ProducedBefore(l-2021, yr2010) \u2295 ProducedBy(l-2021, lG))", "conclusion": "If the monitor L-2021 is either produced by LG and produced before 2010 or neither produced by LG nor produced before 2010,  then L-2021 is either in the library or produced by LG.", "conclusion-FOL": "\u00ac(ProducedBefore(l-2021, year2010) \u2295 ProducedBy(l-2021, lG)) \u2192 (In(l-2021, library) \u2295 ProducedBy(l-2021, lG))", "label": "False", "example_id": 1177}
{"story_id": 377, "premises": "Everything is either outside the solar system or in the solar system. \nNothing outside the solar system has the Sun as its star.\nEverything in the solar system is gravitationally bound by the Sun.\nNo planets gravitationally bound by the Sun are rogue planets. \nAll orphan planets are rogue planets.\nIf PSO J318.5\u221222 is not both a rogue planet and a planet gravitationally bound by the Sun, then it is a rogue planet.", "premises-FOL": "\u2200x (Outside(x, solarSystem) \u2295 In(x, solarSystem))\n\u2200x (Outside(x, solarSystem) \u2192 \u00acSunAs(x, star))\n\u2200x (In(x, solarSystem) \u2192 BoundBy(x, sun, gravitationally))\n\u2200x (Planet(x) \u2227 BoundBy(x, sun, gravitationally) \u2192 \u00ac(Planet(x) \u2227 Rogue(x)))\n\u2200x (Planet(x) \u2227 Orphan(x) \u2192 Planet(x) \u2227 Rogue(x))\n\u00ac(Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22) \u2227 BoundBy(pSOJ318.5-22, sun, gravitationally)) \u2192 (Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22))", "conclusion": "PSO J318.5\u221222 is an orphan planet.", "conclusion-FOL": "Planet(pSOJ318.5-22) \u2227 Orphan(pSOJ318.5-22)", "label": "Uncertain", "example_id": 1005}
{"story_id": 377, "premises": "Everything is either outside the solar system or in the solar system. \nNothing outside the solar system has the Sun as its star.\nEverything in the solar system is gravitationally bound by the Sun.\nNo planets gravitationally bound by the Sun are rogue planets. \nAll orphan planets are rogue planets.\nIf PSO J318.5\u221222 is not both a rogue planet and a planet gravitationally bound by the Sun, then it is a rogue planet.", "premises-FOL": "\u2200x (Outside(x, solarSystem) \u2295 In(x, solarSystem))\n\u2200x (Outside(x, solarSystem) \u2192 \u00acSunAs(x, star))\n\u2200x (In(x, solarSystem) \u2192 BoundBy(x, sun, gravitationally))\n\u2200x (Planet(x) \u2227 BoundBy(x, sun, gravitationally) \u2192 \u00ac(Planet(x) \u2227 Rogue(x)))\n\u2200x (Planet(x) \u2227 Orphan(x) \u2192 Planet(x) \u2227 Rogue(x))\n\u00ac(Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22) \u2227 BoundBy(pSOJ318.5-22, sun, gravitationally)) \u2192 (Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22))", "conclusion": "PSO J318.5\u221222 is an orphan planet or it does not have the Sun as its star, or both.", "conclusion-FOL": "(Planet(pSOJ318.5-22) \u2227 Orphan(pSOJ318.5-22)) \u2228 \u00acSunAs(pSOJ318.5-22, star)", "label": "True", "example_id": 1006}
{"story_id": 377, "premises": "Everything is either outside the solar system or in the solar system. \nNothing outside the solar system has the Sun as its star.\nEverything in the solar system is gravitationally bound by the Sun.\nNo planets gravitationally bound by the Sun are rogue planets. \nAll orphan planets are rogue planets.\nIf PSO J318.5\u221222 is not both a rogue planet and a planet gravitationally bound by the Sun, then it is a rogue planet.", "premises-FOL": "\u2200x (Outside(x, solarSystem) \u2295 In(x, solarSystem))\n\u2200x (Outside(x, solarSystem) \u2192 \u00acSunAs(x, star))\n\u2200x (In(x, solarSystem) \u2192 BoundBy(x, sun, gravitationally))\n\u2200x (Planet(x) \u2227 BoundBy(x, sun, gravitationally) \u2192 \u00ac(Planet(x) \u2227 Rogue(x)))\n\u2200x (Planet(x) \u2227 Orphan(x) \u2192 Planet(x) \u2227 Rogue(x))\n\u00ac(Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22) \u2227 BoundBy(pSOJ318.5-22, sun, gravitationally)) \u2192 (Planet(pSOJ318.5-22) \u2227 Rogue(pSOJ318.5-22))", "conclusion": "If PSO J318.5\u221222 is an orphan planet or it does not have the Sun as the star, or both, then PSO J318.5\u221222 neither is an orphan planet nor does it have the Sun as the star.", "conclusion-FOL": "(Planet(pSOJ318.5-22) \u2227 Orphan(pSOJ318.5-22)) \u2228 \u00acSunAs(pSOJ318.5-22, star) \u2192 (\u00ac(Planet(pSOJ318.5-22) \u2227 Orphan(pSOJ318.5-22)) \u2227 \u00acSunAs(pSOJ318.5-22, star))", "label": "False", "example_id": 1007}
{"story_id": 180, "premises": "Sam is doing a project.\nA project is written either in C++ or Python.\nIf Sam does a project written in Python, he will not use a Mac.\nSam is using a Mac.\nIf Sam uses a Mac, he will play a song.\nIf a song is not titled \"Perfect,\" Sam will never play it.", "premises-FOL": "\u2203x (Project(x) \u2227 Do(sam, x))\n\u2200x (Project(x) \u2192 (WrittenIn(x, cplusplus) \u2295 WrittenIn(x, python)))\n\u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))\nUse(sam, mac)\n\u2203x (Use(sam, mac) \u2227 Song(x) \u2192 Play(sam, x))\n\u2200x (Song(x) \u2227 Play(sam, x) \u2192 Titled(x, perfect))", "conclusion": "The project Sam is doing is written in C++.", "conclusion-FOL": "\u2200x (Project(x) \u2227 Do(sam, x) \u2227 WrittenIn(x, cplusplus))", "label": "True", "example_id": 518}
{"story_id": 180, "premises": "Sam is doing a project.\nA project is written either in C++ or Python.\nIf Sam does a project written in Python, he will not use a Mac.\nSam is using a Mac.\nIf Sam uses a Mac, he will play a song.\nIf a song is not titled \"Perfect,\" Sam will never play it.", "premises-FOL": "\u2203x (Project(x) \u2227 Do(sam, x))\n\u2200x (Project(x) \u2192 (WrittenIn(x, cplusplus) \u2295 WrittenIn(x, python)))\n\u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))\nUse(sam, mac)\n\u2203x (Use(sam, mac) \u2227 Song(x) \u2192 Play(sam, x))\n\u2200x (Song(x) \u2227 Play(sam, x) \u2192 Titled(x, perfect))", "conclusion": "The song Sam is playing is titled \"Perfect\".", "conclusion-FOL": "\u2200x (Song(x) \u2227 Play(sam, x) \u2227 Titled(x, perfect))", "label": "Uncertain", "example_id": 519}
{"story_id": 180, "premises": "Sam is doing a project.\nA project is written either in C++ or Python.\nIf Sam does a project written in Python, he will not use a Mac.\nSam is using a Mac.\nIf Sam uses a Mac, he will play a song.\nIf a song is not titled \"Perfect,\" Sam will never play it.", "premises-FOL": "\u2203x (Project(x) \u2227 Do(sam, x))\n\u2200x (Project(x) \u2192 (WrittenIn(x, cplusplus) \u2295 WrittenIn(x, python)))\n\u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))\nUse(sam, mac)\n\u2203x (Use(sam, mac) \u2227 Song(x) \u2192 Play(sam, x))\n\u2200x (Song(x) \u2227 Play(sam, x) \u2192 Titled(x, perfect))", "conclusion": "If a song is titled \"Perfect\", Sam will play it.", "conclusion-FOL": "\u2200x (Titled(x, perfect) \u2192 Play(sam, x))", "label": "Uncertain", "example_id": 520}
{"story_id": 254, "premises": "All rabbits have fur\nSome pets are rabbits.", "premises-FOL": "\u2200x (Rabbit(x) \u2192 Have(x, fur))\n\u2203x (Pet(x) \u2227 Rabbit(x))", "conclusion": "Some pets do not have fur.", "conclusion-FOL": "\u2203x \u2203y (Pet(x) \u2227 Pet(y) \u2227 \u00acHave(x, fur) \u2227 \u00acHave(y, fur))", "label": "Uncertain", "example_id": 698}
{"story_id": 477, "premises": "All social media applications containing chat features are software. \nAll social media applications that allow users to send messages to each other have chat features. \nAll social media applications have chat features or video features. \nAll social media applications that have video features allow users to upload videos. \nAll software that is social media applications are computer programs. \nAll social media applications that have high engagement metrics are addictive. \nIf a social media application is addictive, then it is not ideal for preteens. \nTikTok is a social media application, and it is not ideal for preteens. ", "premises-FOL": "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))\nSocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)", "conclusion": "TikTok is a computer program.", "conclusion-FOL": "ComputerProgram(tikTok)", "label": "True", "example_id": 1385}
{"story_id": 477, "premises": "All social media applications containing chat features are software. \nAll social media applications that allow users to send messages to each other have chat features. \nAll social media applications have chat features or video features. \nAll social media applications that have video features allow users to upload videos. \nAll software that is social media applications are computer programs. \nAll social media applications that have high engagement metrics are addictive. \nIf a social media application is addictive, then it is not ideal for preteens. \nTikTok is a social media application, and it is not ideal for preteens. ", "premises-FOL": "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))\nSocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)", "conclusion": "TikTok is either ideal for preteens or a computer program.", "conclusion-FOL": "IdealFor(tikTok, preteen) \u2295 ComputerProgram(tikTok)", "label": "True", "example_id": 1386}
{"story_id": 477, "premises": "All social media applications containing chat features are software. \nAll social media applications that allow users to send messages to each other have chat features. \nAll social media applications have chat features or video features. \nAll social media applications that have video features allow users to upload videos. \nAll software that is social media applications are computer programs. \nAll social media applications that have high engagement metrics are addictive. \nIf a social media application is addictive, then it is not ideal for preteens. \nTikTok is a social media application, and it is not ideal for preteens. ", "premises-FOL": "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))\nSocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)", "conclusion": "TikTok is does not have chat features or it is not a computer program.", "conclusion-FOL": "\u00acContain(tikTok, chatFeature) \u2228 \u00acComputerProgram(tikTok))", "label": "False", "example_id": 1387}
{"story_id": 477, "premises": "All social media applications containing chat features are software. \nAll social media applications that allow users to send messages to each other have chat features. \nAll social media applications have chat features or video features. \nAll social media applications that have video features allow users to upload videos. \nAll software that is social media applications are computer programs. \nAll social media applications that have high engagement metrics are addictive. \nIf a social media application is addictive, then it is not ideal for preteens. \nTikTok is a social media application, and it is not ideal for preteens. ", "premises-FOL": "\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, chatFeature) \u2192 Software(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 AllowToSendTo(x, user, message) \u2192 Contain(x, chatFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2192 Contain(x, chatFeature) \u2228 Contain(x, videoFeature))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Contain(x, videoFeature) \u2192 Allow(x, user, uploadVideo))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Software(x) \u2192 ComputerProgram(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227Have(x, highEngagementMetric) \u2192 Addictive(x))\n\u2200x (SocialMedia(x) \u2227 Application(x) \u2227 Addictive(x) \u2192 \u00acIdealFor(x, preteen))\nSocialMedia(tikTok) \u2227 Application(tikTok) \u2227 \u00acIdealFor(tikTok, preteen)", "conclusion": "TikTok either has chat features or is a computer program.", "conclusion-FOL": "Contain(tikTok, chatFeature) \u2295 ComputerProgram(tikTok))", "label": "False", "example_id": 1388}
{"story_id": 104, "premises": "Ordinary is an unincorporated community.\nLocated within Elliot County, Ordinary is on Kentucky Route 32.\nOrdinary is located northwest of Sandy Hook.", "premises-FOL": "UnincorporatedCommunity(ordinary)\nLocatedIn(ordinary, elliotCounty) \u2227 On(ordinary, kentuckyRoute32)\nLocatedNorthwestOf(ordinary, sandyHook)", "conclusion": "There are no unincorporated communities along Kentucky Route 32.", "conclusion-FOL": "\u2200x (On(x, kentuckyRoute32) \u2192 \u00acUnincorporatedCommunity(x))", "label": "False", "example_id": 316}
{"story_id": 104, "premises": "Ordinary is an unincorporated community.\nLocated within Elliot County, Ordinary is on Kentucky Route 32.\nOrdinary is located northwest of Sandy Hook.", "premises-FOL": "UnincorporatedCommunity(ordinary)\nLocatedIn(ordinary, elliotCounty) \u2227 On(ordinary, kentuckyRoute32)\nLocatedNorthwestOf(ordinary, sandyHook)", "conclusion": "There is an unincorporated community located in Elliot County.", "conclusion-FOL": "\u2203x (UnincorporatedCommunity(x) \u2227 LocatedIn(x, elliotCounty))", "label": "True", "example_id": 317}
{"story_id": 348, "premises": "All young adults at the event like independence.\nAll college students at the event are young adults.\nAll Yale students at the event are college students.\nEveryone at the event is a Yale student or a Harvard student.\nAll Harvard students at the event are diligent.\nSusan is at the event, and if Susan is a Harvard student, then she is a young adult.\nIf Susan is a Yale student, then she does not like independence.", "premises-FOL": "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))\n\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))\n\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))\n\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))\n\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))\nAt(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))\nYaleStudent(susan) \u2192 \u00acLike(susan, independence)", "conclusion": "Susan is a college student.", "conclusion-FOL": "CollegeStudent(susan)", "label": "Uncertain", "example_id": 921}
{"story_id": 348, "premises": "All young adults at the event like independence.\nAll college students at the event are young adults.\nAll Yale students at the event are college students.\nEveryone at the event is a Yale student or a Harvard student.\nAll Harvard students at the event are diligent.\nSusan is at the event, and if Susan is a Harvard student, then she is a young adult.\nIf Susan is a Yale student, then she does not like independence.", "premises-FOL": "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))\n\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))\n\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))\n\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))\n\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))\nAt(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))\nYaleStudent(susan) \u2192 \u00acLike(susan, independence)", "conclusion": "Susan likes independence and is diligent.", "conclusion-FOL": "Like(susan, independence) \u2227 Diligent(susan)", "label": "True", "example_id": 922}
{"story_id": 348, "premises": "All young adults at the event like independence.\nAll college students at the event are young adults.\nAll Yale students at the event are college students.\nEveryone at the event is a Yale student or a Harvard student.\nAll Harvard students at the event are diligent.\nSusan is at the event, and if Susan is a Harvard student, then she is a young adult.\nIf Susan is a Yale student, then she does not like independence.", "premises-FOL": "\u2200x (At(x, event) \u2227 YoungAdult(x) \u2192 Like(x, independence))\n\u2200x (At(x, event) \u2227 CollegeStudent(x) \u2192 YoungAdult(x))\n\u2200x (At(x, event) \u2227 YaleStudent(x) \u2192 CollegeStudent(x))\n\u2200x (At(x, event) \u2192 (YaleStudent(x) \u2295 HarvardStudent(x)))\n\u2200x (At(x, event) \u2227 HarvardStudent(x) \u2192 Diligent(x))\nAt(susan, event) \u2227 (HarvardStudent(susan) \u2192 YoungAdult(susan))\nYaleStudent(susan) \u2192 \u00acLike(susan, independence)", "conclusion": "Susan is not both diligent and likes independence.", "conclusion-FOL": "\u00ac(Like(susan, independence) \u2227 Diligent(susan))", "label": "False", "example_id": 923}
{"story_id": 147, "premises": "Vic DiCara plays guitar and bass.\nThe only style of music Vic DiCara plays is punk music.\nVic DiCara played in the band Inside Out.", "premises-FOL": "Play(vicDicara, guitar) \u2227 Play(vicDicara, bass)\n\u2200x (Music(vicDicara, x) \u2192 \u00ac(x=punk)))\nBand(vicDicara, insideOut)", "conclusion": "Inside Out was a punk band.", "conclusion-FOL": "Music(insideOut, punk)", "label": "Uncertain", "example_id": 430}
{"story_id": 147, "premises": "Vic DiCara plays guitar and bass.\nThe only style of music Vic DiCara plays is punk music.\nVic DiCara played in the band Inside Out.", "premises-FOL": "Play(vicDicara, guitar) \u2227 Play(vicDicara, bass)\n\u2200x (Music(vicDicara, x) \u2192 \u00ac(x=punk)))\nBand(vicDicara, insideOut)", "conclusion": "A musician from Inside Out plays bass.", "conclusion-FOL": "\u2203x (Band(x, insideOut) \u2227 Play(x, bass))", "label": "True", "example_id": 431}
{"story_id": 346, "premises": "All professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.", "premises-FOL": "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))\n\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))\n\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))\n\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)\n\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)", "conclusion": "Amy is a professional athlete.", "conclusion-FOL": "ProfessionalAthlete(amy)", "label": "Uncertain", "example_id": 913}
{"story_id": 346, "premises": "All professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.", "premises-FOL": "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))\n\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))\n\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))\n\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)\n\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)", "conclusion": "Amy is neither a full-time scientist nor an Olympic gold medal winner.", "conclusion-FOL": "\u00ac(FullTimeScientist(amy) \u2228 OlympicGoldMedalWinner(amy))", "label": "True", "example_id": 914}
{"story_id": 346, "premises": "All professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.", "premises-FOL": "\u2200x (ProfessionalAthlete(x) \u2192 SpendOn(x, mostOfTheirTime, sports))\n\u2200x (OlympicGoldMedalWinner(x) \u2192 ProfessionalAthlete(x))\n\u2200x (FullTimeScientist(x) \u2192 \u00acSpendOn(x, mostOfTheirTime, sports))\n\u2200x (NobelPhysicsLaureate(x) \u2192 FullTimeScientist(x))\nSpendOn(amy, mostOfTheirTime, sports) \u2228 OlympicGoldMedalWinner(amy)\n\u00acNobelPhysicsLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)", "conclusion": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.", "conclusion-FOL": "\u00acOlympicGoldMedalWinner(amy) \u2192 NobelPhysicsLaureate(amy)", "label": "False", "example_id": 915}
{"story_id": 409, "premises": "All red fruits that grow in Ben's yard contain some Vitamin C.\nAll apples that grow in Ben's yard are red fruits.\nAll fruits that grow in Ben's yard and contain some Vitamin C are healthy. \nNo fruits that grow in Ben's yard and are healthy are on a warning list.\nThe cherries grow in Ben's yard.\nIf cherries are not apples and are not healthy, then they are red fruits.", "premises-FOL": "\u2200x ((GrownIn(x, benSYard) \u2227 RedFruit(x)) \u2192 Contain(x, vitaminC))\n\u2200x (GrownIn(x, benSYard) \u2227 Is(x, apple) \u2192 RedFruit(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Contain(x, vitaminC)) \u2192 healthy(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Healthy(x)) \u2192 \u00acOn(x, warningList))\nGrownIn(cherry, benSYard)\n\u00ac(Healthy(cherry) \u2227 Is(cherry, apple)) \u2192 RedFruit(cherry)\n", "conclusion": "The cherries are apples.", "conclusion-FOL": "Is(cherry, apple)", "label": "False", "example_id": 1142}
{"story_id": 409, "premises": "All red fruits that grow in Ben's yard contain some Vitamin C.\nAll apples that grow in Ben's yard are red fruits.\nAll fruits that grow in Ben's yard and contain some Vitamin C are healthy. \nNo fruits that grow in Ben's yard and are healthy are on a warning list.\nThe cherries grow in Ben's yard.\nIf cherries are not apples and are not healthy, then they are red fruits.", "premises-FOL": "\u2200x ((GrownIn(x, benSYard) \u2227 RedFruit(x)) \u2192 Contain(x, vitaminC))\n\u2200x (GrownIn(x, benSYard) \u2227 Is(x, apple) \u2192 RedFruit(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Contain(x, vitaminC)) \u2192 healthy(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Healthy(x)) \u2192 \u00acOn(x, warningList))\nGrownIn(cherry, benSYard)\n\u00ac(Healthy(cherry) \u2227 Is(cherry, apple)) \u2192 RedFruit(cherry)\n", "conclusion": "The cherries either contain some amount of vitamin C or are on a warning list.", "conclusion-FOL": "Contain(cherry, vitaminC) \u2295 On(cherry, warningList)", "label": "True", "example_id": 1143}
{"story_id": 409, "premises": "All red fruits that grow in Ben's yard contain some Vitamin C.\nAll apples that grow in Ben's yard are red fruits.\nAll fruits that grow in Ben's yard and contain some Vitamin C are healthy. \nNo fruits that grow in Ben's yard and are healthy are on a warning list.\nThe cherries grow in Ben's yard.\nIf cherries are not apples and are not healthy, then they are red fruits.", "premises-FOL": "\u2200x ((GrownIn(x, benSYard) \u2227 RedFruit(x)) \u2192 Contain(x, vitaminC))\n\u2200x (GrownIn(x, benSYard) \u2227 Is(x, apple) \u2192 RedFruit(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Contain(x, vitaminC)) \u2192 healthy(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Healthy(x)) \u2192 \u00acOn(x, warningList))\nGrownIn(cherry, benSYard)\n\u00ac(Healthy(cherry) \u2227 Is(cherry, apple)) \u2192 RedFruit(cherry)\n", "conclusion": "The cherries are either on a warning list or are red.", "conclusion-FOL": "On(cherry, warningList) \u2295 RedFruit(cherry)", "label": "True", "example_id": 1144}
{"story_id": 409, "premises": "All red fruits that grow in Ben's yard contain some Vitamin C.\nAll apples that grow in Ben's yard are red fruits.\nAll fruits that grow in Ben's yard and contain some Vitamin C are healthy. \nNo fruits that grow in Ben's yard and are healthy are on a warning list.\nThe cherries grow in Ben's yard.\nIf cherries are not apples and are not healthy, then they are red fruits.", "premises-FOL": "\u2200x ((GrownIn(x, benSYard) \u2227 RedFruit(x)) \u2192 Contain(x, vitaminC))\n\u2200x (GrownIn(x, benSYard) \u2227 Is(x, apple) \u2192 RedFruit(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Contain(x, vitaminC)) \u2192 healthy(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Healthy(x)) \u2192 \u00acOn(x, warningList))\nGrownIn(cherry, benSYard)\n\u00ac(Healthy(cherry) \u2227 Is(cherry, apple)) \u2192 RedFruit(cherry)\n", "conclusion": "If the cherries are either healthy or are on a warning list, then they are not red.", "conclusion-FOL": "BeneficialTo(cherry, people) \u2295 On(cherry, warningList))) \u2192 \u00acRedFruit(cherry)", "label": "False", "example_id": 1145}
{"story_id": 409, "premises": "All red fruits that grow in Ben's yard contain some Vitamin C.\nAll apples that grow in Ben's yard are red fruits.\nAll fruits that grow in Ben's yard and contain some Vitamin C are healthy. \nNo fruits that grow in Ben's yard and are healthy are on a warning list.\nThe cherries grow in Ben's yard.\nIf cherries are not apples and are not healthy, then they are red fruits.", "premises-FOL": "\u2200x ((GrownIn(x, benSYard) \u2227 RedFruit(x)) \u2192 Contain(x, vitaminC))\n\u2200x (GrownIn(x, benSYard) \u2227 Is(x, apple) \u2192 RedFruit(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Contain(x, vitaminC)) \u2192 healthy(x))\n\u2200x ((GrownIn(x, benSYard) \u2227 Healthy(x)) \u2192 \u00acOn(x, warningList))\nGrownIn(cherry, benSYard)\n\u00ac(Healthy(cherry) \u2227 Is(cherry, apple)) \u2192 RedFruit(cherry)\n", "conclusion": "If the cherries are either on a warning list or are red, then they are not healthy and do not contain any amount of vitamin C.", "conclusion-FOL": "On(cherry, warningList) \u2295 RedFruit(cherry)) \u2192 \u00ac(BeneficialTo(cherry, people) \u2227 Contain(cherry, vitaminC)", "label": "False", "example_id": 1146}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "James has a high income.", "conclusion-FOL": "HighIncome(james)", "label": "Uncertain", "example_id": 1202}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "James does not have a high income.", "conclusion-FOL": "\u00acHighIncome(james)", "label": "Uncertain", "example_id": 1203}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "James is a student.", "conclusion-FOL": "Student(james)", "label": "False", "example_id": 1204}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "James drives to his destination or he is a student.", "conclusion-FOL": "MeansToDestination(x, drive) \u2228 Student(james)", "label": "True", "example_id": 1205}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "James either drives to their destination or is a student.", "conclusion-FOL": "MeansToDestination(x, drive) \u2295 Student(james)", "label": "True", "example_id": 1206}
{"story_id": 425, "premises": "Everyone working at Meta has a high income. \nA person with a high income will not take a bus to their destination.\nPeople will either take a bus or drive to their destination. \nEveryone who has a car will choose to drive to their destination. \nNo students drive to their destination. \nJames has a car or works at Meta.", "premises-FOL": "\u2200x (WorkAt(x, meta) \u2192 HighIncome(x))\n\u2200x (HighIncome(x) \u2192 \u00acMeansToDestination(x, bus))\n\u2200x (MeansToDestination(x, bus) \u2295 MeansToDestination(x, drive))\n\u2200x (HaveCar(x) \u2192 MeansToDestination(x, drive))\n\u2200x (Student(x) \u2192 \u00ac MeansToDestination(x, drive))\nHaveCar(james) \u2228 WorkAt(james, meta)", "conclusion": "If James either drives to his destination or is a student, then he has a high income and is a student.", "conclusion-FOL": "(MeansToDestination(x, drive) \u2295 Student(james)) \u2192 (HighIncome(james) \u2227 Student(james))", "label": "False", "example_id": 1207}
{"story_id": 423, "premises": "Everyone at the business conference is either an investor or an entrepreneur.\nNone of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. \nAll entrepreneurs at the business conference enjoy the opportunity of starting a business. \nEveryone at the business conference who enjoys state ownership of means of production prefers a planned economy. \nEveryone at the business conference who is an ardent communist prefers state ownership of the means of production.\nHo is at the business conference and prefers state ownership of the means of production. ", "premises-FOL": "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))\n\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))\n\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))\n\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))\n\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))\nAt(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)", "conclusion": "Ho is not an ardent communist.", "conclusion-FOL": "\u00acArdentCommunist(ho)", "label": "Uncertain", "example_id": 1197}
{"story_id": 423, "premises": "Everyone at the business conference is either an investor or an entrepreneur.\nNone of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. \nAll entrepreneurs at the business conference enjoy the opportunity of starting a business. \nEveryone at the business conference who enjoys state ownership of means of production prefers a planned economy. \nEveryone at the business conference who is an ardent communist prefers state ownership of the means of production.\nHo is at the business conference and prefers state ownership of the means of production. ", "premises-FOL": "\u2200x (At(x, businessConference) \u2192 (Investor(x) \u2295 Entrepreneur(x)))\n\u2200x ((At(x, businessConference) \u2227 Enjoy(x, opportunityOfStartingOwnBusiness)) \u2192 \u00acPrefer(x, plannedEconomy))\n\u2200x ((At(x, businessConference) \u2227 Entrepreneur(x)) \u2192 Enjoy(x, opportunityOfStartingOwnBusiness))\n\u2200x ((At(x, businessConference) \u2227 Enjoy(x, stateOwnershipOfMeansOfProduction)) \u2192 Prefer(x, plannedEconomy))\n\u2200x ((At(x, businessConference) \u2227 ArdentCommunist(x)) \u2192 Prefer(x, stateOwnershipOfMeansOfProduction))\nAt(ho, businessConference) \u2227 Prefer(ho, stateOwnershipOfMeansOfProduction)", "conclusion": "Ho is an investor or is not an ardent communist.", "conclusion-FOL": "Investor(ho) \u2228 (\u00acArdentCommunist(ho))", "label": "True", "example_id": 1198}
{"story_id": 264, "premises": "No television stars are certified public accountants.\nAll certified public accountants have good business sense.", "premises-FOL": "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))\n\u2200x (CertifiedPublicAccoutant(x) \u2192 Have(x, goodBusinessSense))", "conclusion": "All television stars have good business sense.", "conclusion-FOL": "\u2200x (TelevisionStar(x) \u2192 Have(x, goodBusinessSense))", "label": "Uncertain", "example_id": 708}
{"story_id": 416, "premises": "Some students in the class who are good at math are also good at chemistry.\nAll students in the class who are good at chemistry enjoy conducting experiments. \nAll students in the class that enjoy conducting experiments are good at planning. \nNone of the students who are good at planning failed the class.\nJames is a student in the class; he is either good at chemistry and failed the class, or bad at chemistry and passed the class.", "premises-FOL": "\u2203x \u2203y (StudentInTheClass(x) \u2227 GoodAt(x, math) \u2227 GoodAt(x, chemistry) \u2227 (\u00ac(x=y)) \u2227 StudentInTheClass(y) \u2227 GoodAt(y, math) \u2227 GoodAt(y, chemistry))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, chemistry)) \u2192 Enjoy(x, conductingExperiment))\n\u2200x ((StudentInTheClass(x) \u2227 Enjoy(x, conductingExperiment)) \u2192 GoodAt(x, planning))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, planning)) \u2192 \u00acFailed(x, theClass))\nStudentInTheClass(james) \u2227 (\u00ac(GoodAt(james, chemistry) \u2295 Failed(james, theClass)))", "conclusion": "James is good at planning.", "conclusion-FOL": "GoodAt(james, planning)", "label": "Uncertain", "example_id": 1169}
{"story_id": 416, "premises": "Some students in the class who are good at math are also good at chemistry.\nAll students in the class who are good at chemistry enjoy conducting experiments. \nAll students in the class that enjoy conducting experiments are good at planning. \nNone of the students who are good at planning failed the class.\nJames is a student in the class; he is either good at chemistry and failed the class, or bad at chemistry and passed the class.", "premises-FOL": "\u2203x \u2203y (StudentInTheClass(x) \u2227 GoodAt(x, math) \u2227 GoodAt(x, chemistry) \u2227 (\u00ac(x=y)) \u2227 StudentInTheClass(y) \u2227 GoodAt(y, math) \u2227 GoodAt(y, chemistry))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, chemistry)) \u2192 Enjoy(x, conductingExperiment))\n\u2200x ((StudentInTheClass(x) \u2227 Enjoy(x, conductingExperiment)) \u2192 GoodAt(x, planning))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, planning)) \u2192 \u00acFailed(x, theClass))\nStudentInTheClass(james) \u2227 (\u00ac(GoodAt(james, chemistry) \u2295 Failed(james, theClass)))", "conclusion": "James is good at math and chemistry.", "conclusion-FOL": "GoodAt(james, chemistry) \u2227 GoodAt(james, math)", "label": "False", "example_id": 1170}
{"story_id": 416, "premises": "Some students in the class who are good at math are also good at chemistry.\nAll students in the class who are good at chemistry enjoy conducting experiments. \nAll students in the class that enjoy conducting experiments are good at planning. \nNone of the students who are good at planning failed the class.\nJames is a student in the class; he is either good at chemistry and failed the class, or bad at chemistry and passed the class.", "premises-FOL": "\u2203x \u2203y (StudentInTheClass(x) \u2227 GoodAt(x, math) \u2227 GoodAt(x, chemistry) \u2227 (\u00ac(x=y)) \u2227 StudentInTheClass(y) \u2227 GoodAt(y, math) \u2227 GoodAt(y, chemistry))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, chemistry)) \u2192 Enjoy(x, conductingExperiment))\n\u2200x ((StudentInTheClass(x) \u2227 Enjoy(x, conductingExperiment)) \u2192 GoodAt(x, planning))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, planning)) \u2192 \u00acFailed(x, theClass))\nStudentInTheClass(james) \u2227 (\u00ac(GoodAt(james, chemistry) \u2295 Failed(james, theClass)))", "conclusion": "James failed the class and is good at math.", "conclusion-FOL": "Failed(james, james) \u2227 GoodAt(james, math)", "label": "False", "example_id": 1171}
{"story_id": 416, "premises": "Some students in the class who are good at math are also good at chemistry.\nAll students in the class who are good at chemistry enjoy conducting experiments. \nAll students in the class that enjoy conducting experiments are good at planning. \nNone of the students who are good at planning failed the class.\nJames is a student in the class; he is either good at chemistry and failed the class, or bad at chemistry and passed the class.", "premises-FOL": "\u2203x \u2203y (StudentInTheClass(x) \u2227 GoodAt(x, math) \u2227 GoodAt(x, chemistry) \u2227 (\u00ac(x=y)) \u2227 StudentInTheClass(y) \u2227 GoodAt(y, math) \u2227 GoodAt(y, chemistry))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, chemistry)) \u2192 Enjoy(x, conductingExperiment))\n\u2200x ((StudentInTheClass(x) \u2227 Enjoy(x, conductingExperiment)) \u2192 GoodAt(x, planning))\n\u2200x ((StudentInTheClass(x) \u2227 GoodAt(x, planning)) \u2192 \u00acFailed(x, theClass))\nStudentInTheClass(james) \u2227 (\u00ac(GoodAt(james, chemistry) \u2295 Failed(james, theClass)))", "conclusion": "If James is good at Chemistry or failed the class, then James is either good at planning or good at math.", "conclusion-FOL": "(GoodAt(james, chemistry) \u2228 Failed(james, theClass)) \u2192 (GoodAt(james, planning) \u2295 GoodAt(james, math))", "label": "True", "example_id": 1172}
{"story_id": 24, "premises": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. \nAll Leetcode problems that are recommended to novices are easy. \nA Leetode problem is either easy or hard.\nLeetcode problems that are starred by more than one thousand users are hard.\n2Sum is recommended to novices. \n4Sum is starred by more than 1,000 users.", "premises-FOL": "\u2200x (Easy(x) \u2192 \u2203y (LessThan(y, percent20) \u2227 ACRate(x,y)))\n\u2200x (Recommended(x) \u2192 Easy(x))\n\u2200x (Easy(x) \u2295 Hard(x))\n\u2200x (Starred(x)) \u2192 Hard(x))\nRecommended(twosum) \nStarred(foursum)", "conclusion": "2Sum is a Leetcode problem at the easy level.", "conclusion-FOL": "Easy(twosum)", "label": "True", "example_id": 69}
{"story_id": 24, "premises": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. \nAll Leetcode problems that are recommended to novices are easy. \nA Leetode problem is either easy or hard.\nLeetcode problems that are starred by more than one thousand users are hard.\n2Sum is recommended to novices. \n4Sum is starred by more than 1,000 users.", "premises-FOL": "\u2200x (Easy(x) \u2192 \u2203y (LessThan(y, percent20) \u2227 ACRate(x,y)))\n\u2200x (Recommended(x) \u2192 Easy(x))\n\u2200x (Easy(x) \u2295 Hard(x))\n\u2200x (Starred(x)) \u2192 Hard(x))\nRecommended(twosum) \nStarred(foursum)", "conclusion": "4Sum is a Leetcode problem recommended to the novice.", "conclusion-FOL": "Recommended(foursum)", "label": "False", "example_id": 70}
{"story_id": 24, "premises": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. \nAll Leetcode problems that are recommended to novices are easy. \nA Leetode problem is either easy or hard.\nLeetcode problems that are starred by more than one thousand users are hard.\n2Sum is recommended to novices. \n4Sum is starred by more than 1,000 users.", "premises-FOL": "\u2200x (Easy(x) \u2192 \u2203y (LessThan(y, percent20) \u2227 ACRate(x,y)))\n\u2200x (Recommended(x) \u2192 Easy(x))\n\u2200x (Easy(x) \u2295 Hard(x))\n\u2200x (Starred(x)) \u2192 Hard(x))\nRecommended(twosum) \nStarred(foursum)", "conclusion": "2Sum has an AC rate higher than 20 percent.", "conclusion-FOL": "\u2203y(GreaterThan(y, percent20) \u2227 ACRate(2Sum,y))", "label": "False", "example_id": 71}
{"story_id": 244, "premises": "Everyone who rents a car spends money.\nWhenever Sarah goes to Vermont, Sarah drives there.\nSomeone who does not own a car to drive somewhere must either borrow a car or rent a car.\nSarah doesn\u2019t own a car.\nSarah never borrows a car to go camping.\nSarah is going to go camping in Vermont.\nTo go camping somewhere, you must go to that place.", "premises-FOL": "\u2200x (Rent(x, car) \u2192 Spend(x, money))\nGoTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)\n\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))\n\u00acOwn(sarah, car)\n\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))\nCamping(sarah, vermont)\n\u2200x \u2200y (Camping(x, y) \u2192 GoTo(x, y))", "conclusion": "Sarah will spend money this weekend.", "conclusion-FOL": "Spend(sarah, money)", "label": "True", "example_id": 687}
{"story_id": 378, "premises": "All people who attend weddings are getting married or know the people who are getting married.\nNo preteens or young children are getting married or know the people who are getting married.\nPeople who enjoy celebrating life milestone events with other people attend weddings.\nPeople who are fond of large group functions enjoy celebrating life milestone events with other people.\nAll people who are outgoing and spirited are fond of large group functions.\nIf Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  ", "premises-FOL": "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))\n\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))\n\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))\n\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))\n\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))\n\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))", "conclusion": "Carol is outgoing and very spirited.", "conclusion-FOL": "Outgoing(carol) \u2227 Sprited(carol)", "label": "False", "example_id": 1008}
{"story_id": 378, "premises": "All people who attend weddings are getting married or know the people who are getting married.\nNo preteens or young children are getting married or know the people who are getting married.\nPeople who enjoy celebrating life milestone events with other people attend weddings.\nPeople who are fond of large group functions enjoy celebrating life milestone events with other people.\nAll people who are outgoing and spirited are fond of large group functions.\nIf Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  ", "premises-FOL": "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))\n\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))\n\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))\n\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))\n\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))\n\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))", "conclusion": "Carol is a preteen or a young child.", "conclusion-FOL": "PreTeen(carol) \u2228 YoungChild(carol)", "label": "Uncertain", "example_id": 1009}
{"story_id": 378, "premises": "All people who attend weddings are getting married or know the people who are getting married.\nNo preteens or young children are getting married or know the people who are getting married.\nPeople who enjoy celebrating life milestone events with other people attend weddings.\nPeople who are fond of large group functions enjoy celebrating life milestone events with other people.\nAll people who are outgoing and spirited are fond of large group functions.\nIf Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  ", "premises-FOL": "\u2200x (Attend(x, wedding) \u2192 GettingMarried(x) \u2228 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))\n\u2200x (PreTeen(x) \u2228 YoungChild(x) \u2192 \u00ac(GettingMarried(x) \u2295 (\u2203y (Know(x, y) \u2227 GettingMarried(y)))))\n\u2200x (\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2192 Attend(x, wedding))\n\u2200x (FondOf(x, largeGroupFunction) \u2192 \u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEventWith, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)))\n\u2200x (Outgoing(x) \u2227 Sprited(x)  \u2192 FondOf(x, largeGroupFunction))\n\u00ac((PreTeen(carol) \u2228 YoungChildren(carol)) \u2227 Attend(carol, wedding)) \u2192 \u00ac(GettingMarried(carol) \u2228 (\u2203y (Know(carol, y) \u2227 GettingMarried(y))))", "conclusion": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.", "conclusion-FOL": "\u00ac((\u2203y \u2203z (\u00ac(x=y) \u2227 \u00ac(x=z) \u2227 \u00ac(y=z) \u2227 Enjoy(x, celebratingLifeMileStoneEvent, y) \u2227 Enjoy(x, celebratingLifeStoneEvent, z)) \u2228 (Outgoing(carol) \u2227 Sprited(carol)))", "label": "True", "example_id": 1010}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "ROUGE Dior Colored Lip Balm 999 has a satin finish.", "conclusion-FOL": "SatinFinish(rougeDiorColoredLipBalm999)", "label": "Uncertain", "example_id": 1068}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "ROUGE Dior Colored Lip Balm 999 has a satin finish and has \"rosewood\" in its official description.", "conclusion-FOL": "Refillable(rougeDiorColoredLipBalm999) \u2227 RosewoodInDescription(rougeDiorColoredLipBalm999)", "label": "True", "example_id": 1069}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "ROUGE Dior Colored Lip Balm 999 either is refillable or has \"rosewood\" in its official description.", "conclusion-FOL": "Refillable(rougeDiorColoredLipBalm999) \u2295 RosewoodInDescription(rougeDiorColoredLipBalm999)", "label": "False", "example_id": 1070}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "If ROUGE Dior Colored Lip Balm 999 is not both a velvet finish ipstick in the set and refillable, then it neither is refillable nor has \"rosewood\" in its official description.", "conclusion-FOL": "\u00ac((Lipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 VelvetFinish(rougeDiorColoredLipBalm999) \u2227 Refillable(rougeDiorColoredLipBalm999)) \u2192 (\u00acRefillable(rougeDiorColoredLipBalm999) \u2227 \u00acRosewoodInDescription(rougeDiorColoredLipBalm999)))", "label": "True", "example_id": 1071}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "If ROUGE Dior Colored Lip Balm 999 is refillable and has \"rosewood\" in its official description, then it either has a velvet-finish or has \"rosewood\" in its official description.", "conclusion-FOL": "(Refillable(rougeDiorColoredLipBalm999) \u2227 RosewoodInDescription(rougeDiorColoredLipBalm999)) \u2014> (VelvetFinish(rougeDiorColoredLipBalm999) \u2228 RosewoodInDescription(rougeDiorColoredLipBalm999))", "label": "False", "example_id": 1072}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it has \"rosewood\" in its official description.", "conclusion-FOL": "(\u00acRosewoodInDescription(rougeEDiorColoredLipBalm999) \u2295 Refillable(rougeDiorColoredLipBalm999)) \u2192 RosewoodInDescription(rougeDiorColoredLipBalm999)", "label": "False", "example_id": 1073}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it neither has a satin-finish nor has \"rosewood\" in its official description.", "conclusion-FOL": "(RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 Refillable(rougeDiorColoredLipBalm999)) \u2192 \u00ac(SatinFinish(rougeDiorColoredLipBalm999) \u2228 RosewoodInDescription(rougeDiorColoredLipBalm999))", "label": "False", "example_id": 1074}
{"story_id": 395, "premises": "All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable.\nLipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish.\nNo satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. \nLipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. \nROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish.", "premises-FOL": "\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 VelvetFinish(x)) \u2192 Refillable(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (VelvetFinish(x) \u2295 SatinFinish(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition) \u2227 SatinFinish(x)) \u2192 \u00acRosewoodInDescription(x))\n\u2200x ((Lipstick(x) \u2227 In(x, rougeDiorSet) \u2227 In(x, lunarNewYearLimitedEdition)) \u2192 (RosewoodInDescription(x) \u2295 \u00acRosewoodInDescription(x)))\nLipstick(rougeDiorColoredLipBalm999) \u2227 In(rougeDiorColoredLipBalm999, rougeDiorSet) \u2227 In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) \u2227 (RosewoodInDescription(rougeDiorColoredLipBalm999) \u2295 VelvetFinish(rougeDiorColoredLipBalm999))", "conclusion": "If ROUGE Dior Colored Lip Balm 999 is refillable or has \"rosewood\" in its official description, then it either is refillable or has \"rosewood\" in its official description..", "conclusion-FOL": "(Refillable(rougeDiorColoredLipBalm999) \u2228 RosewoodInDescription(rougeDiorColoredLipBalm999)) \u2192 (Refillable(rougeEDiorColoredLipBalm999) \u2295 RosewoodInDescription(rougeDiorColoredLipBalm999))", "label": "False", "example_id": 1075}
{"story_id": 265, "premises": "All Senate Republicans are elected officials.\nSome elected officials are not conservatives.", "premises-FOL": "\u2200x (SenateRepublican(x) \u2192 ElectedOfficial(x))\n\u2203x \u2203y (ElectedOfficial(x) \u2227 ElectedOfficial(y) \u2227 \u00acConservative(x) \u2227 \u00acConservative(y) \u2227 \u00ac(x=y))", "conclusion": "Some conservatives are not Senate Republicans.", "conclusion-FOL": "\u2203x \u2203y (Conservative(x) \u2227 Conservative(y) \u2227 \u00acSenateRepublican(x) \u2227 \u00acSenateRepublican(y) \u2227 \u00ac(x=y))", "label": "Uncertain", "example_id": 709}
{"story_id": 337, "premises": "No athletes never exercise.\nAll professional basketball players are athletes. \nAll NBA players are professional basketball players. \nAll Knicks players are NBA players. \nEither John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises.", "premises-FOL": "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time\n\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))\n\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))", "conclusion": "Jim is a Knicks player.", "conclusion-FOL": "KnicksPlayer(jim)", "label": "False", "example_id": 881}
{"story_id": 337, "premises": "No athletes never exercise.\nAll professional basketball players are athletes. \nAll NBA players are professional basketball players. \nAll Knicks players are NBA players. \nEither John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises.", "premises-FOL": "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time\n\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))\n\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))", "conclusion": "Jim is not a Knicks player.", "conclusion-FOL": "\u00acKnicksPlayer(jim)", "label": "True", "example_id": 882}
{"story_id": 337, "premises": "No athletes never exercise.\nAll professional basketball players are athletes. \nAll NBA players are professional basketball players. \nAll Knicks players are NBA players. \nEither John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises.", "premises-FOL": "\u2200x (Athlete(x) \u2192 \u00acNeverExercises(x)) Never: does not exist a time\n\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))\n\u00ac(ProfessionalBasketballPlayer(jim) \u2295 NeverExercises(jim))", "conclusion": "Jim is an athlete.", "conclusion-FOL": "Athlete(jim)", "label": "Uncertain", "example_id": 883}
{"story_id": 345, "premises": "All kids are young.\nAll toddlers are kids.\nIf someone is young, then they are not elderly.\nAll pirates are seafarers.\nIf Nancy is not a pirate, then Nancy is young.\nIf Nancy is not a toddler, then Nancy is a seafarer.", "premises-FOL": "\u2200x (Kid(x) \u2192 Young(x))\n\u2200x (Toddler(x) \u2192 Kid(x))\n\u2200x (Young(x) \u2192 \u00acElderly(x))\n\u2200x (Pirate(x) \u2192 Seafarer(x))\n\u00acPirate(nancy) \u2192 Young(nancy)\n\u00acToddler(nancy) \u2192 Seafarer(nancy)", "conclusion": "Nancy is a pirate.", "conclusion-FOL": "Pirate(nancy)", "label": "Uncertain", "example_id": 910}
{"story_id": 345, "premises": "All kids are young.\nAll toddlers are kids.\nIf someone is young, then they are not elderly.\nAll pirates are seafarers.\nIf Nancy is not a pirate, then Nancy is young.\nIf Nancy is not a toddler, then Nancy is a seafarer.", "premises-FOL": "\u2200x (Kid(x) \u2192 Young(x))\n\u2200x (Toddler(x) \u2192 Kid(x))\n\u2200x (Young(x) \u2192 \u00acElderly(x))\n\u2200x (Pirate(x) \u2192 Seafarer(x))\n\u00acPirate(nancy) \u2192 Young(nancy)\n\u00acToddler(nancy) \u2192 Seafarer(nancy)", "conclusion": "Nancy is either both a pirate and a toddler, or neither a pirate nor a toddler.", "conclusion-FOL": "\u00ac(Pirate(nancy) \u2295 Toddler(nancy))", "label": "False", "example_id": 911}
{"story_id": 345, "premises": "All kids are young.\nAll toddlers are kids.\nIf someone is young, then they are not elderly.\nAll pirates are seafarers.\nIf Nancy is not a pirate, then Nancy is young.\nIf Nancy is not a toddler, then Nancy is a seafarer.", "premises-FOL": "\u2200x (Kid(x) \u2192 Young(x))\n\u2200x (Toddler(x) \u2192 Kid(x))\n\u2200x (Young(x) \u2192 \u00acElderly(x))\n\u2200x (Pirate(x) \u2192 Seafarer(x))\n\u00acPirate(nancy) \u2192 Young(nancy)\n\u00acToddler(nancy) \u2192 Seafarer(nancy)", "conclusion": "If Nancy is not either a pirate or a toddler, then she is young and is a kid.", "conclusion-FOL": "\u00ac(Pirate(nancy) \u2295 Toddler(nancy)) \u2192 Young(nancy) \u2227 Kid(nancy)", "label": "True", "example_id": 912}
{"story_id": 68, "premises": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.\nIf a film is directed by a person, the person is a filmmaker.\nAfter Tiller is a documentary.\nThe documentary is a type of film.\nLana Wilson is from Kirkland.\nKirkland is a US city.\nIf a person is from a city in a country, the person is from the country.\nAfter Tiller is nominated for the Independent Spirit Award for Best Documentary.", "premises-FOL": "DirectedBy(afterTiller, lanaWilson) \u2227 DirectedBy(theDeparture, lanaWilson) \u2227 DirectedBy(missAmericana, lanaWilson)\n\u2200x \u2200y (DirectedBy(x, y) \u2192 Filmmaker(y))\nDocumentary(afterTiller)\n\u2200x (Documentary(x) \u2192 Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n\u2200x \u2200y \u2200z ((From(x, y) \u2227 In(y, z)) \u2192 From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)", "conclusion": "Lana Wilson is a US filmmaker.", "conclusion-FOL": "From(lanaWilson, unitedStates) \u2227 Filmmaker(lanaWilson)", "label": "True", "example_id": 201}
{"story_id": 68, "premises": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.\nIf a film is directed by a person, the person is a filmmaker.\nAfter Tiller is a documentary.\nThe documentary is a type of film.\nLana Wilson is from Kirkland.\nKirkland is a US city.\nIf a person is from a city in a country, the person is from the country.\nAfter Tiller is nominated for the Independent Spirit Award for Best Documentary.", "premises-FOL": "DirectedBy(afterTiller, lanaWilson) \u2227 DirectedBy(theDeparture, lanaWilson) \u2227 DirectedBy(missAmericana, lanaWilson)\n\u2200x \u2200y (DirectedBy(x, y) \u2192 Filmmaker(y))\nDocumentary(afterTiller)\n\u2200x (Documentary(x) \u2192 Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n\u2200x \u2200y \u2200z ((From(x, y) \u2227 In(y, z)) \u2192 From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)", "conclusion": "Miss Americana is not directed by a filmmaker from Kirkland.", "conclusion-FOL": "\u00ac\u2203x(Filmmaker(x) \u2227 From(x, kirkland) \u2227 DirectedBy(missAmericana, x))", "label": "False", "example_id": 202}
{"story_id": 68, "premises": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.\nIf a film is directed by a person, the person is a filmmaker.\nAfter Tiller is a documentary.\nThe documentary is a type of film.\nLana Wilson is from Kirkland.\nKirkland is a US city.\nIf a person is from a city in a country, the person is from the country.\nAfter Tiller is nominated for the Independent Spirit Award for Best Documentary.", "premises-FOL": "DirectedBy(afterTiller, lanaWilson) \u2227 DirectedBy(theDeparture, lanaWilson) \u2227 DirectedBy(missAmericana, lanaWilson)\n\u2200x \u2200y (DirectedBy(x, y) \u2192 Filmmaker(y))\nDocumentary(afterTiller)\n\u2200x (Documentary(x) \u2192 Film(x))\nFrom(lanaWilson, kirkland)\nIn(kirkland, unitedStates)\n\u2200x \u2200y \u2200z ((From(x, y) \u2227 In(y, z)) \u2192 From(x, z))\nNomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)", "conclusion": "Lana Wilson has won the Independent Spirit Award.", "conclusion-FOL": "FilmmakerAward(lanaWilson, theIndependentSpiritAwardForBestDocumentary)", "label": "Uncertain", "example_id": 203}
{"story_id": 281, "premises": "All bears in zoos are not wild. \nSome bears are in zoos. ", "premises-FOL": "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))\n\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))", "conclusion": "Not all bears are wild.", "conclusion-FOL": "\u2203x (Bear(x) \u2227 \u00acWild(x))", "label": "True", "example_id": 725}
{"story_id": 56, "premises": "If a person is the leader of a country for life, that person has power.\nLeaders of a country for life are either a king or a queen.\nQueens are female.\nKings are male. \nElizabeth is a queen.\nElizabeth is a leader of a country for life.", "premises-FOL": "\u2200x (Leader(x) \u2192 HavePower(x))\n\u2200x (Leader(x) \u2192 (King(x) \u2295 Queen(x)))\n\u2200x (Queen(x) \u2192 Female(x))\n\u2200x (King(x) \u2192 Male(x))\nQueen(elizabeth)\nLeader(elizabeth)", "conclusion": "Elizabeth is a king.", "conclusion-FOL": "King(elizabeth)", "label": "False", "example_id": 165}
{"story_id": 56, "premises": "If a person is the leader of a country for life, that person has power.\nLeaders of a country for life are either a king or a queen.\nQueens are female.\nKings are male. \nElizabeth is a queen.\nElizabeth is a leader of a country for life.", "premises-FOL": "\u2200x (Leader(x) \u2192 HavePower(x))\n\u2200x (Leader(x) \u2192 (King(x) \u2295 Queen(x)))\n\u2200x (Queen(x) \u2192 Female(x))\n\u2200x (King(x) \u2192 Male(x))\nQueen(elizabeth)\nLeader(elizabeth)", "conclusion": "Elizabeth has power.", "conclusion-FOL": "HavePower(elizabeth)", "label": "True", "example_id": 166}
{"story_id": 56, "premises": "If a person is the leader of a country for life, that person has power.\nLeaders of a country for life are either a king or a queen.\nQueens are female.\nKings are male. \nElizabeth is a queen.\nElizabeth is a leader of a country for life.", "premises-FOL": "\u2200x (Leader(x) \u2192 HavePower(x))\n\u2200x (Leader(x) \u2192 (King(x) \u2295 Queen(x)))\n\u2200x (Queen(x) \u2192 Female(x))\n\u2200x (King(x) \u2192 Male(x))\nQueen(elizabeth)\nLeader(elizabeth)", "conclusion": "Elizabeth is a leader of a country for life.", "conclusion-FOL": "Leader(elizabeth)", "label": "True", "example_id": 167}
{"story_id": 367, "premises": "All people who went to Clay's school and who make their own matcha teas every morning with ceremonial-grade matcha powder do not wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school, who live in California, and attend yoga classes regularly, make their own matcha teas every morning with ceremonial-grade matcha powder.\nAll people who went to Clay's school, and work in the entertainment industry as high-profile celebrities, wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school that do not have regular 9-5 jobs, work in the entertainment industry as high-profile celebrities.\nAll people who went to Clay's school and prefer working at home over going to the office daily do not have regular 9-5 jobs.\nBunny went to Clay's school, and she either prefers to work at home over going to the office and makes her own matcha teas every morning with ceremonial-grade matcha powder, or does not prefer to work at home over going to the office every day and does not make her own matcha teas every morning with ceremonial-grade matcha powder.", "premises-FOL": "\u2200x (GoTo(x, claysSchool) \u2227 MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) \u2192 \u00ac(WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 LiveIn(x, california) \u2227 AttendRegularly(x, yogaClass) \u2192 MakeWith(x, ownMatch, ceremonialGradePowder))\n\u2200x (GoTo(x, claysSchool) \u2227 WorkInAs(x, entertainmentIndustry, highProfileCelebrity) \u2192 (WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)) \u2192 WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n\u2200x (GoTo(x, claysSchool) \u2227 Prefer(x, workingAtHome, goingToTheOffice) \u2192 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)))\nGoTo(bunny, claysSchool) \u2227 \u00ac(Prefer(bunny, workingAtHome, goingToTheOffice) \u2295 MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))", "conclusion": "Bunny does not have a regular 9-5 job.", "conclusion-FOL": "Have(bunny, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)", "label": "Uncertain", "example_id": 976}
{"story_id": 367, "premises": "All people who went to Clay's school and who make their own matcha teas every morning with ceremonial-grade matcha powder do not wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school, who live in California, and attend yoga classes regularly, make their own matcha teas every morning with ceremonial-grade matcha powder.\nAll people who went to Clay's school, and work in the entertainment industry as high-profile celebrities, wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school that do not have regular 9-5 jobs, work in the entertainment industry as high-profile celebrities.\nAll people who went to Clay's school and prefer working at home over going to the office daily do not have regular 9-5 jobs.\nBunny went to Clay's school, and she either prefers to work at home over going to the office and makes her own matcha teas every morning with ceremonial-grade matcha powder, or does not prefer to work at home over going to the office every day and does not make her own matcha teas every morning with ceremonial-grade matcha powder.", "premises-FOL": "\u2200x (GoTo(x, claysSchool) \u2227 MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) \u2192 \u00ac(WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 LiveIn(x, california) \u2227 AttendRegularly(x, yogaClass) \u2192 MakeWith(x, ownMatch, ceremonialGradePowder))\n\u2200x (GoTo(x, claysSchool) \u2227 WorkInAs(x, entertainmentIndustry, highProfileCelebrity) \u2192 (WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)) \u2192 WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n\u2200x (GoTo(x, claysSchool) \u2227 Prefer(x, workingAtHome, goingToTheOffice) \u2192 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)))\nGoTo(bunny, claysSchool) \u2227 \u00ac(Prefer(bunny, workingAtHome, goingToTheOffice) \u2295 MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))", "conclusion": "Bunny went to Clay's school and she lives in California and attends yoga classes regularly.", "conclusion-FOL": "LiveIn(bunny, california) \u2227 AttendRegularly(bunny, yogaClass)", "label": "False", "example_id": 977}
{"story_id": 367, "premises": "All people who went to Clay's school and who make their own matcha teas every morning with ceremonial-grade matcha powder do not wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school, who live in California, and attend yoga classes regularly, make their own matcha teas every morning with ceremonial-grade matcha powder.\nAll people who went to Clay's school, and work in the entertainment industry as high-profile celebrities, wake up late and start their schedules past noon regularly.\nAll people who went to Clay's school that do not have regular 9-5 jobs, work in the entertainment industry as high-profile celebrities.\nAll people who went to Clay's school and prefer working at home over going to the office daily do not have regular 9-5 jobs.\nBunny went to Clay's school, and she either prefers to work at home over going to the office and makes her own matcha teas every morning with ceremonial-grade matcha powder, or does not prefer to work at home over going to the office every day and does not make her own matcha teas every morning with ceremonial-grade matcha powder.", "premises-FOL": "\u2200x (GoTo(x, claysSchool) \u2227 MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) \u2192 \u00ac(WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 LiveIn(x, california) \u2227 AttendRegularly(x, yogaClass) \u2192 MakeWith(x, ownMatch, ceremonialGradePowder))\n\u2200x (GoTo(x, claysSchool) \u2227 WorkInAs(x, entertainmentIndustry, highProfileCelebrity) \u2192 (WakeUpLate(x) \u2227 StartPastNoonRegularly(x, schedule)))\n\u2200x (GoTo(x, claysSchool) \u2227 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)) \u2192 WorkInAs(x, entertainmentIndustry, highProfileCelebrity))\n\u2200x (GoTo(x, claysSchool) \u2227 Prefer(x, workingAtHome, goingToTheOffice) \u2192 \u00ac(Have(x, y) \u2227 Regular(y) \u2227 NineToFiveJob(y)))\nGoTo(bunny, claysSchool) \u2227 \u00ac(Prefer(bunny, workingAtHome, goingToTheOffice) \u2295 MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))", "conclusion": "Bunny went to Clay's school and she neither prefers working at home over going to the office nor lives in California and attends yoga classes regularly.", "conclusion-FOL": "\u00ac(Prefer(bunny, workingAtHome, goingToTheOffice) \u2228 (LiveIn(bunny, california) \u2227 AttendRegularly(bunny, yogaClass)))", "label": "True", "example_id": 978}
{"story_id": 19, "premises": "Thomas Barber was an English professional footballer.\nThomas Barber played in the Football League for Aston Villa.\nThomas Barber played as a halfback and inside left.\nThomas Barber scored the winning goal in the 1913 FA Cup Final.", "premises-FOL": "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) \u2227 PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) \u2227 PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)", "conclusion": "Thomas Barber played in the Football League for Bolton Wanderers", "conclusion-FOL": "PlayedFor(thomasBarber, boltonWanderers) \u2227 PlayedIn(boltonWanderers,theFootballLeague)", "label": "Uncertain", "example_id": 54}
{"story_id": 19, "premises": "Thomas Barber was an English professional footballer.\nThomas Barber played in the Football League for Aston Villa.\nThomas Barber played as a halfback and inside left.\nThomas Barber scored the winning goal in the 1913 FA Cup Final.", "premises-FOL": "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) \u2227 PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) \u2227 PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)", "conclusion": "Thomas Barber played as an inside left.", "conclusion-FOL": "PlayedAs(thomasBarber, insideLeft)", "label": "True", "example_id": 55}
{"story_id": 19, "premises": "Thomas Barber was an English professional footballer.\nThomas Barber played in the Football League for Aston Villa.\nThomas Barber played as a halfback and inside left.\nThomas Barber scored the winning goal in the 1913 FA Cup Final.", "premises-FOL": "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)\nPlayedFor(thomasBarber, astonVilla) \u2227 PlayedIn(astonVilla,theFootballLeague)\nPlayedAs(thomasBarber, halfBack) \u2227 PlayedAs(thomasBarber, insideLeft)\nScoredTheWinningGoalIn(thomasBarber, facupfinal1913)", "conclusion": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.", "conclusion-FOL": "\u2203x (English(x) \u2227 ProfessionalFootballer(x) \u2227 ScoredTheWinningGoalIn(x, facupfinal1913))", "label": "True", "example_id": 56}
{"story_id": 162, "premises": "If a person plays an instrument in a concert, they are good at playing this kind of instrument.\nPeter plays piano, violin, and saxophone.\nPeter plays piano in a concert.\nOliver and Peter both play instruments in a concert.\nOliver plays a different musical instrument from Peter in the concert.", "premises-FOL": "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))\nPlay(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))\n\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))", "conclusion": "Oliver plays piano in the concert.", "conclusion-FOL": "PlayIn(oliver, piano, concert)", "label": "False", "example_id": 464}
{"story_id": 162, "premises": "If a person plays an instrument in a concert, they are good at playing this kind of instrument.\nPeter plays piano, violin, and saxophone.\nPeter plays piano in a concert.\nOliver and Peter both play instruments in a concert.\nOliver plays a different musical instrument from Peter in the concert.", "premises-FOL": "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))\nPlay(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))\n\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))", "conclusion": "Oliver plays violin in the concert.", "conclusion-FOL": "PlayIn(oliver, violin, concert)", "label": "Uncertain", "example_id": 465}
{"story_id": 162, "premises": "If a person plays an instrument in a concert, they are good at playing this kind of instrument.\nPeter plays piano, violin, and saxophone.\nPeter plays piano in a concert.\nOliver and Peter both play instruments in a concert.\nOliver plays a different musical instrument from Peter in the concert.", "premises-FOL": "\u2200x \u2200y (PlayIn(y, x, concert) \u2192 GoodAtPlaying(y, x))\nPlay(peter, piano) \u2227 Play(peter, violin) \u2227 Play(peter, saxophone)\nPlayIn(peter, piano, concert)\n\u2203x \u2203y (PlayIn(peter, x, concert) \u2227 PlayIn(oliver, y, concert))\n\u2200x (PlayIn(oliver, x, concert) \u2192 \u00acPlayIn(peter, y, concert))", "conclusion": "Peter is good at playing piano.", "conclusion-FOL": "GoodAtPlaying(peter, piano)", "label": "True", "example_id": 466}
{"story_id": 454, "premises": "Functional brainstems are necessary for breath control.\nAll humans that can swim can control their breath. \nHumans can swim or walk. \nHumans who can walk can stand on the ground by themselves. \nHumans whose brainstems are functional can control their balance.\nEvery human who can stand on the ground by themselves has functional leg muscles. \nGeorge and Archie are humans.\nGeorge can control his balance and can swim.\nArchie can walk if and only if he has functional brainstems.", "premises-FOL": "\u2200x (CanControl(x, breath) \u2192 FunctionalBrainStem(x))\n\u2200x (Human(x) \u2227 CanSwim(x) \u2192 CanControl(x, breath))\n\u2200x (Human(x) \u2192 (CanSwim(x) \u2228 CanWalk(x)))\n\u2200x (Human(x) \u2227 CanWalk(x) \u2192 CanStandOnTheGround(x, themselves))\n\u2200x (Human(x) \u2227 FunctionalBrainStem(x) \u2192 CanControl(x, balance))\n\u2200x (Human(x) \u2227 CanStandOnTheGround(x, themselves) \u2192 FunctionalLegMuscle(x)))\nHuman(george) \u2227 Human(archie)\nCanControl(george, balance) \u2227 CanSwim(george)\n\u00ac(CanWalk(archie) \u2295 FunctionalBrainStem(x))\n", "conclusion": "George has functional leg muscles.", "conclusion-FOL": "FunctionalLegMuscle(archie)", "label": "Uncertain", "example_id": 1307}
{"story_id": 454, "premises": "Functional brainstems are necessary for breath control.\nAll humans that can swim can control their breath. \nHumans can swim or walk. \nHumans who can walk can stand on the ground by themselves. \nHumans whose brainstems are functional can control their balance.\nEvery human who can stand on the ground by themselves has functional leg muscles. \nGeorge and Archie are humans.\nGeorge can control his balance and can swim.\nArchie can walk if and only if he has functional brainstems.", "premises-FOL": "\u2200x (CanControl(x, breath) \u2192 FunctionalBrainStem(x))\n\u2200x (Human(x) \u2227 CanSwim(x) \u2192 CanControl(x, breath))\n\u2200x (Human(x) \u2192 (CanSwim(x) \u2228 CanWalk(x)))\n\u2200x (Human(x) \u2227 CanWalk(x) \u2192 CanStandOnTheGround(x, themselves))\n\u2200x (Human(x) \u2227 FunctionalBrainStem(x) \u2192 CanControl(x, balance))\n\u2200x (Human(x) \u2227 CanStandOnTheGround(x, themselves) \u2192 FunctionalLegMuscle(x)))\nHuman(george) \u2227 Human(archie)\nCanControl(george, balance) \u2227 CanSwim(george)\n\u00ac(CanWalk(archie) \u2295 FunctionalBrainStem(x))\n", "conclusion": "Archie has functional leg muscles and can control his balance.", "conclusion-FOL": "FunctionalLegMuscle(archie) \u2227 CanControl(archie, balance)", "label": "True", "example_id": 1308}
{"story_id": 454, "premises": "Functional brainstems are necessary for breath control.\nAll humans that can swim can control their breath. \nHumans can swim or walk. \nHumans who can walk can stand on the ground by themselves. \nHumans whose brainstems are functional can control their balance.\nEvery human who can stand on the ground by themselves has functional leg muscles. \nGeorge and Archie are humans.\nGeorge can control his balance and can swim.\nArchie can walk if and only if he has functional brainstems.", "premises-FOL": "\u2200x (CanControl(x, breath) \u2192 FunctionalBrainStem(x))\n\u2200x (Human(x) \u2227 CanSwim(x) \u2192 CanControl(x, breath))\n\u2200x (Human(x) \u2192 (CanSwim(x) \u2228 CanWalk(x)))\n\u2200x (Human(x) \u2227 CanWalk(x) \u2192 CanStandOnTheGround(x, themselves))\n\u2200x (Human(x) \u2227 FunctionalBrainStem(x) \u2192 CanControl(x, balance))\n\u2200x (Human(x) \u2227 CanStandOnTheGround(x, themselves) \u2192 FunctionalLegMuscle(x)))\nHuman(george) \u2227 Human(archie)\nCanControl(george, balance) \u2227 CanSwim(george)\n\u00ac(CanWalk(archie) \u2295 FunctionalBrainStem(x))\n", "conclusion": "Archie cannot control his balance and doesn't have functional leg muscles.", "conclusion-FOL": "\u00acCanControl(archie, balance) \u2227 \u00acFunctionalLegMuscle(x)", "label": "False", "example_id": 1309}
{"story_id": 236, "premises": "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. \nCancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.\nP values are thresholds for belief, not metrics of effect. ", "premises-FOL": "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))", "conclusion": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.", "conclusion-FOL": "\u2203x \u2203y (CancerResearcher(x) \u2227 Use(x, cancerEffectSize) \u2227 UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))", "label": "Uncertain", "example_id": 668}
{"story_id": 236, "premises": "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. \nCancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.\nP values are thresholds for belief, not metrics of effect. ", "premises-FOL": "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))", "conclusion": "P value represents the selection intensity for somatic variants in cancer cell lineages.", "conclusion-FOL": "SelectionIntensitySomaticVariants(pValue)", "label": "Uncertain", "example_id": 669}
{"story_id": 236, "premises": "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. \nCancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.\nP values are thresholds for belief, not metrics of effect. ", "premises-FOL": "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))", "conclusion": "Cancer effect size is preferred by cancer researchers.", "conclusion-FOL": "Preferred(cancerResearchers, cancerEffectSize)", "label": "Uncertain", "example_id": 670}
{"story_id": 236, "premises": "Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. \nCancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value.\nP values are thresholds for belief, not metrics of effect. ", "premises-FOL": "Finding(cancerBiology, geneticAlteration) \u2227 Confer(geneticAlteration, selectiveAdvantage, toCancerCell)\n\u2203x \u2203y (CancerResearcher(x) \u2227 Ranked(x, importanceOfSubstitutionsToCancerGrowth) \u2227 PValue(y) \u2227 RankedBy(importanceOfSubstitutionsToCancerGrowth, y))\n\u2200x (PValue(x) \u2192 ThresholdForBelief(x) \u2227 \u00acMetricOfEffect(x))", "conclusion": "P values don't represent metrics of effect.", "conclusion-FOL": "\u2200x (PValue(x) \u2192 \u00acMetricsOfEffect(x))", "label": "True", "example_id": 671}
{"story_id": 481, "premises": "All biodegradable things are environment-friendly. \nAll woodware is biodegradable.\nAll paper is woodware. \nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.", "premises-FOL": "\u2200x (Biodegradable(x) \u2192 EnvironmentFriendly(x))\n\u2200x (Woodware(x) \u2192 Biodegradable(x))\n\u2200x (Paper(x) \u2192 Woodware(x))\n\u00ac(\u2203x (Good(x) \u2227 Bad(x)))\n\u2200x (EnvironmentFriendly(x) \u2192 Good(x))\nPaper(worksheet) \u2295 EnvironmentFriendly(worksheet)", "conclusion": "A worksheet is biodegradable.", "conclusion-FOL": "Bioegradable(worksheet)", "label": "Uncertain", "example_id": 1402}
{"story_id": 481, "premises": "All biodegradable things are environment-friendly. \nAll woodware is biodegradable.\nAll paper is woodware. \nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.", "premises-FOL": "\u2200x (Biodegradable(x) \u2192 EnvironmentFriendly(x))\n\u2200x (Woodware(x) \u2192 Biodegradable(x))\n\u2200x (Paper(x) \u2192 Woodware(x))\n\u00ac(\u2203x (Good(x) \u2227 Bad(x)))\n\u2200x (EnvironmentFriendly(x) \u2192 Good(x))\nPaper(worksheet) \u2295 EnvironmentFriendly(worksheet)", "conclusion": "A worksheet is not biodegradable.", "conclusion-FOL": "\u00acBioegradable(worksheet)", "label": "Uncertain", "example_id": 1403}
{"story_id": 481, "premises": "All biodegradable things are environment-friendly. \nAll woodware is biodegradable.\nAll paper is woodware. \nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.", "premises-FOL": "\u2200x (Biodegradable(x) \u2192 EnvironmentFriendly(x))\n\u2200x (Woodware(x) \u2192 Biodegradable(x))\n\u2200x (Paper(x) \u2192 Woodware(x))\n\u00ac(\u2203x (Good(x) \u2227 Bad(x)))\n\u2200x (EnvironmentFriendly(x) \u2192 Good(x))\nPaper(worksheet) \u2295 EnvironmentFriendly(worksheet)", "conclusion": "A worksheet is bad.", "conclusion-FOL": "Bad(worksheet)", "label": "False", "example_id": 1404}
{"story_id": 481, "premises": "All biodegradable things are environment-friendly. \nAll woodware is biodegradable.\nAll paper is woodware. \nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.", "premises-FOL": "\u2200x (Biodegradable(x) \u2192 EnvironmentFriendly(x))\n\u2200x (Woodware(x) \u2192 Biodegradable(x))\n\u2200x (Paper(x) \u2192 Woodware(x))\n\u00ac(\u2203x (Good(x) \u2227 Bad(x)))\n\u2200x (EnvironmentFriendly(x) \u2192 Good(x))\nPaper(worksheet) \u2295 EnvironmentFriendly(worksheet)", "conclusion": "A worksheet is not bad.", "conclusion-FOL": "\u00acBad(worksheet)", "label": "True", "example_id": 1405}
{"story_id": 253, "premises": "No reptile has fur.\nAll snakes are reptiles.", "premises-FOL": "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))\n\u2200x (Snake(x) \u2192 Reptile(x))", "conclusion": "Some snake has fur.", "conclusion-FOL": "\u2203x (Snake(x) \u2227 Have(x, fur))", "label": "False", "example_id": 697}
{"story_id": 60, "premises": "All buildings in New Haven are not high.\nAll buildings managed by Yale Housing are located in New Haven. \nAll buildings in Manhattans are high. \nAll buildings owned by Bloomberg are located in Manhattans. \nAll buildings with the Bloomberg logo are owned by Bloomberg. \nTower A is managed by Yale Housing.\nTower B is with the Bloomberg logo.", "premises-FOL": "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))\n\u2200x (YaleHousing(x) \u2192 In(x, newHaven))\n\u2200x (In(x, manhattan) \u2192 High(x))\n\u2200x (Bloomberg(x) \u2192 In(x, manhattan))\n\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)", "conclusion": "Tower A is low.", "conclusion-FOL": "\u00acHigh(tower-a)", "label": "True", "example_id": 177}
{"story_id": 60, "premises": "All buildings in New Haven are not high.\nAll buildings managed by Yale Housing are located in New Haven. \nAll buildings in Manhattans are high. \nAll buildings owned by Bloomberg are located in Manhattans. \nAll buildings with the Bloomberg logo are owned by Bloomberg. \nTower A is managed by Yale Housing.\nTower B is with the Bloomberg logo.", "premises-FOL": "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))\n\u2200x (YaleHousing(x) \u2192 In(x, newHaven))\n\u2200x (In(x, manhattan) \u2192 High(x))\n\u2200x (Bloomberg(x) \u2192 In(x, manhattan))\n\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)", "conclusion": "Tower B is not located in Manhattans.", "conclusion-FOL": "\u00acIn(tower-b, manhattan)", "label": "False", "example_id": 178}
{"story_id": 60, "premises": "All buildings in New Haven are not high.\nAll buildings managed by Yale Housing are located in New Haven. \nAll buildings in Manhattans are high. \nAll buildings owned by Bloomberg are located in Manhattans. \nAll buildings with the Bloomberg logo are owned by Bloomberg. \nTower A is managed by Yale Housing.\nTower B is with the Bloomberg logo.", "premises-FOL": "\u2200x (In(x, newHaven) \u2192 \u00acHigh(x))\n\u2200x (YaleHousing(x) \u2192 In(x, newHaven))\n\u2200x (In(x, manhattan) \u2192 High(x))\n\u2200x (Bloomberg(x) \u2192 In(x, manhattan))\n\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))\nYaleHousing(tower-a)\nBloombergLogo(tower-b)", "conclusion": "Tower B is located in New Haven.", "conclusion-FOL": "\u00acIn(tower-b, newHaven)", "label": "False", "example_id": 179}
{"story_id": 453, "premises": "No birds are ectothermic.\nAll penguins are birds.\nAn animal is ectothermic or endothermic.\nAll endothermic animals produce heat within the body.\nRon and Henry are both animals.\nRon is not a bird and does not produce heat with the body. \nHenry is not a cat and does not produce heat with the body. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u00acEctothermic(x))\n\u2200x (Penguin(x) \u2192 Bird(x))\n\u2200x (Animal(x) \u2192 Ectothermic(x) \u2228 Endothermic(x))\n\u2200x (Endothermic(x) \u2192 ProduceWithIn(x, heat, body))\nAnimal(ron) \u2227 Animal(henry)\n\u00acBird(ron) \u2227 \u00acProduceWithIn(ron, heat, body)\n\u00acCat(henry) \u2227 \u00acProduceWithIn(henry, heat, body)", "conclusion": "Ron is a cat.", "conclusion-FOL": "Cat(ron)", "label": "Uncertain", "example_id": 1304}
{"story_id": 453, "premises": "No birds are ectothermic.\nAll penguins are birds.\nAn animal is ectothermic or endothermic.\nAll endothermic animals produce heat within the body.\nRon and Henry are both animals.\nRon is not a bird and does not produce heat with the body. \nHenry is not a cat and does not produce heat with the body. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u00acEctothermic(x))\n\u2200x (Penguin(x) \u2192 Bird(x))\n\u2200x (Animal(x) \u2192 Ectothermic(x) \u2228 Endothermic(x))\n\u2200x (Endothermic(x) \u2192 ProduceWithIn(x, heat, body))\nAnimal(ron) \u2227 Animal(henry)\n\u00acBird(ron) \u2227 \u00acProduceWithIn(ron, heat, body)\n\u00acCat(henry) \u2227 \u00acProduceWithIn(henry, heat, body)", "conclusion": "Either Henry is a penguin or Henry is endothermic.", "conclusion-FOL": "Penguin(henry) \u2295 Endothermic(henry)", "label": "False", "example_id": 1305}
{"story_id": 453, "premises": "No birds are ectothermic.\nAll penguins are birds.\nAn animal is ectothermic or endothermic.\nAll endothermic animals produce heat within the body.\nRon and Henry are both animals.\nRon is not a bird and does not produce heat with the body. \nHenry is not a cat and does not produce heat with the body. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u00acEctothermic(x))\n\u2200x (Penguin(x) \u2192 Bird(x))\n\u2200x (Animal(x) \u2192 Ectothermic(x) \u2228 Endothermic(x))\n\u2200x (Endothermic(x) \u2192 ProduceWithIn(x, heat, body))\nAnimal(ron) \u2227 Animal(henry)\n\u00acBird(ron) \u2227 \u00acProduceWithIn(ron, heat, body)\n\u00acCat(henry) \u2227 \u00acProduceWithIn(henry, heat, body)", "conclusion": "Ron is either both a penguin and endothermic, or he is nether.", "conclusion-FOL": "\u00ac(Penguin(ron) \u2295 Endothermic(henry))", "label": "True", "example_id": 1306}
{"story_id": 73, "premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "conclusion": "Yevgeny Kurochkin discovered a new bird genus.", "conclusion-FOL": "\u2203x (Discover(yevgenykurochkin, x) \u2227 BirdGenus(x))", "label": "True", "example_id": 221}
{"story_id": 73, "premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "conclusion": "There is a species of Ambiortus that doesn't live in Mongolia.", "conclusion-FOL": "\u2203x (KnownSpeciesOf(x, ambiortus) \u2227 \u00acLiveIn(x, mongolia))", "label": "False", "example_id": 222}
{"story_id": 73, "premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "conclusion": "Yevgeny Kurochkin lived in Mongolia.", "conclusion-FOL": "LiveIn(yevgenykurochkin, mongolia)", "label": "Uncertain", "example_id": 223}
{"story_id": 73, "premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "conclusion": "All species of Ambiortus live in Mongolia.", "conclusion-FOL": "\u2200x (SpeciesOf(x, ambiortus) \u2192 LiveIn(x, mongolia))", "label": "True", "example_id": 224}
{"story_id": 448, "premises": "Everyone that knows about breath-first-search knows how to use a queue. \nIf someone is a seasoned software engineer interviewer at Google, then they know what breath-first-search is. \nSomeone is either a seasoned software engineer interviewer at Google, has human rights, or both. \nEvery person who has human rights is entitled to the right to life and liberty. \nEveryone that knows how to use a queue knows about the first-in-first-out data structure. \nEveryone that is entitled to the right to life and liberty cannot be deprived of their rights without due process of law. \nJack is entitled to the right to life and liberty, has human rights, or knows about the first-in-first-out data structure. ", "premises-FOL": "\u2200x (Know(x, breathFirstSearch) \u2192 Know(x, howToUseQueue))\n\u2200x (Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google) \u2192 Know(x, breathFirstSearch))\n\u2200x ((Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google)) \u2228 Have(x, humanRights))\n\u2200x (Have(x, humanRights) \u2192 EntitledTo(x, rightToLifeAndLiberty))\n\u2200x (Know(x, howToUseQueue) \u2192 Know(x, firstInFirstOutDataStructure))\n\u2200x (EntitledTo(x, rightToLifeAndLiberty) \u2192 \u00acDeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) \u2228 Have(jack, humanRights) \u2228 Know(jack, firstInFirstOutDataStructure))", "conclusion": "Jack is a seasoned software engineer interviewer.", "conclusion-FOL": "Seasoned(jack) \u2227 SoftwareEngineerInterviewer(jack) \u2227 At(jack, google)", "label": "Uncertain", "example_id": 1289}
{"story_id": 448, "premises": "Everyone that knows about breath-first-search knows how to use a queue. \nIf someone is a seasoned software engineer interviewer at Google, then they know what breath-first-search is. \nSomeone is either a seasoned software engineer interviewer at Google, has human rights, or both. \nEvery person who has human rights is entitled to the right to life and liberty. \nEveryone that knows how to use a queue knows about the first-in-first-out data structure. \nEveryone that is entitled to the right to life and liberty cannot be deprived of their rights without due process of law. \nJack is entitled to the right to life and liberty, has human rights, or knows about the first-in-first-out data structure. ", "premises-FOL": "\u2200x (Know(x, breathFirstSearch) \u2192 Know(x, howToUseQueue))\n\u2200x (Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google) \u2192 Know(x, breathFirstSearch))\n\u2200x ((Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google)) \u2228 Have(x, humanRights))\n\u2200x (Have(x, humanRights) \u2192 EntitledTo(x, rightToLifeAndLiberty))\n\u2200x (Know(x, howToUseQueue) \u2192 Know(x, firstInFirstOutDataStructure))\n\u2200x (EntitledTo(x, rightToLifeAndLiberty) \u2192 \u00acDeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) \u2228 Have(jack, humanRights) \u2228 Know(jack, firstInFirstOutDataStructure))", "conclusion": "Jack cannot be deprived of their rights without due process of law.", "conclusion-FOL": "\u00acDeprivedOfWithout(jack, rights, dueProcessOfLaw)", "label": "True", "example_id": 1290}
{"story_id": 448, "premises": "Everyone that knows about breath-first-search knows how to use a queue. \nIf someone is a seasoned software engineer interviewer at Google, then they know what breath-first-search is. \nSomeone is either a seasoned software engineer interviewer at Google, has human rights, or both. \nEvery person who has human rights is entitled to the right to life and liberty. \nEveryone that knows how to use a queue knows about the first-in-first-out data structure. \nEveryone that is entitled to the right to life and liberty cannot be deprived of their rights without due process of law. \nJack is entitled to the right to life and liberty, has human rights, or knows about the first-in-first-out data structure. ", "premises-FOL": "\u2200x (Know(x, breathFirstSearch) \u2192 Know(x, howToUseQueue))\n\u2200x (Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google) \u2192 Know(x, breathFirstSearch))\n\u2200x ((Seasoned(x) \u2227 SoftwareEngineerInterviewer(x) \u2227 At(x, google)) \u2228 Have(x, humanRights))\n\u2200x (Have(x, humanRights) \u2192 EntitledTo(x, rightToLifeAndLiberty))\n\u2200x (Know(x, howToUseQueue) \u2192 Know(x, firstInFirstOutDataStructure))\n\u2200x (EntitledTo(x, rightToLifeAndLiberty) \u2192 \u00acDeprivedOfWithout(x, rights, dueProcessOfLaw))\n(EntitledTo(jack, rightToLifeAndLiberty) \u2228 Have(jack, humanRights) \u2228 Know(jack, firstInFirstOutDataStructure))", "conclusion": "Jack can be deprived of their rights without due process of law.", "conclusion-FOL": "DeprivedOfWithout(jack, rights, dueProcessOfLaw)", "label": "False", "example_id": 1291}
{"story_id": 3, "premises": "Fort Ticonderoga is the current name for Fort Carillon.\nPierre de Rigaud de Vaudreuil built Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.", "premises-FOL": "RenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n\u00acLocatedIn(newFrance, europe) ", "conclusion": "Pierre de Rigaud de Vaudreuil built a fort in New France.", "conclusion-FOL": "\u2203x (Built(pierredeRigauddeVaudreuil, x) \u2227 LocatedIn(x, newFrance))", "label": "True", "example_id": 7}
{"story_id": 3, "premises": "Fort Ticonderoga is the current name for Fort Carillon.\nPierre de Rigaud de Vaudreuil built Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.", "premises-FOL": "RenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n\u00acLocatedIn(newFrance, europe) ", "conclusion": "Pierre de Rigaud de Vaudreuil built a fort in New England.", "conclusion-FOL": "\u2203x (Built(pierredeRigauddeVaudreuil, x) \u2227 LocatedIn(x, newEngland))", "label": "Uncertain", "example_id": 8}
{"story_id": 3, "premises": "Fort Ticonderoga is the current name for Fort Carillon.\nPierre de Rigaud de Vaudreuil built Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.", "premises-FOL": "RenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n\u00acLocatedIn(newFrance, europe) ", "conclusion": "Fort Carillon was located in Europe.", "conclusion-FOL": "LocatedIn(fortCarillon, europe)", "label": "Uncertain", "example_id": 9}
{"story_id": 328, "premises": "No soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerback players are soccer defenders.\nIf Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "premises-FOL": "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)", "conclusion": "Stephen Curry is an NBA player.", "conclusion-FOL": "NBAPlayer(stephenCurry)", "label": "Uncertain", "example_id": 840}
{"story_id": 328, "premises": "No soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerback players are soccer defenders.\nIf Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "premises-FOL": "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)", "conclusion": "Stephen Curry is a centerback player.", "conclusion-FOL": "ProfessionalCenterback(stephenCurry)", "label": "False", "example_id": 841}
{"story_id": 328, "premises": "No soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerback players are soccer defenders.\nIf Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "premises-FOL": "\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n(NBAPlayer(stephencurry) \u2295 ProfessionalSoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)", "conclusion": "Stephen Curry is not a centerback player.", "conclusion-FOL": "\u00acProfessionalCenterback(stephenCurry)", "label": "True", "example_id": 842}
{"story_id": 484, "premises": "No songs are visuals. \nAll folk songs are songs. \nAll videos are visuals. \nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.", "premises-FOL": "\u2200x (Song(x) \u2192 \u00acVisual(x))\n\u2200x (FolkSong(x) \u2192 Song(x))\n\u2200x (Video(x) \u2192 Visual(x))\n\u2200x (Movie(x) \u2192 Video(x))\n\u2200x (ScifiMovie(x) \u2192 Movie(x))\nScifiMovie(inception)\n\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)", "conclusion": "Inception is a folk song.", "conclusion-FOL": "FolkSong(inception)", "label": "False", "example_id": 1415}
{"story_id": 484, "premises": "No songs are visuals. \nAll folk songs are songs. \nAll videos are visuals. \nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.", "premises-FOL": "\u2200x (Song(x) \u2192 \u00acVisual(x))\n\u2200x (FolkSong(x) \u2192 Song(x))\n\u2200x (Video(x) \u2192 Visual(x))\n\u2200x (Movie(x) \u2192 Video(x))\n\u2200x (ScifiMovie(x) \u2192 Movie(x))\nScifiMovie(inception)\n\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)", "conclusion": "Inception is not a folk song.", "conclusion-FOL": "\u00acFolkSong(inception)", "label": "True", "example_id": 1416}
{"story_id": 484, "premises": "No songs are visuals. \nAll folk songs are songs. \nAll videos are visuals. \nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.", "premises-FOL": "\u2200x (Song(x) \u2192 \u00acVisual(x))\n\u2200x (FolkSong(x) \u2192 Song(x))\n\u2200x (Video(x) \u2192 Visual(x))\n\u2200x (Movie(x) \u2192 Video(x))\n\u2200x (ScifiMovie(x) \u2192 Movie(x))\nScifiMovie(inception)\n\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)", "conclusion": "Inception is either a video or a folk song.", "conclusion-FOL": "Video(inception) \u2295 FolkSong(inception)", "label": "True", "example_id": 1417}
{"story_id": 484, "premises": "No songs are visuals. \nAll folk songs are songs. \nAll videos are visuals. \nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.", "premises-FOL": "\u2200x (Song(x) \u2192 \u00acVisual(x))\n\u2200x (FolkSong(x) \u2192 Song(x))\n\u2200x (Video(x) \u2192 Visual(x))\n\u2200x (Movie(x) \u2192 Video(x))\n\u2200x (ScifiMovie(x) \u2192 Movie(x))\nScifiMovie(inception)\n\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)", "conclusion": "Mac is a video.", "conclusion-FOL": "Video(mac)", "label": "Uncertain", "example_id": 1418}
{"story_id": 393, "premises": "All inductive reasoning processes derive general principles from a body of observations.\nTwo major types of reasoning rules are inductive reasoning and deductive reasoning. \nAll deductive reasoning processes are only based on facts and rules. \nNothing only based on facts and rules is used for statistical generalization. \nModus Ponens is not both used in inductive reasoning and used for statistical generalization. \nModus Ponens is a component of a major part of reasoning rule. ", "premises-FOL": "\u2200x (InductiveReasoning(x) \u2192 DeriveFrom(generalPrinciple, observations))\n\u2200x (MajorArgumentForm(x) \u2192 (InductiveReasoning(x) \u2295 DeductiveReasoning(x))\n\u2200x (DeductiveReasoning(x) \u2192 (BasedOn(x, fact) \u2228 BasedOn(x, rule)))\n\u2200x ((BasedOn(x, fact) \u2228 BasedOn(x, rule)) \u2192 (\u00acUsedFor(x, statisticalGeneralization)))\n\u00ac(InductiveReasoning(modusPonens) \u2227 UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)", "conclusion": "Reasoning with Modus Ponens is based on facts and rules.", "conclusion-FOL": "BasedOn(x, fact) \u2228 BasedOn(x, rule)", "label": "Uncertain", "example_id": 1060}
{"story_id": 393, "premises": "All inductive reasoning processes derive general principles from a body of observations.\nTwo major types of reasoning rules are inductive reasoning and deductive reasoning. \nAll deductive reasoning processes are only based on facts and rules. \nNothing only based on facts and rules is used for statistical generalization. \nModus Ponens is not both used in inductive reasoning and used for statistical generalization. \nModus Ponens is a component of a major part of reasoning rule. ", "premises-FOL": "\u2200x (InductiveReasoning(x) \u2192 DeriveFrom(generalPrinciple, observations))\n\u2200x (MajorArgumentForm(x) \u2192 (InductiveReasoning(x) \u2295 DeductiveReasoning(x))\n\u2200x (DeductiveReasoning(x) \u2192 (BasedOn(x, fact) \u2228 BasedOn(x, rule)))\n\u2200x ((BasedOn(x, fact) \u2228 BasedOn(x, rule)) \u2192 (\u00acUsedFor(x, statisticalGeneralization)))\n\u00ac(InductiveReasoning(modusPonens) \u2227 UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)", "conclusion": "Modus Ponens derives general principles from a body of observations and is used for statistical generalization.", "conclusion-FOL": "DeriveFrom(generalPrinciple, observations) \u2227 UsedFor(x, statisticalGeneralization)", "label": "False", "example_id": 1061}
{"story_id": 393, "premises": "All inductive reasoning processes derive general principles from a body of observations.\nTwo major types of reasoning rules are inductive reasoning and deductive reasoning. \nAll deductive reasoning processes are only based on facts and rules. \nNothing only based on facts and rules is used for statistical generalization. \nModus Ponens is not both used in inductive reasoning and used for statistical generalization. \nModus Ponens is a component of a major part of reasoning rule. ", "premises-FOL": "\u2200x (InductiveReasoning(x) \u2192 DeriveFrom(generalPrinciple, observations))\n\u2200x (MajorArgumentForm(x) \u2192 (InductiveReasoning(x) \u2295 DeductiveReasoning(x))\n\u2200x (DeductiveReasoning(x) \u2192 (BasedOn(x, fact) \u2228 BasedOn(x, rule)))\n\u2200x ((BasedOn(x, fact) \u2228 BasedOn(x, rule)) \u2192 (\u00acUsedFor(x, statisticalGeneralization)))\n\u00ac(InductiveReasoning(modusPonens) \u2227 UsedFor(modusPonens, statisticalGeneralization))\nArgumentForm(modusPonens)", "conclusion": "If Modus Ponens either derives general principles from a body of observations and is used for statistical generalization, or neither, then Modus Ponens is is neither used in inductive reasoning  nor used for statistical generalization.", "conclusion-FOL": "\u00ac(Derive(generalPrinciple, observations) \u2295 UsedFor(x, statisticalGeneralization)) \u2192 (\u00acInductiveReasoning(modusPonens) \u2227 (\u00acUsedFor(modusPonens, statisticalGeneralization)))", "label": "True", "example_id": 1062}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack struggles at half court shots.", "conclusion-FOL": "StruggleAt(jack, halfCourtShot)", "label": "Uncertain", "example_id": 1133}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is bad at mid-range shots.", "conclusion-FOL": "BadAt(jack, midRangeShot)", "label": "False", "example_id": 1134}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is solid at shooting 2-pointers or bad at mid-range shots.", "conclusion-FOL": "GoodAt(jack, twos) \u2228 BadAt(jack, midRangeShot)", "label": "True", "example_id": 1135}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is either solid at shooting 2-pointers or bad at mid-range shots.", "conclusion-FOL": "GoodAt(jack, twos) \u2295 BadAt(jack, midRangeShot)", "label": "True", "example_id": 1136}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is a trick-shot artist or bad at mid-range shots.", "conclusion-FOL": "TrickShotArtist(jack) \u2228 BadAt(jack, midRangeShot))", "label": "False", "example_id": 1137}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is either a trick-shot artist or bad at mid-range shots.", "conclusion-FOL": "TrickShotArtist(jack) \u2295 BadAt(jack, midRangeShots)", "label": "False", "example_id": 1138}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.", "conclusion-FOL": "GoodAt(jack, threes) \u2295 BadAt(jack, midRangeShot)", "label": "True", "example_id": 1139}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "If Jack is not solid at shooting 2-pointers and bad at mid-range shots, then Jack is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.", "conclusion-FOL": "BadAt(jack, midRangeShot) \u2227 GoodAt(jack, twos) \u2192 \u00acGoodAt(jack, twos) \u2227 GoodAt(jack, threes)", "label": "False", "example_id": 1140}
{"story_id": 408, "premises": "No trick-shot artist in Yale's varsity team struggles with half court shots.\nEveryone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  \nEveryone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  \nNo one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  \nJack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers.", "premises-FOL": "\u2200x ((In(x, yaleSVarsityTeam) \u2227 TrickShotArtist(x)) \u2192 \u00acStruggleAt(x, halfCourtShot))\n\u2200x (In(x, yaleSVarsityTeam) \u2192 (StruggleAt(x, halfCourtShot) \u2228 GoodAt(x, threes)))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, threes)) \u2192 GoodAt(x, twos))\n\u2200x ((In(x, yaleSVarsityTeam) \u2227 GoodAt(x, twos)) \u2192 BadAt(x, midRangeShot))\nIn(jack, yaleSVarsityTeam) \u2227 (TrickShotArtist(jack) \u2295  GoodAt(jack, threes))", "conclusion": "If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots.", "conclusion-FOL": "GoodAt(jack, twos) \u2228 GoodAt(jack, threes) \u2192 BadAt(jack, halfCourtShot) \u2227 BadAt(jack, midRangeShot)", "label": "Uncertain", "example_id": 1141}
{"story_id": 271, "premises": "No plants are fungi.\nMushrooms are fungi.", "premises-FOL": "\u2200x (Plant(x) \u2192 \u00acFungi(x))\n\u2200x (Mushroom(x) \u2192 Fungi(x))", "conclusion": "No plants are mushrooms.", "conclusion-FOL": "\u2200x (Plant(x) \u2192 \u00acMushroom(x))", "label": "True", "example_id": 715}
{"story_id": 291, "premises": "No road is dustless.\nSome streets are roads.", "premises-FOL": "\u2200x (Road(x) \u2192 \u00acDustless(x))\n\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Road(x) \u2227 Road(y) \u2227 \u00ac(x=y))", "conclusion": "Some streets are dustless.", "conclusion-FOL": "\u2203x \u2203y (Street(x) \u2227 Street(y) \u2227 Dustless(x) \u2227 Dustless(y) \u2227 \u00ac(x=y))", "label": "Uncertain", "example_id": 735}
{"story_id": 222, "premises": "New York City is located on the East Coast. \nSeattle is located on the West Coast. \nIf a person is somewhere located on the East coast and is traveling to somewhere located on the west coast, they will be on a long flight.\nPeople in business class from New York City to Seattle are not in first class.\nPeople on long flights are uncomfortable unless they're in first class.", "premises-FOL": "LocatedOn(newYorkCity, eastCoast)\nLocatedOn(seattle, westCoast)\n\u2200x \u2200y \u2200z ((TravelingFrom(x, y) \u2227 LocatedOn(y, eastcoast) \u2227 TravelingTo(x, z) \u2227 LocatedOn(z, westcoast)) \u2192 OnLongFlight(x))\n\u2200x (InBuisnessClass(x) \u2227 TravelingTo(x, seattle) \u2227 TravelingFrom(x, newYorkCity) \u2192 \u00acInFirstClass(x))\n\u2200x (OnLongFlight(x) \u2227 \u00acInFirstClass(x) \u2192 Uncomfortable(x))", "conclusion": "People traveling in business class from New York City to Seattle will be uncomfortable.", "conclusion-FOL": "\u2203x (TravelingTo(x, seattle) \u2227 TravelingFrom(x, newYorkCity) \u2227 uncomfortable(x))", "label": "True", "example_id": 628}
{"story_id": 118, "premises": "Musicians have very busy lives.\nSingh Kaur is a musician and famous.\nIf a musician is not famous, that musician will not make a lot of money.\nA musician can be a singer or a writer.", "premises-FOL": "\u2200x (Musician(x) \u2192 Have(x, busyLife))\nMusician(singhKaur) \u2227 Famous(singhKaur)\n\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeALotOfMoney(x))\n\u2203x (Musician(x) \u2227 (Singer(x) \u2228 Writer(x)))", "conclusion": "Singh Kaur makes a lot of money.", "conclusion-FOL": "MakeALotOfMoney(singhKaur)", "label": "Uncertain", "example_id": 355}
{"story_id": 118, "premises": "Musicians have very busy lives.\nSingh Kaur is a musician and famous.\nIf a musician is not famous, that musician will not make a lot of money.\nA musician can be a singer or a writer.", "premises-FOL": "\u2200x (Musician(x) \u2192 Have(x, busyLife))\nMusician(singhKaur) \u2227 Famous(singhKaur)\n\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeALotOfMoney(x))\n\u2203x (Musician(x) \u2227 (Singer(x) \u2228 Writer(x)))", "conclusion": "Singh Kaur is a writer.", "conclusion-FOL": "Writer(singhKaur)", "label": "Uncertain", "example_id": 356}
{"story_id": 118, "premises": "Musicians have very busy lives.\nSingh Kaur is a musician and famous.\nIf a musician is not famous, that musician will not make a lot of money.\nA musician can be a singer or a writer.", "premises-FOL": "\u2200x (Musician(x) \u2192 Have(x, busyLife))\nMusician(singhKaur) \u2227 Famous(singhKaur)\n\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeALotOfMoney(x))\n\u2203x (Musician(x) \u2227 (Singer(x) \u2228 Writer(x)))", "conclusion": "Singh Kaur has a very busy life.", "conclusion-FOL": "Have(singhKaur, busyLife)", "label": "True", "example_id": 357}
{"story_id": 284, "premises": "Each building is tall. \nEverything tall has height.", "premises-FOL": "\u2200x (Building(x) \u2192 Tall(x))\n\u2200x (Tall(x) \u2192 Height(x))", "conclusion": "All buildings are magnificent.", "conclusion-FOL": "\u2200x (Building(x) \u2192 Magnificent(x))", "label": "Uncertain", "example_id": 728}
{"story_id": 126, "premises": "A cat named Garfield, the main character of the film Garfield, is orange and fat and likes having lasagna. \nGarfield shares a home with Odie, another pet of Jon's. \nGarfield hates Odie.\nA pet who hates the pet with whom he shares the same owner is childish and possessive.", "premises-FOL": "Cat(garfield) \u2227 MainCharacterOf(garfield, filmGarfield) \u2227 Orange(garfield) \u2227 Fat(garfield) \u2227 Like(garfield, lasagna)\nPetOf(garfield, jon) \u2227 PetOf(odie, jon) \u2227 ShareHomeWith(garfield, odie)\nHate(garfield, odie)\n\u2200x \u2200y \u2203z (PetOf(x, z) \u2227 PetOf(y, z) \u2227 Hate(x, y) \u2192 Childish(x) \u2227 Possessive(x))", "conclusion": "The main character of the film Garfield is childish and possessive.", "conclusion-FOL": "\u2203x (MainCharacterOf(x, garfield) \u2227 Childish(x) \u2227 Possessive(x))", "label": "True", "example_id": 375}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "Hulu is capable of abstract thoughts.", "conclusion-FOL": "CapableOf(hulu, abstractThought)", "label": "Uncertain", "example_id": 1372}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "Hulu is not capable of abstract thoughts.", "conclusion-FOL": "\u00acCapableOf(hulu, abstractThought)", "label": "Uncertain", "example_id": 1373}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "Hulu is dirt.", "conclusion-FOL": "Dirt(hulu)", "label": "False", "example_id": 1374}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "Hulu is an animal or dirt.", "conclusion-FOL": "Animal(hulu) \u2228 Dirt(hulu)", "label": "True", "example_id": 1375}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "Hulu is either an animal or dirt, but not both.", "conclusion-FOL": "Animal(hulu) \u2295 Dirt(hulu)", "label": "True", "example_id": 1376}
{"story_id": 474, "premises": "All humans are capable of abstract thoughts.\nPlants are not capable of abstract thoughts.\nAll multicellular creatures that are autotrophic or digest food internally are plants and animals.\nAll goats are animals.\nDirt is not an animal.\nHulu is a goat or a human.\nHulu is a multicellular creature that is autotrophic or digests food internally. ", "premises-FOL": "\u2200x (Human(x) \u2192 CapableOf(x, abstractThought))\n\u2200x (Plant(x) \u2192 \u00acCapableOf(x, abstractThought))\n\u2200x (MulticellularCreature(x) \u2227 (Autotrophic(x) \u2228 DigestFoodInternally (x)) \u2192 Plant(x) \u2295 Animal(x))\n\u2200x (Goat(x) \u2192 Animal(x))\n\u2200x (Dirt(x) \u2192 \u00acAnimal(x))\nGoat(hulu) \u2228 HumanBeing(hulu)\n(MulticellularCreature(hulu) \u2227 (Autotrophic(hulu) \u2228 DigestFoodInternally (hulu))", "conclusion": "If Hulu is either an animal or dirt, then Hulu is capable of abstract thoughts and is dirt.", "conclusion-FOL": "Animal(hulu) \u2295 Dirt(hulu) \u2192 CapableOf(hulu, abstractThought) \u2227 Dirt(hulu)", "label": "False", "example_id": 1377}
{"story_id": 47, "premises": "A controlled substance is a drug.\nThere exist both harmful and beneficial controlled substances.\nIf a child is exposed to a controlled substance, they are in chemical endangerment.\nChemical Endangerment is harmful. \nThe Controlled Substances Act was an act passed in 1971.\nSome Acts prevent harmful things.", "premises-FOL": "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))\n\u2203x \u2203y (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 (\u00ac(x=y)) \u2227 Beneficial(x) \u2227 Harmful(y))\n\u2200x \u2200y ((Child(x) \u2227 ControlledSubstances(y) \u2227 ExposedTo(x, y)) \u2192 InChemicalEndangerment(x))\n\u2200x (InChemicalEndangerment(x) \u2192 Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) \u2227 Act(controlledSubstancesAct)\n\u2203x \u2203y(Act(x) \u2227 PreventsHarm(x) \u2227 (\u00ac(x=y)) \u2227 Act(y) \u2227 PreventsHarm(y))", "conclusion": "The Controlled Substances Act prevents harmful things.", "conclusion-FOL": "PreventsHarm(controlledSubstancesAct)", "label": "Uncertain", "example_id": 135}
{"story_id": 47, "premises": "A controlled substance is a drug.\nThere exist both harmful and beneficial controlled substances.\nIf a child is exposed to a controlled substance, they are in chemical endangerment.\nChemical Endangerment is harmful. \nThe Controlled Substances Act was an act passed in 1971.\nSome Acts prevent harmful things.", "premises-FOL": "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))\n\u2203x \u2203y (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 (\u00ac(x=y)) \u2227 Beneficial(x) \u2227 Harmful(y))\n\u2200x \u2200y ((Child(x) \u2227 ControlledSubstances(y) \u2227 ExposedTo(x, y)) \u2192 InChemicalEndangerment(x))\n\u2200x (InChemicalEndangerment(x) \u2192 Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) \u2227 Act(controlledSubstancesAct)\n\u2203x \u2203y(Act(x) \u2227 PreventsHarm(x) \u2227 (\u00ac(x=y)) \u2227 Act(y) \u2227 PreventsHarm(y))", "conclusion": "Some drugs are beneficial.", "conclusion-FOL": "\u2203x \u2203y(Drugs(x) \u2227 Beneficial(x) \u2227 (\u00ac(x=y)) \u2227 Drugs(y) \u2227 Beneficial(y))", "label": "True", "example_id": 136}
{"story_id": 47, "premises": "A controlled substance is a drug.\nThere exist both harmful and beneficial controlled substances.\nIf a child is exposed to a controlled substance, they are in chemical endangerment.\nChemical Endangerment is harmful. \nThe Controlled Substances Act was an act passed in 1971.\nSome Acts prevent harmful things.", "premises-FOL": "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))\n\u2203x \u2203y (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 (\u00ac(x=y)) \u2227 Beneficial(x) \u2227 Harmful(y))\n\u2200x \u2200y ((Child(x) \u2227 ControlledSubstances(y) \u2227 ExposedTo(x, y)) \u2192 InChemicalEndangerment(x))\n\u2200x (InChemicalEndangerment(x) \u2192 Harmful(x))\nPassedIn(controlledSubstancesAct, yr1971) \u2227 Act(controlledSubstancesAct)\n\u2203x \u2203y(Act(x) \u2227 PreventsHarm(x) \u2227 (\u00ac(x=y)) \u2227 Act(y) \u2227 PreventsHarm(y))", "conclusion": "A child in chemical endangerment is in harm.", "conclusion-FOL": "\u2200x ((Child(x) \u2227 InChemicalEndangerment(x)) \u2192 Harmful(x))", "label": "True", "example_id": 137}
{"story_id": 321, "premises": "No people who have corporate jobs are taking more than normal financial risks.\nAll entrepreneurs are taking more than normal financial risks.\nAll risk-averse working people are people who have corporate jobs.\nAll working people who hate working for others want to be entrepreneurs.\nIf Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse working person.", "premises-FOL": "\u2200x (Have(x, corporateJob) \u2192 \u00acTake(x, financialRisk))\n\u2200x (Entrepreneur(x) \u2192 Take(x, financialRisk))\n\u2200x (RiskAverse(x) \u2192 Have(x, corporateJob))\n\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(x, y) \u2227 HateWorkingFor(x, z)) \u2192 Entrepreneur(x))\n\u00acEntrepreneur(markZuckerberg) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=markZuckerberg) \u2227 \u00ac(z=markZuckerberg) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(markZuckerberg, y) \u2227 HateWorkingFor(markZuckerberg, z))) \u2192 \u00acRiskAverse(markZuckerberg)", "conclusion": "Mark Zuckerberg is an entrepreneur.", "conclusion-FOL": "Entrepreneur(markZuckerberg)", "label": "Uncertain", "example_id": 816}
{"story_id": 321, "premises": "No people who have corporate jobs are taking more than normal financial risks.\nAll entrepreneurs are taking more than normal financial risks.\nAll risk-averse working people are people who have corporate jobs.\nAll working people who hate working for others want to be entrepreneurs.\nIf Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse working person.", "premises-FOL": "\u2200x (Have(x, corporateJob) \u2192 \u00acTake(x, financialRisk))\n\u2200x (Entrepreneur(x) \u2192 Take(x, financialRisk))\n\u2200x (RiskAverse(x) \u2192 Have(x, corporateJob))\n\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(x, y) \u2227 HateWorkingFor(x, z)) \u2192 Entrepreneur(x))\n\u00acEntrepreneur(markZuckerberg) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=markZuckerberg) \u2227 \u00ac(z=markZuckerberg) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(markZuckerberg, y) \u2227 HateWorkingFor(markZuckerberg, z))) \u2192 \u00acRiskAverse(markZuckerberg)", "conclusion": "Mark Zuckerberg is a risk-averse person.", "conclusion-FOL": "RiskAverse(markZuckerberg)", "label": "False", "example_id": 817}
{"story_id": 321, "premises": "No people who have corporate jobs are taking more than normal financial risks.\nAll entrepreneurs are taking more than normal financial risks.\nAll risk-averse working people are people who have corporate jobs.\nAll working people who hate working for others want to be entrepreneurs.\nIf Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse working person.", "premises-FOL": "\u2200x (Have(x, corporateJob) \u2192 \u00acTake(x, financialRisk))\n\u2200x (Entrepreneur(x) \u2192 Take(x, financialRisk))\n\u2200x (RiskAverse(x) \u2192 Have(x, corporateJob))\n\u2200x (\u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(x, y) \u2227 HateWorkingFor(x, z)) \u2192 Entrepreneur(x))\n\u00acEntrepreneur(markZuckerberg) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=markZuckerberg) \u2227 \u00ac(z=markZuckerberg) \u2227 \u00ac(y=z) \u2227 HateWorkingFor(markZuckerberg, y) \u2227 HateWorkingFor(markZuckerberg, z))) \u2192 \u00acRiskAverse(markZuckerberg)", "conclusion": "Mark Zuckerberg is not a risk-averse person.", "conclusion-FOL": "\u00acRiskAverse(markZuckerberg)", "label": "True", "example_id": 818}
{"story_id": 200, "premises": "Wildfeed exists as an unannounced program.\nWildfeed can be sporting events, news, or syndicated shows.\nPre-recorded content is a copyright violation.\nPrograms are pre-recorded.", "premises-FOL": "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))\n\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))\n\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))\n\u2200x (Program(x) \u2192 Prerecorded(x))", "conclusion": "Some wildfeed is violating copyright laws.", "conclusion-FOL": "\u2203x (Wildfeed(x) \u2227 CopyrightViolation(x))", "label": "True", "example_id": 569}
{"story_id": 200, "premises": "Wildfeed exists as an unannounced program.\nWildfeed can be sporting events, news, or syndicated shows.\nPre-recorded content is a copyright violation.\nPrograms are pre-recorded.", "premises-FOL": "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))\n\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))\n\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))\n\u2200x (Program(x) \u2192 Prerecorded(x))", "conclusion": "Wildfeed can be prerecorded.", "conclusion-FOL": "\u2203x (Wildfeed(x) \u2227 Prerecorded(x))", "label": "True", "example_id": 570}
{"story_id": 200, "premises": "Wildfeed exists as an unannounced program.\nWildfeed can be sporting events, news, or syndicated shows.\nPre-recorded content is a copyright violation.\nPrograms are pre-recorded.", "premises-FOL": "\u2203x (Wildfeed(x) \u2227 Unannounced(x) \u2227 Program(x))\n\u2200x (Wildfeed(x) \u2192 SportingEvent(x) \u2228 News(x) \u2228 SyndicatedShow(x))\n\u2200x (Prerecorded(x) \u2192 CopyrightViolation(x))\n\u2200x (Program(x) \u2192 Prerecorded(x))", "conclusion": "Syndicated shows are copyright violations.", "conclusion-FOL": "\u2203x (SyndicatedShows(x) \u2227 CopyrightViolation(x))", "label": "Uncertain", "example_id": 571}
{"story_id": 127, "premises": "New York City is Located in the United States of America.\nThe United States of America is part of North America.\nNorth America is in the western hemisphere of the earth.\nNew York City is a highly developed city.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "premises-FOL": "LocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))", "conclusion": "A highly developed city is located in the western hemisphere of the earth.", "conclusion-FOL": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))", "label": "True", "example_id": 376}
{"story_id": 127, "premises": "New York City is Located in the United States of America.\nThe United States of America is part of North America.\nNorth America is in the western hemisphere of the earth.\nNew York City is a highly developed city.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "premises-FOL": "LocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))", "conclusion": "The United States of America is not located in the western hemisphere of the earth.", "conclusion-FOL": "\u00acLocatedIn(unitedStatesOfAmerica, westHemisphere)", "label": "False", "example_id": 377}
{"story_id": 127, "premises": "New York City is Located in the United States of America.\nThe United States of America is part of North America.\nNorth America is in the western hemisphere of the earth.\nNew York City is a highly developed city.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "premises-FOL": "LocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))", "conclusion": "New York City is located in New York State.", "conclusion-FOL": "LocatedIn(newYorkCity, newYork)", "label": "Uncertain", "example_id": 378}
{"story_id": 146, "premises": "Catullus 4 is a poem written by the ancient Roman writer Catullus.\nCatullus 4 is a story about the retirement of a well-traveled ship.\nThere is a strong analogy of human aging in the poem Catullus 4.\nCatullus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "premises-FOL": "Poem(catullus4) \u2227 WrittenBy(catullus4, catullus) \u2227 AncientRomanWriter(catullus)\nStory(catullus4) \u2227 About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) \u2227 StrongAgingAnalogy(catullus4)\nPoem(catullus4) \u2227 WrittenIn(catullus4, iambicTrimeter) \u2227 Convey(catullus4, aSenseOfSpeedOverTheWaves)", "conclusion": "There is a poem written by an ancient Roman writer with a strong analogy of human aging.", "conclusion-FOL": "\u2203x \u2203y (Poem(x) \u2227 WrittenBy(x, y) \u2227 AncietRomanWriter(y) \u2227 StrongAgingAnalogy(x))", "label": "True", "example_id": 427}
{"story_id": 146, "premises": "Catullus 4 is a poem written by the ancient Roman writer Catullus.\nCatullus 4 is a story about the retirement of a well-traveled ship.\nThere is a strong analogy of human aging in the poem Catullus 4.\nCatullus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "premises-FOL": "Poem(catullus4) \u2227 WrittenBy(catullus4, catullus) \u2227 AncientRomanWriter(catullus)\nStory(catullus4) \u2227 About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) \u2227 StrongAgingAnalogy(catullus4)\nPoem(catullus4) \u2227 WrittenIn(catullus4, iambicTrimeter) \u2227 Convey(catullus4, aSenseOfSpeedOverTheWaves)", "conclusion": "There is a poem written by an ancient Roman writer in iambic trimeter.", "conclusion-FOL": "\u2203x \u2203y (Poem(x) \u2227 WrittenBy(x, y) \u2227 AncientRomanWriter(y) \u2227 WrittenIn(x, iambicTrimeter))", "label": "Uncertain", "example_id": 428}
{"story_id": 146, "premises": "Catullus 4 is a poem written by the ancient Roman writer Catullus.\nCatullus 4 is a story about the retirement of a well-traveled ship.\nThere is a strong analogy of human aging in the poem Catullus 4.\nCatullus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "premises-FOL": "Poem(catullus4) \u2227 WrittenBy(catullus4, catullus) \u2227 AncientRomanWriter(catullus)\nStory(catullus4) \u2227 About(catullus4, retirementOfAWellTraveledShip)\nPoem(catullus4) \u2227 StrongAgingAnalogy(catullus4)\nPoem(catullus4) \u2227 WrittenIn(catullus4, iambicTrimeter) \u2227 Convey(catullus4, aSenseOfSpeedOverTheWaves)", "conclusion": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.", "conclusion-FOL": "Poem(catullus4) \u2227 WrittenIn(catullus4, iambicTrimeter) \u2227 StrongAgingAnalogy(catullus4)", "label": "True", "example_id": 429}
{"story_id": 235, "premises": "Westworld is an American science fiction-thriller TV series.\nIn 2016, a television series named Westworld debuted on HBO.\nThe TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin killing human visitors.", "premises-FOL": "American(westworld) \u2227 ScienceFictionThriller(westworld)\nDebut(westworld, year2016) \u2227 TvSeries(westworld)\nAdapted(westworld, westworldTheFilm) \u2227 Produce(westworldTheFilm, year1973) \u2227 Wrote(michael, westworldTheFilm) \u2227 Directed(michael, westworldTheFilm)\nFilm(westworldTheFilm) \u2227 About(westworldTheFilm, malfunctioningRobots)", "conclusion": "Michael Crichton has directed a film about malfunctioning robots.", "conclusion-FOL": "\u2203x (Film(x) \u2227 Directed(michael, x) \u2227 About(x, malfunctioningRobots))", "label": "True", "example_id": 666}
{"story_id": 235, "premises": "Westworld is an American science fiction-thriller TV series.\nIn 2016, a television series named Westworld debuted on HBO.\nThe TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin killing human visitors.", "premises-FOL": "American(westworld) \u2227 ScienceFictionThriller(westworld)\nDebut(westworld, year2016) \u2227 TvSeries(westworld)\nAdapted(westworld, westworldTheFilm) \u2227 Produce(westworldTheFilm, year1973) \u2227 Wrote(michael, westworldTheFilm) \u2227 Directed(michael, westworldTheFilm)\nFilm(westworldTheFilm) \u2227 About(westworldTheFilm, malfunctioningRobots)", "conclusion": "An American TV series debuted in 2016.", "conclusion-FOL": "\u2203x (TVSeries(x) \u2227 American(x) \u2227 Debut(x, year2016))", "label": "True", "example_id": 667}
{"story_id": 231, "premises": "The 2008 Summer Olympics were held in Beijing, China.\nThe 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.\nChina won the most gold medals (48) in the 2008 Summer Olympics.\nThe United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.\nThe third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.\nIf a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals.", "premises-FOL": "HeldIn(2008SummerOlympics, beijingChina)\nSecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)\nWon(china, theMostGoldMedals)\nPlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)\nPlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)\n\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))", "conclusion": "Russia did not win fewer gold medals than China.", "conclusion-FOL": "\u00acFewerGoldMedalsThan(russia, china)", "label": "False", "example_id": 655}
{"story_id": 231, "premises": "The 2008 Summer Olympics were held in Beijing, China.\nThe 2008 Summer Olympics was the second Summer Olympic Games held in a communist state.\nChina won the most gold medals (48) in the 2008 Summer Olympics.\nThe United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.\nThe third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.\nIf a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals.", "premises-FOL": "HeldIn(2008SummerOlympics, beijingChina)\nSecondSummerOlympicsGames(2008SummerOlympics) \u2227 BeHeldIn(2008SummerOlympics, communistState)\nWon(china, theMostGoldMedals)\nPlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) \u2227 Won(unitedStates, highestNumberOfMedals)\nPlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)\n\u2200x \u2200y (Placed(x, thirdInGoldMedals) \u2227 Won(y, mostGoldMedals) \u2192 FewerGoldMedalsThan(x, y))", "conclusion": "Russia won fewer gold medals than China.", "conclusion-FOL": "FewerGoldMedalsThan(russia, china)", "label": "True", "example_id": 656}
{"story_id": 27, "premises": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\nYangshuo is not a district in Guilin. ", "premises-FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)\n\u00acDistrictIn(yangshuo, guilin)", "conclusion": "Xiangshan and Diecai are districts in the same city.", "conclusion-FOL": "\u2203x (DistrictIn(xiangshan, x) \u2227 DistrictIn(diecai, x) \u2227 City(x))", "label": "True", "example_id": 77}
{"story_id": 27, "premises": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\nYangshuo is not a district in Guilin. ", "premises-FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)\n\u00acDistrictIn(yangshuo, guilin)", "conclusion": "Xiufeng is a district in Guilin.", "conclusion-FOL": "DistrictIn(xiufeng, guilin)", "label": "True", "example_id": 78}
{"story_id": 27, "premises": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\nYangshuo is not a district in Guilin. ", "premises-FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)\n\u00acDistrictIn(yangshuo, guilin)", "conclusion": "Kowloon District is in Hong Kong.", "conclusion-FOL": "DistrictIn(kowloon, hongKong)", "label": "Uncertain", "example_id": 79}
{"story_id": 375, "premises": "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.\nAll of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.\nAll of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.\nAll of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.\nAll of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. \nPeter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both.", "premises-FOL": "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))\n\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))\n\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))", "conclusion": "Peter enjoys going out often to restaurants with friends.", "conclusion-FOL": "EnjoyGoingOutOftenTo(peter, restaurant, friend)", "label": "Uncertain", "example_id": 999}
{"story_id": 375, "premises": "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.\nAll of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.\nAll of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.\nAll of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.\nAll of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. \nPeter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both.", "premises-FOL": "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))\n\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))\n\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))", "conclusion": "Peter is a young working professional who lives in large cities.", "conclusion-FOL": "YoungWorkingProfession(peter) \u2227 LiveIn(peter, largeCity)", "label": "False", "example_id": 1000}
{"story_id": 375, "premises": "All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space.\nAll of Michael's neighbors who are young working professionals and live in large cities, do not have ample space.\nAll of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden.\nAll of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often.\nAll of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. \nPeter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both.", "premises-FOL": "\u2200x (MichaelsNeightbor(x) \u2227 GrowIn(x, vegetable, garden) \u2192 Have(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 YoungWorkingProfession(x) \u2227 LiveIn(x, largeCity) \u2192 \u00acHave(x, ampleSpace))\n\u2200x (MichaelsNeightbor(x) \u2227 OrderOften(x, takeout) \u2192 Grow(x, vegetable, garden))\n\u2200x (MichaelsNeightbor(x) \u2227 EnjoyGoingOutOftenToWith(x, restaurant, friend) \u2192 OrderOften(x, takeout))\n\u2200x (MichaelsNeightbor(x) \u2227 ToutOver(x, homecookedMeals, fastFood) \u2192 EnjoyGoingOutOftenToWith(x, restaurant, friend))\nMichaelsNeightbor(peter) \u2227 (GrowIn(peter, vegetable, garden) \u2228 ToutOver(peter, homecookedMeals, fastFood))", "conclusion": "Peter grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.", "conclusion-FOL": "GrowIn(peter, vegetable, garden) \u2228 (YoungWorkingProfession(peter) \u2227 LiveIn(peter, largeCity))", "label": "True", "example_id": 1001}
{"story_id": 62, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices belonging to employees are connected to the company's wifi. \nAll devices connected to Google Home are controlled by the managers. \nAll devices that connect to the company's wifi are easy to operate. \nModelXX belongs to employees. ", "premises-FOL": "\u2200x (OwnedBy(x, company) \u2192 ConnectedTo(x, googleHome))\n\u2200x (OwnedBy(x, employee) \u2192 ConnectedTo(x, companyWiFi))\n\u2200x (ConnectedTo(x, googleHome) \u2192 ControlledBy(x, managers))\n\u2200x (ConnectedTo(x, companyWiFi) \u2192 EasyToOperate(x))\nOwnedBy(modelXX, employee)", "conclusion": "ModelXX is easy to operate.", "conclusion-FOL": "EasyToOperate(modelXX)", "label": "True", "example_id": 183}
{"story_id": 62, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices belonging to employees are connected to the company's wifi. \nAll devices connected to Google Home are controlled by the managers. \nAll devices that connect to the company's wifi are easy to operate. \nModelXX belongs to employees. ", "premises-FOL": "\u2200x (OwnedBy(x, company) \u2192 ConnectedTo(x, googleHome))\n\u2200x (OwnedBy(x, employee) \u2192 ConnectedTo(x, companyWiFi))\n\u2200x (ConnectedTo(x, googleHome) \u2192 ControlledBy(x, managers))\n\u2200x (ConnectedTo(x, companyWiFi) \u2192 EasyToOperate(x))\nOwnedBy(modelXX, employee)", "conclusion": "ModelXX is controlled by managers.", "conclusion-FOL": "ControlledBy(modelXX, managers)", "label": "Uncertain", "example_id": 184}
{"story_id": 62, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices belonging to employees are connected to the company's wifi. \nAll devices connected to Google Home are controlled by the managers. \nAll devices that connect to the company's wifi are easy to operate. \nModelXX belongs to employees. ", "premises-FOL": "\u2200x (OwnedBy(x, company) \u2192 ConnectedTo(x, googleHome))\n\u2200x (OwnedBy(x, employee) \u2192 ConnectedTo(x, companyWiFi))\n\u2200x (ConnectedTo(x, googleHome) \u2192 ControlledBy(x, managers))\n\u2200x (ConnectedTo(x, companyWiFi) \u2192 EasyToOperate(x))\nOwnedBy(modelXX, employee)", "conclusion": "ModelXX is connected to Google Home.", "conclusion-FOL": "ConnectedTo(modelXX, googleHome)", "label": "Uncertain", "example_id": 185}
{"story_id": 407, "premises": "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.\nMusicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.\nAll touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.\nAll musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.\nAll musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.\nRyan is performing at New Haven Symphony Orchestra.\nIf Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. ", "premises-FOL": "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))\n\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))", "conclusion": "Ryan is an interesting soloist.", "conclusion-FOL": "InterestingSoloist(ryan)", "label": "Uncertain", "example_id": 1130}
{"story_id": 407, "premises": "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.\nMusicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.\nAll touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.\nAll musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.\nAll musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.\nRyan is performing at New Haven Symphony Orchestra.\nIf Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. ", "premises-FOL": "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))\n\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))", "conclusion": "Ryan is either a permanent member of an orchestra or a touring soloist musician.", "conclusion-FOL": "(PermanentMemberOf(ryan, orchestra) \u2295 TouringMusician(ryan))", "label": "True", "example_id": 1131}
{"story_id": 407, "premises": "No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra.\nMusicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra.\nAll touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra.\nAll musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists.\nAll musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences.\nRyan is performing at New Haven Symphony Orchestra.\nIf Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. ", "premises-FOL": "\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusician(x)) \u2192 \u00acPermanentMemberOf(x, theOrchestra))\n\u2200x (PerformAt(x, newHavenSymphonyOrchestra) \u2192 (PermanentMemberOf(x, theOrchestra) \u2228 HaveTemporaryRoleAt(x, theOrchestra)))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 TouringMusicians(x)) \u2192 HaveTemporaryRoleAt(x, theOrchestra))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 HaveTemporaryRoleAt(x, theOrchestra)) \u2192 InterestingSoloist(x))\n\u2200x ((PerformAt(x, newHavenSymphonyOrchestra) \u2227 InterestingSoloist(x)) \u2192 CapableOfAttractingAudiences(x))\nPerformAt(ryan, newHavenSymphonyOrchestra)\n(InterestingSoloist(ryan) \u2227 HaveTemporaryRoleAt(ryan, theOrchestra)) \u2192 \u00ac(TouringMusician(ryan) \u2295 CapableOfAttractingAudiences(ryan))", "conclusion": "Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra.", "conclusion-FOL": "(PermanentMemberOf(ryan, orchestra) \u2295 HaveTemporaryRoleAt(ryan, orchestra))", "label": "True", "example_id": 1132}
{"story_id": 482, "premises": "If someone in Potterville yells, then they are not cool.\nIf someone in Potterville is angry, then they yell.\nIf someone in Potterville flies, then they are cool.\nEvery person in Potterville that knows magic flies.\nAll wizards in Potterville know magic.\nHarry, who lives in Potterville either yells or flies. \nPotter, who lives in Potterville, is a wizard and flies.", "premises-FOL": "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))\n\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))\n\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))\n\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))\n\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))\nIn(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))\nWizard(potter) \u2227 Fly(potter)", "conclusion": "Harry is cool.", "conclusion-FOL": "Cool(harry)", "label": "Uncertain", "example_id": 1406}
{"story_id": 482, "premises": "If someone in Potterville yells, then they are not cool.\nIf someone in Potterville is angry, then they yell.\nIf someone in Potterville flies, then they are cool.\nEvery person in Potterville that knows magic flies.\nAll wizards in Potterville know magic.\nHarry, who lives in Potterville either yells or flies. \nPotter, who lives in Potterville, is a wizard and flies.", "premises-FOL": "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))\n\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))\n\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))\n\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))\n\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))\nIn(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))\nWizard(potter) \u2227 Fly(potter)", "conclusion": "Harry is not cool.", "conclusion-FOL": "\u00acCool(harry)", "label": "Uncertain", "example_id": 1407}
{"story_id": 482, "premises": "If someone in Potterville yells, then they are not cool.\nIf someone in Potterville is angry, then they yell.\nIf someone in Potterville flies, then they are cool.\nEvery person in Potterville that knows magic flies.\nAll wizards in Potterville know magic.\nHarry, who lives in Potterville either yells or flies. \nPotter, who lives in Potterville, is a wizard and flies.", "premises-FOL": "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))\n\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))\n\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))\n\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))\n\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))\nIn(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))\nWizard(potter) \u2227 Fly(potter)", "conclusion": "Harry is a wizard or angry.", "conclusion-FOL": "Wizard(harry) \u2228 Angry(harry)", "label": "False", "example_id": 1408}
{"story_id": 482, "premises": "If someone in Potterville yells, then they are not cool.\nIf someone in Potterville is angry, then they yell.\nIf someone in Potterville flies, then they are cool.\nEvery person in Potterville that knows magic flies.\nAll wizards in Potterville know magic.\nHarry, who lives in Potterville either yells or flies. \nPotter, who lives in Potterville, is a wizard and flies.", "premises-FOL": "\u2200x (In(x, potterville) \u2227 Yell(x) \u2192 \u00acCool(x))\n\u2200x (In(x, potterville) \u2227 Angry(x) \u2192 Yell(x))\n\u2200x (In(x, potterville) \u2227 Fly(x) \u2192 Cool(x))\n\u2200x (In(x, potterville) \u2227 Know(x, magic) \u2192 Fly(x))\n\u2200x (In(x, potterville) \u2227 Wizard(x) \u2192 Know(x, magic))\nIn(harry, potterville) \u2227 (Yell(harry) \u2295 Fly(harry))\nWizard(potter) \u2227 Fly(potter)", "conclusion": "Harry is neither a wizard nor angry.", "conclusion-FOL": "\u00acWizard(harry) \u2227 \u00acAngry(harry)", "label": "True", "example_id": 1409}
{"story_id": 436, "premises": "All of this brand's products are either produced in China or in the US. \nAll of this brand's products produced in China are labeled. \nAll of this brand's products produced in the US are sold in the US. \nThe products of this brand that are labeled are cheaper.\nAll of this brand's products sold in the US are sold at Walmart. \nAll products of this brand displayed on the homepage are sold at Walmart. \nNone of this brand's products that are returned by customers are sold at Walmart. \nG-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper.", "premises-FOL": "\u2200x (ThisBrand(x) \u2227 Product(x) \u2192 (ProducedIn(x, china) \u2295 ProducedIn(x, uS)))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, china)) \u2192 Labeled(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, us)) \u2192 SoldIn(x, us))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 Labeled(x)) \u2192 Cheaper(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 SoldIn(x, us)) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 DisplayedIn(x, homepage) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 ReturnedBy(x, customer) \u2192 \u00acSoldIn(x, walmart))\nProduct(g910) \u2227 ThisBrand(g910) \u2227 (\u00ac(DisplayedIn(g910, homepage) \u2295 Cheaper(g910)))", "conclusion": "G-910 is displayed on the homepage.", "conclusion-FOL": "DisplayedIn(g910, homepage)", "label": "Uncertain", "example_id": 1248}
{"story_id": 436, "premises": "All of this brand's products are either produced in China or in the US. \nAll of this brand's products produced in China are labeled. \nAll of this brand's products produced in the US are sold in the US. \nThe products of this brand that are labeled are cheaper.\nAll of this brand's products sold in the US are sold at Walmart. \nAll products of this brand displayed on the homepage are sold at Walmart. \nNone of this brand's products that are returned by customers are sold at Walmart. \nG-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper.", "premises-FOL": "\u2200x (ThisBrand(x) \u2227 Product(x) \u2192 (ProducedIn(x, china) \u2295 ProducedIn(x, uS)))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, china)) \u2192 Labeled(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, us)) \u2192 SoldIn(x, us))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 Labeled(x)) \u2192 Cheaper(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 SoldIn(x, us)) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 DisplayedIn(x, homepage) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 ReturnedBy(x, customer) \u2192 \u00acSoldIn(x, walmart))\nProduct(g910) \u2227 ThisBrand(g910) \u2227 (\u00ac(DisplayedIn(g910, homepage) \u2295 Cheaper(g910)))", "conclusion": "G-910 is not displayed on the homepage.", "conclusion-FOL": "\u00acDisplayedIn(g910, homepage)", "label": "Uncertain", "example_id": 1249}
{"story_id": 436, "premises": "All of this brand's products are either produced in China or in the US. \nAll of this brand's products produced in China are labeled. \nAll of this brand's products produced in the US are sold in the US. \nThe products of this brand that are labeled are cheaper.\nAll of this brand's products sold in the US are sold at Walmart. \nAll products of this brand displayed on the homepage are sold at Walmart. \nNone of this brand's products that are returned by customers are sold at Walmart. \nG-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper.", "premises-FOL": "\u2200x (ThisBrand(x) \u2227 Product(x) \u2192 (ProducedIn(x, china) \u2295 ProducedIn(x, uS)))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, china)) \u2192 Labeled(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, us)) \u2192 SoldIn(x, us))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 Labeled(x)) \u2192 Cheaper(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 SoldIn(x, us)) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 DisplayedIn(x, homepage) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 ReturnedBy(x, customer) \u2192 \u00acSoldIn(x, walmart))\nProduct(g910) \u2227 ThisBrand(g910) \u2227 (\u00ac(DisplayedIn(g910, homepage) \u2295 Cheaper(g910)))", "conclusion": "G-910 is a product returned by customers.", "conclusion-FOL": "ThisBrand(g910) \u2227 ReturnedBy(g910, customer)", "label": "False", "example_id": 1250}
{"story_id": 436, "premises": "All of this brand's products are either produced in China or in the US. \nAll of this brand's products produced in China are labeled. \nAll of this brand's products produced in the US are sold in the US. \nThe products of this brand that are labeled are cheaper.\nAll of this brand's products sold in the US are sold at Walmart. \nAll products of this brand displayed on the homepage are sold at Walmart. \nNone of this brand's products that are returned by customers are sold at Walmart. \nG-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper.", "premises-FOL": "\u2200x (ThisBrand(x) \u2227 Product(x) \u2192 (ProducedIn(x, china) \u2295 ProducedIn(x, uS)))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, china)) \u2192 Labeled(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, us)) \u2192 SoldIn(x, us))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 Labeled(x)) \u2192 Cheaper(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 SoldIn(x, us)) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 DisplayedIn(x, homepage) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 ReturnedBy(x, customer) \u2192 \u00acSoldIn(x, walmart))\nProduct(g910) \u2227 ThisBrand(g910) \u2227 (\u00ac(DisplayedIn(g910, homepage) \u2295 Cheaper(g910)))", "conclusion": "G-910 is a product returned by customers or sold in Walmart.", "conclusion-FOL": "ThisBrand(g910) \u2227 (ReturnedBy(g910, customer) \u2228 SoldIn(g910, walmart))", "label": "True", "example_id": 1251}
{"story_id": 436, "premises": "All of this brand's products are either produced in China or in the US. \nAll of this brand's products produced in China are labeled. \nAll of this brand's products produced in the US are sold in the US. \nThe products of this brand that are labeled are cheaper.\nAll of this brand's products sold in the US are sold at Walmart. \nAll products of this brand displayed on the homepage are sold at Walmart. \nNone of this brand's products that are returned by customers are sold at Walmart. \nG-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper.", "premises-FOL": "\u2200x (ThisBrand(x) \u2227 Product(x) \u2192 (ProducedIn(x, china) \u2295 ProducedIn(x, uS)))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, china)) \u2192 Labeled(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 ProducedIn(x, us)) \u2192 SoldIn(x, us))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 Labeled(x)) \u2192 Cheaper(x))\n\u2200x ((ThisBrand(x) \u2227 Product(x) \u2227 SoldIn(x, us)) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 DisplayedIn(x, homepage) \u2192 SoldIn(x, walmart))\n\u2200x (ThisBrand(x) \u2227 Product(x) \u2227 ReturnedBy(x, customer) \u2192 \u00acSoldIn(x, walmart))\nProduct(g910) \u2227 ThisBrand(g910) \u2227 (\u00ac(DisplayedIn(g910, homepage) \u2295 Cheaper(g910)))", "conclusion": "G-910 is either returned by customers or sold in Walmart.", "conclusion-FOL": "ReturnedBy(g910, customer) \u2295 SoldIn(g910, walmart)", "label": "True", "example_id": 1252}
{"story_id": 354, "premises": "People either believe in Santa Claus, or think he is made up.\nPeople who believe in Santa Claus expect to get presents on Christmas morning.\nPeople who think Santa Claus is made up, then they would be surprised to see him in their house.\nPeople who expect presents on Christmas morning are excited for it to be Christmas.\nIf people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.\nMercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus.", "premises-FOL": "\u2200x (BelieveIn(x, santaClaus) \u2295 ThinkMadeUp(x, santaClaus))\n\u2200x (BelieveIn(x, santaClaus) \u2192 Expect(x, present, christmasMorning))\n\u2200x (ThinkMadeUp(x, santaClaus) \u2192 WouldBeSurprisedToSeeIn(x, santaClaus, house))\n\u2200x (Expect(x, present, christmasMorning) \u2192 ExcitedFor(x, christmas))\n\u2200x (WouldBeSurprisedToSeeIn(x, santaClaus, house) \u2192 \u00acLeaveOut(x, cookies))\n\u00ac(Expect(marcy, present, christmasMorning) \u2227 ExcitedFor(marcy, christmas) \u2227 BelieveIn(marcy, santaClaus))", "conclusion": "Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve.", "conclusion-FOL": "BelieveIn(marcy, santaClaus) \u2295 LeaveOut(marcy, cookies)", "label": "True", "example_id": 939}
{"story_id": 354, "premises": "People either believe in Santa Claus, or think he is made up.\nPeople who believe in Santa Claus expect to get presents on Christmas morning.\nPeople who think Santa Claus is made up, then they would be surprised to see him in their house.\nPeople who expect presents on Christmas morning are excited for it to be Christmas.\nIf people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve.\nMercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus.", "premises-FOL": "\u2200x (BelieveIn(x, santaClaus) \u2295 ThinkMadeUp(x, santaClaus))\n\u2200x (BelieveIn(x, santaClaus) \u2192 Expect(x, present, christmasMorning))\n\u2200x (ThinkMadeUp(x, santaClaus) \u2192 WouldBeSurprisedToSeeIn(x, santaClaus, house))\n\u2200x (Expect(x, present, christmasMorning) \u2192 ExcitedFor(x, christmas))\n\u2200x (WouldBeSurprisedToSeeIn(x, santaClaus, house) \u2192 \u00acLeaveOut(x, cookies))\n\u00ac(Expect(marcy, present, christmasMorning) \u2227 ExcitedFor(marcy, christmas) \u2227 BelieveIn(marcy, santaClaus))", "conclusion": "Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus.", "conclusion-FOL": "\u00ac(LeaveOut(marcy, cookies) \u2227 ThinkMadeUp(marcy, santaClaus)) \u2228 BelieveIn(marcy, santaClaus)", "label": "False", "example_id": 940}
{"story_id": 172, "premises": "Indonesia is a country.\nIn Indonesia, the prosecutor only personally investigates cases of some special crimes.\nCorruption is a type of crime.\nOnce the police complete crime investigations, the evidence is handed to the prosecutor. \nEvidence can be either satisfactory or unsatisfactory.\nIf the evidence is handed to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "premises-FOL": "Country(indonesia)\n\u2200x \u2203y (In(indonesia) \u2227 Prosecutor(x) \u2227 SpecialCrime(y) \u2192 InvestigatePersonally(x, y))\nCrime(corruption)\n\u2200x \u2200y \u2200z (Crime(y) \u2227 PoliceCompleteInvestigation(y) \u2227 Prosecutor(x) \u2192 Evidence(z) \u2227 HandedTo(z, x))\n\u2200x (Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))\n\u2200x \u2200y (Evidence(y) \u2227 Prosecutor(x) \u2227 HandedTo(x) \u2227 Satisfactory(y) \u2192 ProsecuteInAppropriateCourt(x, theOffender))", "conclusion": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.", "conclusion-FOL": "\u2200x \u2200y (Crime(y) \u2227 PoliceCompleteInvestigation(y) \u2227 Prosecutor(x) \u2192 ProsecuteInAppropriateCourt(x, theOffender))", "label": "Uncertain", "example_id": 494}
{"story_id": 172, "premises": "Indonesia is a country.\nIn Indonesia, the prosecutor only personally investigates cases of some special crimes.\nCorruption is a type of crime.\nOnce the police complete crime investigations, the evidence is handed to the prosecutor. \nEvidence can be either satisfactory or unsatisfactory.\nIf the evidence is handed to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "premises-FOL": "Country(indonesia)\n\u2200x \u2203y (In(indonesia) \u2227 Prosecutor(x) \u2227 SpecialCrime(y) \u2192 InvestigatePersonally(x, y))\nCrime(corruption)\n\u2200x \u2200y \u2200z (Crime(y) \u2227 PoliceCompleteInvestigation(y) \u2227 Prosecutor(x) \u2192 Evidence(z) \u2227 HandedTo(z, x))\n\u2200x (Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))\n\u2200x \u2200y (Evidence(y) \u2227 Prosecutor(x) \u2227 HandedTo(x) \u2227 Satisfactory(y) \u2192 ProsecuteInAppropriateCourt(x, theOffender))", "conclusion": "In Indonesia, the prosecutor personally investigates cases of corruption.", "conclusion-FOL": "\u2200x (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(corruption) \u2192 InvestigatePersonally(x, corruption))", "label": "Uncertain", "example_id": 495}
{"story_id": 172, "premises": "Indonesia is a country.\nIn Indonesia, the prosecutor only personally investigates cases of some special crimes.\nCorruption is a type of crime.\nOnce the police complete crime investigations, the evidence is handed to the prosecutor. \nEvidence can be either satisfactory or unsatisfactory.\nIf the evidence is handed to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "premises-FOL": "Country(indonesia)\n\u2200x \u2203y (In(indonesia) \u2227 Prosecutor(x) \u2227 SpecialCrime(y) \u2192 InvestigatePersonally(x, y))\nCrime(corruption)\n\u2200x \u2200y \u2200z (Crime(y) \u2227 PoliceCompleteInvestigation(y) \u2227 Prosecutor(x) \u2192 Evidence(z) \u2227 HandedTo(z, x))\n\u2200x (Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))\n\u2200x \u2200y (Evidence(y) \u2227 Prosecutor(x) \u2227 HandedTo(x) \u2227 Satisfactory(y) \u2192 ProsecuteInAppropriateCourt(x, theOffender))", "conclusion": "When the police complete investigations, the prosecutor investigates personally.", "conclusion-FOL": "\u2200x \u2200y (Crime(y) \u2227 PoliceCompleteInvestigation(y) \u2227 Prosecutor(x) \u2192 InvestigatePersonally(x, y))", "label": "Uncertain", "example_id": 496}
{"story_id": 341, "premises": "No battery-powered watch is automatic.\nAll digital watches are battery-powered.\nSome mechanical watches are automatic.\nAll smart watches are digital.\nMoonwatch is either a digital watch and an automatic, or it is neither.", "premises-FOL": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))\n\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))\n\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))\n\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))\n\u00ac(DigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch))", "conclusion": "Moonwatch is a mechanical watch.", "conclusion-FOL": "MechanicalWatch(moonWatch)", "label": "Uncertain", "example_id": 896}
{"story_id": 341, "premises": "No battery-powered watch is automatic.\nAll digital watches are battery-powered.\nSome mechanical watches are automatic.\nAll smart watches are digital.\nMoonwatch is either a digital watch and an automatic, or it is neither.", "premises-FOL": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))\n\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))\n\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))\n\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))\n\u00ac(DigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch))", "conclusion": "Moonwatch is a smartwatch and a mechanical watch.", "conclusion-FOL": "SmartWatch(moonwatch) \u2227 MechanicalWatch(moonwatch)", "label": "False", "example_id": 897}
{"story_id": 341, "premises": "No battery-powered watch is automatic.\nAll digital watches are battery-powered.\nSome mechanical watches are automatic.\nAll smart watches are digital.\nMoonwatch is either a digital watch and an automatic, or it is neither.", "premises-FOL": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))\n\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))\n\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))\n\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))\n\u00ac(DigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch))", "conclusion": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.", "conclusion-FOL": "SmartWatch(moonwatch) \u2227 MechanicalWatch(moonwatch) \u2192 \u00acMechanicalWatch(moonwatch)", "label": "True", "example_id": 898}
{"story_id": 341, "premises": "No battery-powered watch is automatic.\nAll digital watches are battery-powered.\nSome mechanical watches are automatic.\nAll smart watches are digital.\nMoonwatch is either a digital watch and an automatic, or it is neither.", "premises-FOL": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))\n\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))\n\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))\n\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))\n\u00ac(DigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch))", "conclusion": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.", "conclusion-FOL": "MechanicalWatch(moonwatch)) \u2228 BatteryPoweredWatch(moonwatch) \u2192 \u00acSmartWatch(moonwatch)", "label": "True", "example_id": 899}
{"story_id": 243, "premises": "If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking.\nPeople who have a talent of cooking can distinguish the taste of different condiments.\nOnly people with the talent of cooking can make delicious meals.\nIf the meal is popular at the party, then it is delicious.\nJohn can make meals which are popular at the party.", "premises-FOL": "\u2200x (Person(x) \u2227 Can(x, distinguishTheTasteOfDifferentCondiments) \u2192 Can(x, useDifferentCondimentsToCook))\n\u2200x (Person(x) \u2227 Has(x, talentOfCooking) \u2192 Can(x, distinguishTheTasteOfDifferentCondiments))\n\u2200x \u2200y (CanMake(x, y) \u2227 Meal(y) \u2227 Delicious(y) \u2227 Person(x) \u2192 Has(x, talentOfCooking)) \n\u2200x \u2200y (Meal(y) \u2227 PopularAt(y, party) \u2192 Delicious(y))\n\u2203x (Person(john) \u2227 MakeMeal(john, x) \u2227 Meal(x) \u2227 PopularAt(x, party))", "conclusion": "John cannot use different condiments for cooking.", "conclusion-FOL": "\u00acCan(john, useDifferentCondimentsToCook)", "label": "False", "example_id": 686}
{"story_id": 252, "premises": "For a country, if effective monetary policy is possible, it must have successful inflation control and a strong national currency.\nA country cannot simultaneously regulate the exchange rate and successfully control inflation.\nThe introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.\nIf exports fall sharply, this country's national currency cannot be strong.\nInflation control is required to have a strong national currency. \nThere is an embargo on Russian foreign trade goods.", "premises-FOL": "\u2200x (Country(x) \u2227 PossibleEffectiveMonetaryPolicy(x) \u2192 SuccessfulInflationControl(x) \u2227 StongNationalCurrency(x))\n\u00ac(\u2203x (Country(x) \u2227 SuccessfulInflationControl(x) \u2227 RegulateExchangeRate(x)))\n\u2200x (IntroductionOfOn(x, embargo, foreightTradeGoods) \u2192 SharpDecreasesInExport(x))\n\u2200x (SharpDecreasesInExport(x) \u2192 \u00acStongNationalCurrency(x))\n\u2200x (InflationControl(x) \u2192 StongNationalCurrency(x))\nIntroductionOfOn(russia, embargo, foreightTradeGoods)", "conclusion": "In Russia, an effective monetary policy is possible.", "conclusion-FOL": "PossibleEffectiveMonetaryPolicy(russia)", "label": "False", "example_id": 696}
{"story_id": 143, "premises": "Video Gag is a French television series that airs weekly.\nVideo Gag airs on the French broadcast channel TF1. \nIf viewers send funny videos to the French broadcast channel TF1, then Video Gag airs them weekly.\nAll videos aired on Video Gag are in French.", "premises-FOL": "FrenchTelevision(videoGag) \u2227 AirWeekly(videoGag)\nAirOn(videoGag, frenchBroadcastChannelTF1)\n\u2200x (Funny(x) \u2227 Video(x) \u2227 SendIn(viewers, x, frenchBroadcastChannelTF1)  \u2192 AirWeekly(x) ) \u2227 AirOn(videoGag, x))\n\u2200x (Video(x) \u2227 AirOn(videoGag, x) \u2192 In(x, french))", "conclusion": "Viewers send funny videos to the French broadcast channel TF1 that are in French.", "conclusion-FOL": "\u2203x (SendIn(viewers, x, frenchBroadcastChannelTF1) \u2227 French(x))", "label": "Uncertain", "example_id": 419}
{"story_id": 143, "premises": "Video Gag is a French television series that airs weekly.\nVideo Gag airs on the French broadcast channel TF1. \nIf viewers send funny videos to the French broadcast channel TF1, then Video Gag airs them weekly.\nAll videos aired on Video Gag are in French.", "premises-FOL": "FrenchTelevision(videoGag) \u2227 AirWeekly(videoGag)\nAirOn(videoGag, frenchBroadcastChannelTF1)\n\u2200x (Funny(x) \u2227 Video(x) \u2227 SendIn(viewers, x, frenchBroadcastChannelTF1)  \u2192 AirWeekly(x) ) \u2227 AirOn(videoGag, x))\n\u2200x (Video(x) \u2227 AirOn(videoGag, x) \u2192 In(x, french))", "conclusion": "Viewers send funny videos to the French broadcast channel that are in English.", "conclusion-FOL": "\u2203x (SendIn(viewers, x, frenchBroadcastChannelTF1) \u2227 English(x))", "label": "Uncertain", "example_id": 420}
{"story_id": 476, "premises": "All phones are things.\nAll cell phones are phones. \nAll iPhones are cell phones. \nAll employees are wage earners.\nAll wage earners are human. \nJack is either an employee or a wage earner.\nJack is either a human or a phone.", "premises-FOL": "\u2200x (Phone(x) \u2192 Thing(x))\n\u2200x (Cellphone(x) \u2192 Phone(x))\n\u2200x (Iphone(x) \u2192 Cellphone(x))\n\u2200x (Employee(x) \u2192 WageEarner(x))\n\u2200x (WageEarner(x) \u2192 Human(x))\nEmployee(jack) \u2295 WageEarner(jack) \nHuman(jack) \u2295 Phone(jack)", "conclusion": "Jack is a thing.", "conclusion-FOL": "Thing(jack)", "label": "Uncertain", "example_id": 1381}
{"story_id": 476, "premises": "All phones are things.\nAll cell phones are phones. \nAll iPhones are cell phones. \nAll employees are wage earners.\nAll wage earners are human. \nJack is either an employee or a wage earner.\nJack is either a human or a phone.", "premises-FOL": "\u2200x (Phone(x) \u2192 Thing(x))\n\u2200x (Cellphone(x) \u2192 Phone(x))\n\u2200x (Iphone(x) \u2192 Cellphone(x))\n\u2200x (Employee(x) \u2192 WageEarner(x))\n\u2200x (WageEarner(x) \u2192 Human(x))\nEmployee(jack) \u2295 WageEarner(jack) \nHuman(jack) \u2295 Phone(jack)", "conclusion": "Jack is not a thing.", "conclusion-FOL": "\u00acThing(jack)", "label": "Uncertain", "example_id": 1382}
{"story_id": 476, "premises": "All phones are things.\nAll cell phones are phones. \nAll iPhones are cell phones. \nAll employees are wage earners.\nAll wage earners are human. \nJack is either an employee or a wage earner.\nJack is either a human or a phone.", "premises-FOL": "\u2200x (Phone(x) \u2192 Thing(x))\n\u2200x (Cellphone(x) \u2192 Phone(x))\n\u2200x (Iphone(x) \u2192 Cellphone(x))\n\u2200x (Employee(x) \u2192 WageEarner(x))\n\u2200x (WageEarner(x) \u2192 Human(x))\nEmployee(jack) \u2295 WageEarner(jack) \nHuman(jack) \u2295 Phone(jack)", "conclusion": "Jack is a thing and an iPhone.", "conclusion-FOL": "Thing(jack) \u2227 Iphone(jack)", "label": "False", "example_id": 1383}
{"story_id": 476, "premises": "All phones are things.\nAll cell phones are phones. \nAll iPhones are cell phones. \nAll employees are wage earners.\nAll wage earners are human. \nJack is either an employee or a wage earner.\nJack is either a human or a phone.", "premises-FOL": "\u2200x (Phone(x) \u2192 Thing(x))\n\u2200x (Cellphone(x) \u2192 Phone(x))\n\u2200x (Iphone(x) \u2192 Cellphone(x))\n\u2200x (Employee(x) \u2192 WageEarner(x))\n\u2200x (WageEarner(x) \u2192 Human(x))\nEmployee(jack) \u2295 WageEarner(jack) \nHuman(jack) \u2295 Phone(jack)", "conclusion": "Jack is not both a thing and an iPhone.", "conclusion-FOL": "\u00ac(Thing(jack) \u2227 Iphone(jack))", "label": "True", "example_id": 1384}
{"story_id": 289, "premises": "All iPhones are electronic.\nSome phones are iPhones.", "premises-FOL": "\u2200x (IPhone(x) \u2192 Electronic(x))\n\u2203x \u2203y (Phone(x) \u2227 Phone(y) \u2227 IPhone(x) \u2227 IPhone(y) \u2227 \u00ac(x=y))", "conclusion": "No phones are electronic.", "conclusion-FOL": "\u2200x (Phone(x) \u2192 \u00acElectronic(x))", "label": "False", "example_id": 733}
{"story_id": 38, "premises": "The Metropolitan Museum of Art is a museum in NYC.\nWhitney Museum of American Art is a museum in NYC.\nThe Museum of Modern Art (MoMA) is a museum in NYC. \nThe Metropolitan Museum of Art includes Byzantine and Islamic Art. \nWhitney Museum of American Art includes American art.", "premises-FOL": "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)", "conclusion": "A museum in NYC includes Byzantine and Islamic Art.", "conclusion-FOL": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, byzantineArt) \u2227 Include(x, islamicArt))", "label": "True", "example_id": 110}
{"story_id": 38, "premises": "The Metropolitan Museum of Art is a museum in NYC.\nWhitney Museum of American Art is a museum in NYC.\nThe Museum of Modern Art (MoMA) is a museum in NYC. \nThe Metropolitan Museum of Art includes Byzantine and Islamic Art. \nWhitney Museum of American Art includes American art.", "premises-FOL": "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)", "conclusion": "A museum in NYC includes American art.", "conclusion-FOL": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, americanArt))", "label": "True", "example_id": 111}
{"story_id": 38, "premises": "The Metropolitan Museum of Art is a museum in NYC.\nWhitney Museum of American Art is a museum in NYC.\nThe Museum of Modern Art (MoMA) is a museum in NYC. \nThe Metropolitan Museum of Art includes Byzantine and Islamic Art. \nWhitney Museum of American Art includes American art.", "premises-FOL": "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)", "conclusion": "A museum in NYC includes Greek art.", "conclusion-FOL": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, greekArt))", "label": "Uncertain", "example_id": 112}
{"story_id": 403, "premises": "There's a person in Benji's family who likes eating cheese or is a francophile.\nThere is no francophile in Benji's family whose favorite country is Spain.\nThere is a person in Benji's family who likes eating cheese or whose favorite country is Spain.\nFabien is in Benji's family and  does not both study Spanish and also like eating cheese.\nFabien studies Spanish.", "premises-FOL": "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))\n\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))\n\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))\nInBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))\nStudy(fabien, spanish)", "conclusion": "Fabien is a person who likes eating cheese.", "conclusion-FOL": "LikeEating(fabien, cheese)", "label": "Uncertain", "example_id": 1117}
{"story_id": 403, "premises": "There's a person in Benji's family who likes eating cheese or is a francophile.\nThere is no francophile in Benji's family whose favorite country is Spain.\nThere is a person in Benji's family who likes eating cheese or whose favorite country is Spain.\nFabien is in Benji's family and  does not both study Spanish and also like eating cheese.\nFabien studies Spanish.", "premises-FOL": "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))\n\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))\n\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))\nInBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))\nStudy(fabien, spanish)", "conclusion": "If Fabien is either a person who likes eating cheese or a francophile, then Fabien is neither a person who studies Spanish nor a person who is a francophile.", "conclusion-FOL": "(LikeEating(fabien, cheese) \u2295 Francophile(fabien)) \u2192 (\u00ac(Study(fabien, spanish) \u2228 Francophile(fabien)))", "label": "True", "example_id": 1118}
{"story_id": 403, "premises": "There's a person in Benji's family who likes eating cheese or is a francophile.\nThere is no francophile in Benji's family whose favorite country is Spain.\nThere is a person in Benji's family who likes eating cheese or whose favorite country is Spain.\nFabien is in Benji's family and  does not both study Spanish and also like eating cheese.\nFabien studies Spanish.", "premises-FOL": "\u2203x (InBenjiSFamily(x) \u2192 (LikeEating(x, cheese) \u2228 Francophile(x)))\n\u2200x ((InBenjiSFamily(x) \u2227 Francophile(x)) \u2192 \u00acFavor(x, spain))\n\u2203x (InBenjiSFamily(x) \u2227 (Favor(x, spain) \u2228 LikeEating(x, cheese)))\nInBenjiSFamily(fabien) \u2227 (\u00ac(LikeEating(fabien, cheese) \u2227 Study(fabien, spanish)))\nStudy(fabien, spanish)", "conclusion": "If Fabien is a person who likes Spain as their favorite country or is a francophile, then Fabien is either a person who studies Spanish or a person who likes Spain as their favorite country.", "conclusion-FOL": "(Favor(fabien, spain) \u2228 Francophile(fabien)) \u2192 (Study(fabien, spanish) \u2295 Favor(fabien, spain))", "label": "False", "example_id": 1119}
{"story_id": 29, "premises": "Gasteren is a village located in the province of Drenthe.\nDrenthe is a Dutch province. \nNo cities are villages.\nThe population of a village in Drenthe was 155 people.", "premises-FOL": "Village(gasteren) \u2227 Province(drenthe) \u2227 In(gasteren, drenthe)\nProvince(drenthe) \u2227 In(drenthe, netherlands)\n\u2200x (City(x) \u2192 \u00acVillage(x))\n\u2203x (Population(x, num155) \u2227 Village(x) \u2227 In(x, drenthe))", "conclusion": "Gasteren is a Dutch village.", "conclusion-FOL": "Village(gasteren) \u2227 In(gasteren, netherlands)", "label": "Uncertain", "example_id": 83}
{"story_id": 29, "premises": "Gasteren is a village located in the province of Drenthe.\nDrenthe is a Dutch province. \nNo cities are villages.\nThe population of a village in Drenthe was 155 people.", "premises-FOL": "Village(gasteren) \u2227 Province(drenthe) \u2227 In(gasteren, drenthe)\nProvince(drenthe) \u2227 In(drenthe, netherlands)\n\u2200x (City(x) \u2192 \u00acVillage(x))\n\u2203x (Population(x, num155) \u2227 Village(x) \u2227 In(x, drenthe))", "conclusion": "Gasteren is a city.", "conclusion-FOL": "City(gasteren)", "label": "False", "example_id": 84}
{"story_id": 29, "premises": "Gasteren is a village located in the province of Drenthe.\nDrenthe is a Dutch province. \nNo cities are villages.\nThe population of a village in Drenthe was 155 people.", "premises-FOL": "Village(gasteren) \u2227 Province(drenthe) \u2227 In(gasteren, drenthe)\nProvince(drenthe) \u2227 In(drenthe, netherlands)\n\u2200x (City(x) \u2192 \u00acVillage(x))\n\u2203x (Population(x, num155) \u2227 Village(x) \u2227 In(x, drenthe))", "conclusion": "Gasteren has a population of 155.", "conclusion-FOL": "Population(gasteren, num155)", "label": "Uncertain", "example_id": 85}
{"story_id": 210, "premises": "The only types of mammals that lay eggs are either platypuses or echidnas.\nPlatypuses are not hyrax.\nEchidnas are not hyrax.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nMammals are animals.\nHyraxes are mammals.\nGrebes lay eggs.\nGrebes are not platypuses and also not echidnas.", "premises-FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))\n\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))\n\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))\n\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))\n\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2200x (Hyrax(x) \u2192 Mammal(x))\n\u2200x (Grebes(x) \u2192 LayEgg(x))\n\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "conclusion": "Hyraxes lay eggs.", "conclusion-FOL": "\u2203x (Hyrax(x) \u2227 LayEgg(x))", "label": "False", "example_id": 599}
{"story_id": 210, "premises": "The only types of mammals that lay eggs are either platypuses or echidnas.\nPlatypuses are not hyrax.\nEchidnas are not hyrax.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nMammals are animals.\nHyraxes are mammals.\nGrebes lay eggs.\nGrebes are not platypuses and also not echidnas.", "premises-FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))\n\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))\n\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))\n\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))\n\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2200x (Hyrax(x) \u2192 Mammal(x))\n\u2200x (Grebes(x) \u2192 LayEgg(x))\n\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "conclusion": "Grebes are not mammals.", "conclusion-FOL": "\u2200x (Grebes(x) \u2192 \u00acMammal(x))", "label": "True", "example_id": 600}
{"story_id": 210, "premises": "The only types of mammals that lay eggs are either platypuses or echidnas.\nPlatypuses are not hyrax.\nEchidnas are not hyrax.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nMammals are animals.\nHyraxes are mammals.\nGrebes lay eggs.\nGrebes are not platypuses and also not echidnas.", "premises-FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))\n\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))\n\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))\n\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))\n\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2200x (Hyrax(x) \u2192 Mammal(x))\n\u2200x (Grebes(x) \u2192 LayEgg(x))\n\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "conclusion": "Platypuses are vertebrates.", "conclusion-FOL": "\u2200x (Platypuses(x) \u2192 Vertebrate(x))", "label": "Uncertain", "example_id": 601}
{"story_id": 89, "premises": "Bobby Flynn is a singer-songwriter. \nBobby Flynn finished 7th while competing on Australian Idol.\nAustralian Idol competitors are Australian citizens.\nThe Omega Three band made a nationwide tour in 2007.\nBobby Flynn is a member of The Omega Three band.\nBobby Flynn was born in Queensland.", "premises-FOL": "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) \u2227 CompetesOnAustralianIdol(bobbyFlynn)\n\u2200x (CompetesOnAustralianIdol(x) \u2192 AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)", "conclusion": "Bobby Flynn is an Australian citizen.", "conclusion-FOL": "AustralianCitizen(bobbyFlynn)", "label": "True", "example_id": 270}
{"story_id": 89, "premises": "Bobby Flynn is a singer-songwriter. \nBobby Flynn finished 7th while competing on Australian Idol.\nAustralian Idol competitors are Australian citizens.\nThe Omega Three band made a nationwide tour in 2007.\nBobby Flynn is a member of The Omega Three band.\nBobby Flynn was born in Queensland.", "premises-FOL": "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) \u2227 CompetesOnAustralianIdol(bobbyFlynn)\n\u2200x (CompetesOnAustralianIdol(x) \u2192 AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)", "conclusion": "Bobby Flynn flew to America in 2007.", "conclusion-FOL": "FlewToIn(bobbyFlynn, america, year2007)", "label": "Uncertain", "example_id": 271}
{"story_id": 89, "premises": "Bobby Flynn is a singer-songwriter. \nBobby Flynn finished 7th while competing on Australian Idol.\nAustralian Idol competitors are Australian citizens.\nThe Omega Three band made a nationwide tour in 2007.\nBobby Flynn is a member of The Omega Three band.\nBobby Flynn was born in Queensland.", "premises-FOL": "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)\nFinishesIn(bobbyFlynn, number7) \u2227 CompetesOnAustralianIdol(bobbyFlynn)\n\u2200x (CompetesOnAustralianIdol(x) \u2192 AustralianCitizen(x))\nNationWideTourIn(theOmegaThreeBand, year2007) \nMember(bobbyFlynn, theOmegaThreeBand)\nBornIn(bobbyFlynn, queensland)", "conclusion": "Bobby Flynn was born in Queens.", "conclusion-FOL": "BornIn(bobbyFlynn, queens)", "label": "Uncertain", "example_id": 272}
{"story_id": 269, "premises": "All proteins are organic compounds.\nAll enzymes are organic compounds.", "premises-FOL": "\u2200x (Protein(x) \u2192 OrganicCompound(x))\n\u2200x (Enzyme(x) \u2192 OrganicCompound(x))", "conclusion": "All enzymes are proteins.", "conclusion-FOL": "\u2200x (Enzyme(x) \u2192 Protein(x))", "label": "Uncertain", "example_id": 713}
{"story_id": 98, "premises": "Maggie Friedman is an American screenwriter and producer.\nMaggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.\nWitches of East End is a fantasy-drama series.\nMaggie Friedman produced and developed Eastwick.\nEastwick is a series by ABC.", "premises-FOL": "American(maggieFriedman) \u2227 Screenwriter(maggieFriedman) \u2227 Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) \u2227 ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) \u2227 LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) \u2227 Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) \u2227 Develops(maggieFriedman, eastwick)\nSeries(eastwick) \u2227 AiredOn(eastwick, aBC)", "conclusion": "There is a series by ABC that was developed by the showrunner of Witches of East End.", "conclusion-FOL": "\u2203x \u2203y (Series(x) \u2227 AiredOn(x, aBC) \u2227 Develops(y, x) \u2227 ShowRunnerOf(y, witchesOfEastEnd))", "label": "True", "example_id": 295}
{"story_id": 98, "premises": "Maggie Friedman is an American screenwriter and producer.\nMaggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.\nWitches of East End is a fantasy-drama series.\nMaggie Friedman produced and developed Eastwick.\nEastwick is a series by ABC.", "premises-FOL": "American(maggieFriedman) \u2227 Screenwriter(maggieFriedman) \u2227 Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) \u2227 ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) \u2227 LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) \u2227 Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) \u2227 Develops(maggieFriedman, eastwick)\nSeries(eastwick) \u2227 AiredOn(eastwick, aBC)", "conclusion": "No series by ABC was developed by the showrunner of Witches of East End.", "conclusion-FOL": "\u2200x (Series(x) \u2227 AiredOn(x, aBC) \u2227 \u2203y(ShowRunnerOf(y, witchesOfEastEnd)) \u2192 \u00acDevelops(y, x))", "label": "False", "example_id": 296}
{"story_id": 98, "premises": "Maggie Friedman is an American screenwriter and producer.\nMaggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.\nWitches of East End is a fantasy-drama series.\nMaggie Friedman produced and developed Eastwick.\nEastwick is a series by ABC.", "premises-FOL": "American(maggieFriedman) \u2227 Screenwriter(maggieFriedman) \u2227 Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) \u2227 ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) \u2227 LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) \u2227 Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) \u2227 Develops(maggieFriedman, eastwick)\nSeries(eastwick) \u2227 AiredOn(eastwick, aBC)", "conclusion": "Maggie Friedman developed Witches of East End.", "conclusion-FOL": "Develops(maggieFriedman, witchesOfEastEnd)", "label": "Uncertain", "example_id": 297}
{"story_id": 119, "premises": "Evangelos Eleftheriou is a Greek electrical engineer.\nEvangelos Eleftheriou worked for IBM in Zurich.\nIf a company has employees working for them somewhere, then they have an office there.\nIBM is a company.", "premises-FOL": "Greek(evangelosEleftheriou) \u2227 ElectricalEngineer(evangelosEleftheriou)\nWorkForIn(evangelosEleftheriou, iBM, zurich)\n\u2200x \u2200x \u2200z (Company(x) \u2227 WorkForIn(y, x, z) \u2192 HaveOfficeIn(x, z))\nCompany(ibm)", "conclusion": "IBM has an office in London or Zurich or both.", "conclusion-FOL": "HaveOfficeIn(ibm, london) \u2228 HaveOfficeIn(ibm, zurich)", "label": "True", "example_id": 358}
{"story_id": 119, "premises": "Evangelos Eleftheriou is a Greek electrical engineer.\nEvangelos Eleftheriou worked for IBM in Zurich.\nIf a company has employees working for them somewhere, then they have an office there.\nIBM is a company.", "premises-FOL": "Greek(evangelosEleftheriou) \u2227 ElectricalEngineer(evangelosEleftheriou)\nWorkForIn(evangelosEleftheriou, iBM, zurich)\n\u2200x \u2200x \u2200z (Company(x) \u2227 WorkForIn(y, x, z) \u2192 HaveOfficeIn(x, z))\nCompany(ibm)", "conclusion": "No Greeks have worked for IBM.", "conclusion-FOL": "\u2200x (Greek(x) \u2192 \u00acWorkFor(x, ibm))", "label": "False", "example_id": 359}
{"story_id": 148, "premises": "Boney M. had several German #1 singles.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was not in German #1 singles.\nA song that peaks below #1 on the german charts is also a song that is not the #1 single in Germany.", "premises-FOL": "\u2203x (Song(x) \u2227 By(x, boneym,) \u2227 Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) \u2227 HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) \u2227 \u00acNumber1GermanSingle(hoorayHoorayItsAHoliHoliday)\n\u2200x (PeakBelowOn(x, number1, germanChart) \u2192 \u00acNumber1GermanSingle(x))", "conclusion": "\"Hooray! Hooray! It's a Holi-Holiday!\" was the #1 hit in Germany.", "conclusion-FOL": "Song(hoorayHoorayItsAHoliHoliday) \u2227 Number1GermanSingle(hoorayHoorayItsAHoliHoliday)", "label": "False", "example_id": 432}
{"story_id": 148, "premises": "Boney M. had several German #1 singles.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was not in German #1 singles.\nA song that peaks below #1 on the german charts is also a song that is not the #1 single in Germany.", "premises-FOL": "\u2203x (Song(x) \u2227 By(x, boneym,) \u2227 Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) \u2227 HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) \u2227 \u00acNumber1GermanSingle(hoorayHoorayItsAHoliHoliday)\n\u2200x (PeakBelowOn(x, number1, germanChart) \u2192 \u00acNumber1GermanSingle(x))", "conclusion": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.", "conclusion-FOL": "PeaksBelowOn(hoorayHoorayItsAHoliHoliday, number1, germanChart)", "label": "True", "example_id": 433}
{"story_id": 148, "premises": "Boney M. had several German #1 singles.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was not in German #1 singles.\nA song that peaks below #1 on the german charts is also a song that is not the #1 single in Germany.", "premises-FOL": "\u2203x (Song(x) \u2227 By(x, boneym,) \u2227 Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) \u2227 HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) \u2227 \u00acNumber1GermanSingle(hoorayHoorayItsAHoliHoliday)\n\u2200x (PeakBelowOn(x, number1, germanChart) \u2192 \u00acNumber1GermanSingle(x))", "conclusion": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.", "conclusion-FOL": "PeaksAtOn(hoorayHoorayItsAHoliHoliday, number3, germanChart)", "label": "Uncertain", "example_id": 434}
{"story_id": 249, "premises": "Every chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.", "premises-FOL": "\u2200x (Chef(x) \u2192 Can(x, cook))\n\u2203x (\u00acChef(x) \u2227 Can(x, cook))\n\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))\n\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))\n\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))\nCanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)", "conclusion": "Luke can make a good breakfast.", "conclusion-FOL": "CanMake(luke, goodBreakfast)", "label": "True", "example_id": 692}
{"story_id": 249, "premises": "Every chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.", "premises-FOL": "\u2200x (Chef(x) \u2192 Can(x, cook))\n\u2203x (\u00acChef(x) \u2227 Can(x, cook))\n\u2200x (Can(x, cook) \u2192 (CanMake(x, scrambledEggs) \u2227 CanMake(x, pasta)))\n\u2200x (CanMake(x, cookies) \u2227 CanMake(x, muffins) \u2192 Baker(x))\n\u2200x ((Baker(x) \u2227 CanMake(x, scrambledEggs)) \u2192 CanMake(x, goodBreakfast))\nCanMake(luke, cookies) \u2227 (CanMake(luke, scrambledEggs) \u2227 CanMake(luke, muffins) \u2227 \u00acCanMake(luke, pasta)", "conclusion": "Luke is a chef.", "conclusion-FOL": "Chef(luke)", "label": "False", "example_id": 693}
{"story_id": 196, "premises": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. \nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \nETS also develops K-12 statewide assessments used for accountability testing in many states.", "premises-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))\n\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))\n\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))\n\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))", "conclusion": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "conclusion-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 Develop(eTS, y) \u2227 AssociatedWith(y, entryToUSEducationInstitution))", "label": "True", "example_id": 557}
{"story_id": 196, "premises": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. \nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \nETS also develops K-12 statewide assessments used for accountability testing in many states.", "premises-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))\n\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))\n\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))\n\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))", "conclusion": "ETS doesn't administer tests internationally.", "conclusion-FOL": "\u2200x (Administer(eTS, x) \u2192 \u00acInternationalTest(x))", "label": "False", "example_id": 558}
{"story_id": 196, "premises": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. \nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \nETS also develops K-12 statewide assessments used for accountability testing in many states.", "premises-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))\n\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))\n\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))\n\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))", "conclusion": "ETS administers international tests including the TOEFL, GRE and subject tests in China.", "conclusion-FOL": "\u2203x (Administer(eTS, x) \u2227 InChina(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))", "label": "Uncertain", "example_id": 559}
{"story_id": 373, "premises": "All hodophiles who enjoy eating gelato ice cream would enjoy a vacation to Italy.\nNo hodophiles can resist the hallmark delectable desserts famous in Italy.\nHodophiles enjoy eating gelato ice cream or love to travel and vacation often, or both.\nNo hodophiles who study abroad in Europe regret their college experiences.\nIf hodophiles love to travel and vacation often, then they study abroad in Europe.\nRobert is a hodophile, and he either enjoys eating gelato ice cream and loves to travel and vacation often, or does not enjoy eating gelato ice cream and does not love to travel and vacation often.", "premises-FOL": "\u2200x (Hodophiles(x) \u2227 EnjoyEating(x, gelato) \u2192 Enjoy(x, vacationToItaly))\n\u2200x (Hodophiles(x) \u2227 \u00ac(\u2203y (Resist(x, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))))\n\u2200x (Hodophiles(x) \u2192 (EnjoyEating(x, gelato) \u2228 LoveToTravelOften(x))\n\u2200x (Hodophiles(x) \u2227 TakeIn(x, studyAbroadSemester, europe) \u2192 \u00acRegret(x, collegeExperience))\n\u2200x (Hodophiles(x) \u2227 LoveToTravelOften(x) \u2192 TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) \u2227 \u00ac(EnjoyEating(robert, gelato) \u2295 LoveToTravelOften(robert))", "conclusion": "Robert can resist the hallmark delectable desserts that are famous in Italy.", "conclusion-FOL": "\u2203y (Resist(robert, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))", "label": "False", "example_id": 993}
{"story_id": 373, "premises": "All hodophiles who enjoy eating gelato ice cream would enjoy a vacation to Italy.\nNo hodophiles can resist the hallmark delectable desserts famous in Italy.\nHodophiles enjoy eating gelato ice cream or love to travel and vacation often, or both.\nNo hodophiles who study abroad in Europe regret their college experiences.\nIf hodophiles love to travel and vacation often, then they study abroad in Europe.\nRobert is a hodophile, and he either enjoys eating gelato ice cream and loves to travel and vacation often, or does not enjoy eating gelato ice cream and does not love to travel and vacation often.", "premises-FOL": "\u2200x (Hodophiles(x) \u2227 EnjoyEating(x, gelato) \u2192 Enjoy(x, vacationToItaly))\n\u2200x (Hodophiles(x) \u2227 \u00ac(\u2203y (Resist(x, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))))\n\u2200x (Hodophiles(x) \u2192 (EnjoyEating(x, gelato) \u2228 LoveToTravelOften(x))\n\u2200x (Hodophiles(x) \u2227 TakeIn(x, studyAbroadSemester, europe) \u2192 \u00acRegret(x, collegeExperience))\n\u2200x (Hodophiles(x) \u2227 LoveToTravelOften(x) \u2192 TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) \u2227 \u00ac(EnjoyEating(robert, gelato) \u2295 LoveToTravelOften(robert))", "conclusion": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or he can resist the hallmark delectable desserts that are famous in Italy.", "conclusion-FOL": "\u00ac((Enjoy(robert, vacation) \u2227 In(vacation, italy)) \u2295 Regret(x, collegeExperiences)) \u2192 Enjoy(robert, vacation) \u2227 In(vacation, italy) \u2295 (\u2203y (Resist(robert, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))", "label": "True", "example_id": 994}
{"story_id": 373, "premises": "All hodophiles who enjoy eating gelato ice cream would enjoy a vacation to Italy.\nNo hodophiles can resist the hallmark delectable desserts famous in Italy.\nHodophiles enjoy eating gelato ice cream or love to travel and vacation often, or both.\nNo hodophiles who study abroad in Europe regret their college experiences.\nIf hodophiles love to travel and vacation often, then they study abroad in Europe.\nRobert is a hodophile, and he either enjoys eating gelato ice cream and loves to travel and vacation often, or does not enjoy eating gelato ice cream and does not love to travel and vacation often.", "premises-FOL": "\u2200x (Hodophiles(x) \u2227 EnjoyEating(x, gelato) \u2192 Enjoy(x, vacationToItaly))\n\u2200x (Hodophiles(x) \u2227 \u00ac(\u2203y (Resist(x, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))))\n\u2200x (Hodophiles(x) \u2192 (EnjoyEating(x, gelato) \u2228 LoveToTravelOften(x))\n\u2200x (Hodophiles(x) \u2227 TakeIn(x, studyAbroadSemester, europe) \u2192 \u00acRegret(x, collegeExperience))\n\u2200x (Hodophiles(x) \u2227 LoveToTravelOften(x) \u2192 TakeIn(x, studyAbroadSemester, europe))\nHodophiles(robert) \u2227 \u00ac(EnjoyEating(robert, gelato) \u2295 LoveToTravelOften(robert))", "conclusion": "If Robert is not both a person who can resist the hallmark delectable desserts that are famous in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.", "conclusion-FOL": "(\u2203y (Resist(robert, y) \u2227 Hallmark(y) \u2227 Delectabl(y) \u2227 Dessert(y) \u2227 FamousIn(y, italy))) \u2227 Regret(robert, collegeExperience)) \u2192 (EnjoyEating(robert, gelato) \u2295 (Enjoy(robert, vacation) \u2227 In(vacation, italy))", "label": "False", "example_id": 995}
{"story_id": 312, "premises": "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.\nThose who are enrolled in an academic program can not work full-time.\nEvery who studies in the United States as a foreigner has the authorization to study in the U.S.\nAll PhD graduate can work full-time. \nIf Tom does not study in the United States as a foreigner, he is enrolled in an academic program.", "premises-FOL": "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))\n\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))\n\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))\n\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))\n\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)", "conclusion": "Tom is a PhD graduate.", "conclusion-FOL": "PhdGraduate(tom)", "label": "False", "example_id": 776}
{"story_id": 312, "premises": "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.\nThose who are enrolled in an academic program can not work full-time.\nEvery who studies in the United States as a foreigner has the authorization to study in the U.S.\nAll PhD graduate can work full-time. \nIf Tom does not study in the United States as a foreigner, he is enrolled in an academic program.", "premises-FOL": "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))\n\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))\n\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))\n\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))\n\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)", "conclusion": "Tom is not a PhD graduate.", "conclusion-FOL": "\u00acPhdGraduate(tom)", "label": "True", "example_id": 777}
{"story_id": 312, "premises": "To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program.\nThose who are enrolled in an academic program can not work full-time.\nEvery who studies in the United States as a foreigner has the authorization to study in the U.S.\nAll PhD graduate can work full-time. \nIf Tom does not study in the United States as a foreigner, he is enrolled in an academic program.", "premises-FOL": "\u2200x (Have(x, authorization, studyIn, unitedStates) \u2192 EnrolledIn(x, academicProgram))\n\u2200x (EnrolledIn(x, academicProgram) \u2192 \u00acWork(x, fullTime))\n\u2200x (StudyIn(x, unitedStates) \u2192 Have(x, authorization, studyIn, unitedStates))\n\u2200x (PhDGraduate(x) \u2192 Work(x, fullTime))\n\u00acStudyIn(x, unitedStates) \u2192 EnrolledIn(x, academicProgram)", "conclusion": "Tom wants to study abroad.", "conclusion-FOL": "StudyIn(tom, unitedStates)", "label": "Uncertain", "example_id": 778}
{"story_id": 134, "premises": "Islip Speedway is the smallest race track.\nThere was a demolition derby on the smallest race track.\nIslip is either demolished or still being used.\nSpeedways that are still being used have races held at them.\nIslip doesn't have races held at it.", "premises-FOL": "Speedway(islip) \u2227 SmallestRaceTrack(islip)\n\u2203x \u2203y (DemolitionDerby(x) \u2227 SmallestRaceTrack(y) \u2227 On(x, y))\nDemolished(islip) \u2295 StillUsed(islip)\n\u2200x (Speedway(x) \u2227 StillUsed(x) \u2192 Have(races, heldAt, x))\n\u00acHave(races, heldAt, islip)", "conclusion": "There has been a demolition derby somewhere that has since been demolished.", "conclusion-FOL": "\u2203x \u2203y (DemolitionDerby(x) \u2227 On(x, y) \u2227 Demolished(y))", "label": "True", "example_id": 395}
{"story_id": 134, "premises": "Islip Speedway is the smallest race track.\nThere was a demolition derby on the smallest race track.\nIslip is either demolished or still being used.\nSpeedways that are still being used have races held at them.\nIslip doesn't have races held at it.", "premises-FOL": "Speedway(islip) \u2227 SmallestRaceTrack(islip)\n\u2203x \u2203y (DemolitionDerby(x) \u2227 SmallestRaceTrack(y) \u2227 On(x, y))\nDemolished(islip) \u2295 StillUsed(islip)\n\u2200x (Speedway(x) \u2227 StillUsed(x) \u2192 Have(races, heldAt, x))\n\u00acHave(races, heldAt, islip)", "conclusion": "Islip was demolished.", "conclusion-FOL": "Demolished(islip)", "label": "True", "example_id": 396}
{"story_id": 134, "premises": "Islip Speedway is the smallest race track.\nThere was a demolition derby on the smallest race track.\nIslip is either demolished or still being used.\nSpeedways that are still being used have races held at them.\nIslip doesn't have races held at it.", "premises-FOL": "Speedway(islip) \u2227 SmallestRaceTrack(islip)\n\u2203x \u2203y (DemolitionDerby(x) \u2227 SmallestRaceTrack(y) \u2227 On(x, y))\nDemolished(islip) \u2295 StillUsed(islip)\n\u2200x (Speedway(x) \u2227 StillUsed(x) \u2192 Have(races, heldAt, x))\n\u00acHave(races, heldAt, islip)", "conclusion": "Islip is still being used.", "conclusion-FOL": "StillUsed(islip)", "label": "False", "example_id": 397}
{"story_id": 427, "premises": "If a person pays their taxes, then they contribute to the country. \nEveryone who works for a government department pays a tax on their salary. \nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison. \nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes. ", "premises-FOL": "\u2200x (Taxpayer(x) \u2192 ContributeTo(x, country))\n\u2200x (WorkFor(x, governmentAgency) \u2192 Taxpayer(x))\n\u2200x (ServesIn(x, theArmy) \u2192 WorkFor(x, governmentAgency))\n\u2200x (SentencedForMurder(x) \u2192 Imprisoned(x))\n\u2200x (Imprisoned((x) \u2192 Has(x, criminalRecord))\nSentencedForMurder(james) \u2295 Imprisoned(james) \nHas(james, criminalRecord) \u2295 Taxpayer(james)", "conclusion": "James contributes to the country.", "conclusion-FOL": "ContributeToCountry(james)", "label": "Uncertain", "example_id": 1211}
{"story_id": 427, "premises": "If a person pays their taxes, then they contribute to the country. \nEveryone who works for a government department pays a tax on their salary. \nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison. \nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes. ", "premises-FOL": "\u2200x (Taxpayer(x) \u2192 ContributeTo(x, country))\n\u2200x (WorkFor(x, governmentAgency) \u2192 Taxpayer(x))\n\u2200x (ServesIn(x, theArmy) \u2192 WorkFor(x, governmentAgency))\n\u2200x (SentencedForMurder(x) \u2192 Imprisoned(x))\n\u2200x (Imprisoned((x) \u2192 Has(x, criminalRecord))\nSentencedForMurder(james) \u2295 Imprisoned(james) \nHas(james, criminalRecord) \u2295 Taxpayer(james)", "conclusion": "James does not contribute to the country.", "conclusion-FOL": "\u00acContributeTo(james, country)", "label": "Uncertain", "example_id": 1212}
{"story_id": 427, "premises": "If a person pays their taxes, then they contribute to the country. \nEveryone who works for a government department pays a tax on their salary. \nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison. \nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes. ", "premises-FOL": "\u2200x (Taxpayer(x) \u2192 ContributeTo(x, country))\n\u2200x (WorkFor(x, governmentAgency) \u2192 Taxpayer(x))\n\u2200x (ServesIn(x, theArmy) \u2192 WorkFor(x, governmentAgency))\n\u2200x (SentencedForMurder(x) \u2192 Imprisoned(x))\n\u2200x (Imprisoned((x) \u2192 Has(x, criminalRecord))\nSentencedForMurder(james) \u2295 Imprisoned(james) \nHas(james, criminalRecord) \u2295 Taxpayer(james)", "conclusion": "James contributes to the country and he serves in the army.", "conclusion-FOL": "ContributeTo(james, country) \u2227 ServesIn(james, army)", "label": "False", "example_id": 1213}
{"story_id": 427, "premises": "If a person pays their taxes, then they contribute to the country. \nEveryone who works for a government department pays a tax on their salary. \nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison. \nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes. ", "premises-FOL": "\u2200x (Taxpayer(x) \u2192 ContributeTo(x, country))\n\u2200x (WorkFor(x, governmentAgency) \u2192 Taxpayer(x))\n\u2200x (ServesIn(x, theArmy) \u2192 WorkFor(x, governmentAgency))\n\u2200x (SentencedForMurder(x) \u2192 Imprisoned(x))\n\u2200x (Imprisoned((x) \u2192 Has(x, criminalRecord))\nSentencedForMurder(james) \u2295 Imprisoned(james) \nHas(james, criminalRecord) \u2295 Taxpayer(james)", "conclusion": "James does not contribute to the country and does not serve in the army.", "conclusion-FOL": "\u00ac(ContributeTo(james, country) \u2227 ServesIn(james, army))", "label": "True", "example_id": 1214}
{"story_id": 12, "premises": "The Croton River watershed is the drainage basin of the Croton River.\nThe Croton River is in southwestern New York.\nWater from the Croton River watershed flows to the Bronx.\nThe Bronx is in New York.", "premises-FOL": "DrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n\u2200x ((Water(x) \u2227 In(x, crotonRiverWatershed)) \u2192 FlowsTo(x, bronx))\nIn(bronx, newYork)", "conclusion": "Water from the Croton River watershed flows to somewhere in New York.", "conclusion-FOL": "\u2200x ((Water(x) \u2227 From(x, crotonRiverWatershed)) \u2192 \u2203y(FlowsTo(x, y) \u2227 In(y, newYork)))", "label": "True", "example_id": 32}
{"story_id": 12, "premises": "The Croton River watershed is the drainage basin of the Croton River.\nThe Croton River is in southwestern New York.\nWater from the Croton River watershed flows to the Bronx.\nThe Bronx is in New York.", "premises-FOL": "DrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n\u2200x ((Water(x) \u2227 In(x, crotonRiverWatershed)) \u2192 FlowsTo(x, bronx))\nIn(bronx, newYork)", "conclusion": "The Croton River watershed is in the Bronx.", "conclusion-FOL": "In(crotonRiverWatershed, bronx)", "label": "Uncertain", "example_id": 33}
{"story_id": 12, "premises": "The Croton River watershed is the drainage basin of the Croton River.\nThe Croton River is in southwestern New York.\nWater from the Croton River watershed flows to the Bronx.\nThe Bronx is in New York.", "premises-FOL": "DrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n\u2200x ((Water(x) \u2227 In(x, crotonRiverWatershed)) \u2192 FlowsTo(x, bronx))\nIn(bronx, newYork)", "conclusion": "Water from the Croton River flows to the Bronx.", "conclusion-FOL": "\u2200x (Water(x) \u2227 From(x, crotonRiver) \u2192 FlowsTo(x, bronx))", "label": "Uncertain", "example_id": 34}
{"story_id": 261, "premises": "All nuclear-powered submarines are warships.\nNo nuclear-powered submarines are commercial vessels.", "premises-FOL": "\u2200x (NuclearPoweredSubmarine(x) \u2192 Warship(x))\n\u2200x (NuclearPoweredSubmarine(x) \u2192 \u00acCommercialVessel(x))", "conclusion": "No warships are commercial vessels.", "conclusion-FOL": "\u2200x (Warship(x) \u2192 \u00acCommercialVessel(x))", "label": "Uncertain", "example_id": 705}
{"story_id": 67, "premises": "If an album is written by a rock band, then the genre of the album is rock.\nIf a band writes an album winning an award, then this band wins this award.\nTrouble at the Henhouse is an album by The Tragically Hip.\nThe Tragically Hip is a Canadian rock band.\nThe song \"Butts Wigglin'\" is in Trouble at the Henhouse.\nTrouble at the Henhouse won the Album of the Year award.\nA song in Trouble at the Henhouse appeared in a film.", "premises-FOL": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))\n\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))", "conclusion": "The genre of Trouble at the Henhouse is rock.", "conclusion-FOL": "Genre(troubleAtTheHenhouse, rock)", "label": "True", "example_id": 198}
{"story_id": 67, "premises": "If an album is written by a rock band, then the genre of the album is rock.\nIf a band writes an album winning an award, then this band wins this award.\nTrouble at the Henhouse is an album by The Tragically Hip.\nThe Tragically Hip is a Canadian rock band.\nThe song \"Butts Wigglin'\" is in Trouble at the Henhouse.\nTrouble at the Henhouse won the Album of the Year award.\nA song in Trouble at the Henhouse appeared in a film.", "premises-FOL": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))\n\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))", "conclusion": "No Canadian rock band has won the Album of the Year award.", "conclusion-FOL": "\u00ac\u2203x(RockBand(x, canada) \u2227 Award(x, theAlbumOfTheYear))", "label": "False", "example_id": 199}
{"story_id": 67, "premises": "If an album is written by a rock band, then the genre of the album is rock.\nIf a band writes an album winning an award, then this band wins this award.\nTrouble at the Henhouse is an album by The Tragically Hip.\nThe Tragically Hip is a Canadian rock band.\nThe song \"Butts Wigglin'\" is in Trouble at the Henhouse.\nTrouble at the Henhouse won the Album of the Year award.\nA song in Trouble at the Henhouse appeared in a film.", "premises-FOL": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))\n\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))\nAlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)\nRockBand(the_Tragically_Hip, canada)\nSongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)\nAlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)\n\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))", "conclusion": "\"Butts Wigglin'\" appeared in a film.", "conclusion-FOL": "SongInFilm(buttsWigglin)", "label": "Uncertain", "example_id": 200}
{"story_id": 238, "premises": "Daniel is a software engineer, and he works at Palantir Technologies.\nDaniel studied bioengineering during his undergraduate at Rice University.\nDaniel\u2019s older sister works at Meta as a technical sourcer. \nDaniel\u2019s dad and older sister both graduated from Stanford University.\nDaniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis.", "premises-FOL": "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)", "conclusion": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.", "conclusion-FOL": "AppliedTo(daniel, stanfordUniversity) \u2227 \u00acGotInto(daniel, stanfordUniversity) \u2227 Alumni(danielsFamilyMembers, stanfordUniversity)", "label": "Uncertain", "example_id": 676}
{"story_id": 238, "premises": "Daniel is a software engineer, and he works at Palantir Technologies.\nDaniel studied bioengineering during his undergraduate at Rice University.\nDaniel\u2019s older sister works at Meta as a technical sourcer. \nDaniel\u2019s dad and older sister both graduated from Stanford University.\nDaniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis.", "premises-FOL": "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)", "conclusion": "Daniel studied bioengineering as an undergraduate at Rice University.", "conclusion-FOL": "Studied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)", "label": "True", "example_id": 677}
{"story_id": 238, "premises": "Daniel is a software engineer, and he works at Palantir Technologies.\nDaniel studied bioengineering during his undergraduate at Rice University.\nDaniel\u2019s older sister works at Meta as a technical sourcer. \nDaniel\u2019s dad and older sister both graduated from Stanford University.\nDaniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis.", "premises-FOL": "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)\nStudied(daniel, bioengineering) \u2227 UndergraduateAt(daniel, riceUniversity)\nWorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)\n GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)\nDoctor(danielsDad) \u2227 Practicing(danielsDad, internalMedicine) \u2227 PracticingAt(danielsDad, veteransHospital) \u2227 In(veteransHospital, minneapolis)", "conclusion": "Daniel and his sister grew up in Minneapolis, Minnesota.", "conclusion-FOL": "GrewUpIn(daniel, minneapolis) \u2227 GrewUpIn(danielsOlderSister, minneapolis)", "label": "Uncertain", "example_id": 678}
{"story_id": 108, "premises": "The world's only major large passenger aircraft manufacturers are Boeing and Airbus.\nAll American Airlines planes are from the world's major large passenger aircraft manufacturers. \nAirbus made more revenue than Boeing last year.", "premises-FOL": "\u2200x (WorldMajorLargePassengerAircraftManufacturer(x) \u2192 x=boeing \u2295 x=airbus)\n\u2200x (AmericanAirlinesAircraft(x) \u2192 WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)", "conclusion": "An American Airlines plane is either a Boeing or Airbus plane.", "conclusion-FOL": "\u2200x (AmericanAirlinesPlane(x) \u2192 x=boeing \u2295 x=airbus)", "label": "True", "example_id": 326}
{"story_id": 108, "premises": "The world's only major large passenger aircraft manufacturers are Boeing and Airbus.\nAll American Airlines planes are from the world's major large passenger aircraft manufacturers. \nAirbus made more revenue than Boeing last year.", "premises-FOL": "\u2200x (WorldMajorLargePassengerAircraftManufacturer(x) \u2192 x=boeing \u2295 x=airbus)\n\u2200x (AmericanAirlinesAircraft(x) \u2192 WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)", "conclusion": "There exists a SpaceX commercial aircraft.", "conclusion-FOL": "\u2203x (CommercialAircraft(x) \u2227 x=spaceX)", "label": "Uncertain", "example_id": 327}
{"story_id": 108, "premises": "The world's only major large passenger aircraft manufacturers are Boeing and Airbus.\nAll American Airlines planes are from the world's major large passenger aircraft manufacturers. \nAirbus made more revenue than Boeing last year.", "premises-FOL": "\u2200x (WorldMajorLargePassengerAircraftManufacturer(x) \u2192 x=boeing \u2295 x=airbus)\n\u2200x (AmericanAirlinesAircraft(x) \u2192 WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)", "conclusion": "There does not exist a United Airlines plane produced by Boeing.", "conclusion-FOL": "\u2200x (UnitedAirlinesAircraft(x) \u2192 \u00ac(x=boeing))", "label": "Uncertain", "example_id": 328}
{"story_id": 108, "premises": "The world's only major large passenger aircraft manufacturers are Boeing and Airbus.\nAll American Airlines planes are from the world's major large passenger aircraft manufacturers. \nAirbus made more revenue than Boeing last year.", "premises-FOL": "\u2200x (WorldMajorLargePassengerAircraftManufacturer(x) \u2192 x=boeing \u2295 x=airbus)\n\u2200x (AmericanAirlinesAircraft(x) \u2192 WorldMajorLargePassengerAircraftManufacturer(x))\nMoreInRevenue(airbus, boeing)", "conclusion": "There is a commercial plane made by both Airbus and Boeing.", "conclusion-FOL": "\u2203x (WorldMajorLargePassengerAircraftManufacturer(x) \u2227 ProducedBy(x, airbus) \u2227 ProducedBy(x, boeing))", "label": "False", "example_id": 329}
{"story_id": 84, "premises": "Luzon is an island in the Philippines.\nIn December 1999, an earthquake struck Luzon.\nPeople died in the December 1999 earthquake in Luzon.", "premises-FOL": "Island(luzon) \u2227 In(luzon, philippines)\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon))\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon) \u2227 Deadly(x))", "conclusion": "Leyte is an island in the Philippines.", "conclusion-FOL": "Island(leyte) \u2227 In(leyte, philippines)", "label": "Uncertain", "example_id": 255}
{"story_id": 84, "premises": "Luzon is an island in the Philippines.\nIn December 1999, an earthquake struck Luzon.\nPeople died in the December 1999 earthquake in Luzon.", "premises-FOL": "Island(luzon) \u2227 In(luzon, philippines)\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon))\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon) \u2227 Deadly(x))", "conclusion": "No one has ever died in an earthquake that struck the Philippines.", "conclusion-FOL": "\u2200x \u2200y ((Earthquake(x) \u2227 StrikeInCity(x, y) \u2227 In(y, philippines)) \u2192 \u00acDeadly(x))", "label": "False", "example_id": 256}
{"story_id": 84, "premises": "Luzon is an island in the Philippines.\nIn December 1999, an earthquake struck Luzon.\nPeople died in the December 1999 earthquake in Luzon.", "premises-FOL": "Island(luzon) \u2227 In(luzon, philippines)\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon))\n\u2203x (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, luzon) \u2227 Deadly(x))", "conclusion": "In 1999, there was at least one earthquake in the Philippines.", "conclusion-FOL": "\u2203x \u2203y (Earthquake(x) \u2227 StrikeInYr(x, year1999) \u2227 StrikeInMo(x, december) \u2227 StrikeInCity(x, y) \u2227 In(y, philippines))", "label": "True", "example_id": 257}
{"story_id": 362, "premises": "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.\nIf people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.\nAll people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.\nPeople who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.\nPeople who spend a lot of money at casinos and other betting games are at risk of gambling addiction.\nMatt does not invest in the public stock market regularly. \nMatt likes financial risks.", "premises-FOL": "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))\n\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))\n\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)", "conclusion": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "conclusion-FOL": "Newspapers(matt)", "label": "Uncertain", "example_id": 961}
{"story_id": 362, "premises": "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.\nIf people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.\nAll people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.\nPeople who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.\nPeople who spend a lot of money at casinos and other betting games are at risk of gambling addiction.\nMatt does not invest in the public stock market regularly. \nMatt likes financial risks.", "premises-FOL": "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))\n\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))\n\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)", "conclusion": "If Matt is either both a person who is at risk of a gambling addiction and invests in the public stock market regularly, or neither is at risk of a gambling addiction nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.", "conclusion-FOL": "AtRiskOf(matt, gamblingAddiction) \u2295 InvestInRegularly(matt, publicStockMarket) \u2192 \u00acEnjoyVisiting(matt, theLasVegasStrip) \u2227  \u00ac(ReadToKeepUpdatedOn(matt, theWallStreetJournal, financialMetric) \u2228  (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(matt, y, financialMetric))))", "label": "True", "example_id": 962}
{"story_id": 362, "premises": "People who like financial risks invest in the public stock market regularly or enjoy gambling regularly.\nIf people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.\nAll people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games.\nPeople who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip.\nPeople who spend a lot of money at casinos and other betting games are at risk of gambling addiction.\nMatt does not invest in the public stock market regularly. \nMatt likes financial risks.", "premises-FOL": "\u2200x (Like(x, financialRisk) \u2192 InvestInRegularly(x, publicStockMarket) \u2228 EnjoyRegularly(x, gambling))\n\u2200x (InvestInRegularly(x, publicStockMarket) \u2192 ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))))\n\u2200x (EnjoyRegularly(x, gambling) \u2192 SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y))) \u2192 EnjoyVisiting(x, theLasVegasStrip))\n\u2200x (SpendAt(x, alotOfMoney, casino) \u2228 (\u2203y (\u00ac(y=casino) \u2227 BettingGame(y) \u2227 SpendAt(x, aLotOfMoney, y)) \u2192 AtRiskOf(x, gamblingAddiction))\nInvestInRegularly(matt, publicStockMarket)\nLike(matt, financialRisk)", "conclusion": "Matt is not at risk of a gambling addiction and Mike does not both read the Wall Street Journal and other newspapers regularly and visits the Las Vegas Strip regularly.", "conclusion-FOL": "\u00acAtRiskOf(matt, gamblingAddiction) \u2227 \u00ac(ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) \u2228 (\u2203y (\u00ac(y=theWallStreetJournal) \u2227 NewsPaper(y) \u2227 ReadToKeepUpdatedOn(x, y, financialMetric))) \u2227 EnjoyVisiting(matt, theLasVegasStrip))", "label": "False", "example_id": 963}
{"story_id": 241, "premises": "All students learning piano can strike the right notes. \nAll students who can strike the right note can get the rhythms right. \nIf a student can get the rhythms right, he will start working on coordination between the left and the right hands. \nSome students who start working on coordination between the left and the right hands become good at it, while other students find it challenging. \nIf John can strike the right notes, get the rhythms right, and is good at coordination between right and left hands, then he puts emotions into his playing. \nJohn is a student learning piano. \nJohn does not find coordination between the left and the right hands challenging. ", "premises-FOL": "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 Can(x, strike, rightNote))\n\u2200x (Student(x) \u2227  Can(x, strike, rightNote) \u2192 Can(x, getTheRhythmRight))\n\u2200x (Student(x) \u2227 Can(x, getTheRhythmRight) \u2192 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))\n\u2200x (Student(x) \u2227 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) \u2192 Become(x, goodAtCoordination) \u2295 Find(x, coordinationChallenging))\n(Can(john, getTheRhythmRight) \u2227 Can(john, getTheRhythmRight)) \u2227  Become(john, goodAtCoordination)  \u2192 PutEmotionInto(john, hisPlaying)\nStudent(john) \u2227 LearningPiano(john)\n\u00acFind(john, coordinationChallenging)", "conclusion": "John can get the rhythms right.", "conclusion-FOL": "Can(john, getTheRhythmRight)", "label": "True", "example_id": 683}
{"story_id": 241, "premises": "All students learning piano can strike the right notes. \nAll students who can strike the right note can get the rhythms right. \nIf a student can get the rhythms right, he will start working on coordination between the left and the right hands. \nSome students who start working on coordination between the left and the right hands become good at it, while other students find it challenging. \nIf John can strike the right notes, get the rhythms right, and is good at coordination between right and left hands, then he puts emotions into his playing. \nJohn is a student learning piano. \nJohn does not find coordination between the left and the right hands challenging. ", "premises-FOL": "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 Can(x, strike, rightNote))\n\u2200x (Student(x) \u2227  Can(x, strike, rightNote) \u2192 Can(x, getTheRhythmRight))\n\u2200x (Student(x) \u2227 Can(x, getTheRhythmRight) \u2192 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))\n\u2200x (Student(x) \u2227 Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) \u2192 Become(x, goodAtCoordination) \u2295 Find(x, coordinationChallenging))\n(Can(john, getTheRhythmRight) \u2227 Can(john, getTheRhythmRight)) \u2227  Become(john, goodAtCoordination)  \u2192 PutEmotionInto(john, hisPlaying)\nStudent(john) \u2227 LearningPiano(john)\n\u00acFind(john, coordinationChallenging)", "conclusion": "John does not put emotions into his playing.", "conclusion-FOL": "PutEmotionInto(john, hisPlaying)", "label": "False", "example_id": 684}
{"story_id": 229, "premises": "Barbara Ann Marshall is a former swimmer and former world record-holder.\nBarbara Ann Marshall participated in the 1972 Summer Olympics.\nBarbara Ann Marshall's home country is the United States.\nAll people who competed in the 1972 Summer Olympics represented their home country.\nBarbara Ann Marshall participated in the preliminary heat in the freestyle relay.\nBarbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.\nOnly relay swimmers who participated in the final event at the 1972 Summer Olympics received medals.", "premises-FOL": "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)\nParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)\nHomeCountry(barbaraAnnMarshall, unitedStates)\n\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))\nParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)\n\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)\n\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))", "conclusion": "Barbara Ann Marshall did not receive medals.", "conclusion-FOL": "\u00acRecieved(barbaraAnnMarshall, medal)", "label": "Uncertain", "example_id": 650}
{"story_id": 229, "premises": "Barbara Ann Marshall is a former swimmer and former world record-holder.\nBarbara Ann Marshall participated in the 1972 Summer Olympics.\nBarbara Ann Marshall's home country is the United States.\nAll people who competed in the 1972 Summer Olympics represented their home country.\nBarbara Ann Marshall participated in the preliminary heat in the freestyle relay.\nBarbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.\nOnly relay swimmers who participated in the final event at the 1972 Summer Olympics received medals.", "premises-FOL": "FormerSwimmer(barbaraAnnMarshall) \u2227 FormerWorldRecordHolder(barbaraAnnMarshall)\nParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)\nHomeCountry(barbaraAnnMarshall, unitedStates)\n\u2200x \u2203y (ParticipatedIn(x, 1972SummerOlympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))\nParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)\n\u00acParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)\n\u2200x ((ParticipatedIn(x, 1972SummerOlympics) \u2227 RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalHeatFreestyleRelay)) \u2194 \u00acRecieved(x, medal)))", "conclusion": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.", "conclusion-FOL": "Represented(barbaraAnnMarshall, unitedStates)", "label": "True", "example_id": 651}
{"story_id": 201, "premises": "A game is played with three stages: red stage, yellow stage, and green stage.\nEach player begins at the red stage.\nAll players must reach the yellow stage before they can reach the green stage.\nThe yellow stage comes after the red stage.\nAll players must proceed one stage at a time.", "premises-FOL": "\u2203x \u2203y \u2203y \u2203w (Game(x) \u2227 StageNumber(x,3) \u2227 Stage(y) \u2227 Stage(z) \u2227 Stage(w) \u2227 \u00ac(y=z) \u2227 \u00ac(z=w) \u2227 \u00ac(y=w) \u2227 Red(y) \u2227 Yellow(z) \u2227 Green(w))\n\u2200x (Player(x) \u2192 StartRed(x))\n\u2200x (Player(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2192 ReachYellow(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))", "conclusion": "It is possible to move to the green stage without ever reaching the yellow stage.", "conclusion-FOL": "\u2203x (Player(x) \u2227 RedToGreen(x))", "label": "False", "example_id": 572}
{"story_id": 201, "premises": "A game is played with three stages: red stage, yellow stage, and green stage.\nEach player begins at the red stage.\nAll players must reach the yellow stage before they can reach the green stage.\nThe yellow stage comes after the red stage.\nAll players must proceed one stage at a time.", "premises-FOL": "\u2203x \u2203y \u2203y \u2203w (Game(x) \u2227 StageNumber(x,3) \u2227 Stage(y) \u2227 Stage(z) \u2227 Stage(w) \u2227 \u00ac(y=z) \u2227 \u00ac(z=w) \u2227 \u00ac(y=w) \u2227 Red(y) \u2227 Yellow(z) \u2227 Green(w))\n\u2200x (Player(x) \u2192 StartRed(x))\n\u2200x (Player(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2192 ReachYellow(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))", "conclusion": "It is possible to reach the yellow stage without ever reaching the green stage.", "conclusion-FOL": "\u2203x (Player(x) \u2227 RedToYellow(x))", "label": "True", "example_id": 573}
{"story_id": 201, "premises": "A game is played with three stages: red stage, yellow stage, and green stage.\nEach player begins at the red stage.\nAll players must reach the yellow stage before they can reach the green stage.\nThe yellow stage comes after the red stage.\nAll players must proceed one stage at a time.", "premises-FOL": "\u2203x \u2203y \u2203y \u2203w (Game(x) \u2227 StageNumber(x,3) \u2227 Stage(y) \u2227 Stage(z) \u2227 Stage(w) \u2227 \u00ac(y=z) \u2227 \u00ac(z=w) \u2227 \u00ac(y=w) \u2227 Red(y) \u2227 Yellow(z) \u2227 Green(w))\n\u2200x (Player(x) \u2192 StartRed(x))\n\u2200x (Player(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2192 ReachYellow(x))\n\u2200x (Player(x) \u2227 StartRed(x) \u2227 \u00acReachYellow(x) \u2192 \u00acReachGreen(x))", "conclusion": "It is possible to complete the game without ever reaching the green stage.", "conclusion-FOL": "\u2203x (Player(x) \u2227 CompleteGame(x))", "label": "Uncertain", "example_id": 574}
{"story_id": 399, "premises": "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.\nIf someone in Love City considers physical touch as their most important love language, then they are good with pets.\nIf someone in Love City is good with pets, then they are not scared of animals.\nIn Love City, everyone is scared of animals, or loves animals, or both.\nAdam, who is in Love City, either values physical touch as his most important love language or loves animals.", "premises-FOL": "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))\n\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))\n\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)", "conclusion": "Adam is scared of animals.", "conclusion-FOL": "ScaredOf(adam, animal)", "label": "Uncertain", "example_id": 1090}
{"story_id": 399, "premises": "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.\nIf someone in Love City considers physical touch as their most important love language, then they are good with pets.\nIf someone in Love City is good with pets, then they are not scared of animals.\nIn Love City, everyone is scared of animals, or loves animals, or both.\nAdam, who is in Love City, either values physical touch as his most important love language or loves animals.", "premises-FOL": "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))\n\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))\n\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)", "conclusion": "Adam considers words of affirmation to be the most important love language.", "conclusion-FOL": "ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)", "label": "True", "example_id": 1091}
{"story_id": 399, "premises": "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.\nIf someone in Love City considers physical touch as their most important love language, then they are good with pets.\nIf someone in Love City is good with pets, then they are not scared of animals.\nIn Love City, everyone is scared of animals, or loves animals, or both.\nAdam, who is in Love City, either values physical touch as his most important love language or loves animals.", "premises-FOL": "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))\n\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))\n\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)", "conclusion": "Adam considers physical touch as the most important love language and considers words of affirmation as the most important love language.", "conclusion-FOL": "ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2227 ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)", "label": "False", "example_id": 1092}
{"story_id": 399, "premises": "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.\nIf someone in Love City considers physical touch as their most important love language, then they are good with pets.\nIf someone in Love City is good with pets, then they are not scared of animals.\nIn Love City, everyone is scared of animals, or loves animals, or both.\nAdam, who is in Love City, either values physical touch as his most important love language or loves animals.", "premises-FOL": "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))\n\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))\n\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)", "conclusion": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.", "conclusion-FOL": "ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)", "label": "True", "example_id": 1093}
{"story_id": 399, "premises": "In Love City, everyone considers physical touch or words of affirmation to be their most important love language.\nIf someone in Love City considers physical touch as their most important love language, then they are good with pets.\nIf someone in Love City is good with pets, then they are not scared of animals.\nIn Love City, everyone is scared of animals, or loves animals, or both.\nAdam, who is in Love City, either values physical touch as his most important love language or loves animals.", "premises-FOL": "\u2200x (In(x, loveCity) \u2192 (ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2228 ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))\n\u2200x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  \u2227 In(x, loveCity) \u2192 GoodWith(x, pet))\n\u2200x ((GoodWith(x, pet) \u2227 In(x, loveCity)) \u2192 \u00acScaredOf(x, animal))\n\u2200x (In(x, loveCity) \u2192 (ScaredOf(x, animal) \u2228 Loves(x, animal)))\n(ConsidersMostImportantLoveLanguage(adam, physicalTouch) \u2295 Loves(adam, animal)) \u2227 In(adam, loveCity)", "conclusion": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.", "conclusion-FOL": "(ConsidersMostImportantLoveLanguage(adam, physicalTouch, mostImportantLoveLanguage) \u2228 GoodWith(x, pet)) \u2192 ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)", "label": "True", "example_id": 1094}
{"story_id": 444, "premises": "All birds have wings.\nAnimals with wings aren't reptiles.\nSome animals that fly are birds.\nIf something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. \nJohn is either both an iguana and a bird, or he is neither. \nJohn is an animal. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))\n\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))\n\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))\n\u2200x (Iguana(x) \u2192 Reptile(x))\n\u00ac(Iguana(john) \u2295 Bird(john))\nAnimal(john)", "conclusion": "John is a reptile.", "conclusion-FOL": "Reptile(john)", "label": "Uncertain", "example_id": 1277}
{"story_id": 444, "premises": "All birds have wings.\nAnimals with wings aren't reptiles.\nSome animals that fly are birds.\nIf something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. \nJohn is either both an iguana and a bird, or he is neither. \nJohn is an animal. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))\n\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))\n\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))\n\u2200x (Iguana(x) \u2192 Reptile(x))\n\u00ac(Iguana(john) \u2295 Bird(john))\nAnimal(john)", "conclusion": "John is not both an iguana and an animal that can fly.", "conclusion-FOL": "\u00ac(Iguana(john) \u2227 Fly(john))", "label": "True", "example_id": 1278}
{"story_id": 444, "premises": "All birds have wings.\nAnimals with wings aren't reptiles.\nSome animals that fly are birds.\nIf something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. \nJohn is either both an iguana and a bird, or he is neither. \nJohn is an animal. ", "premises-FOL": "\u2200x (Bird(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z)))\n\u2200x (Animal(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 Wing(y) \u2227 Wing(z) \u2227 Have(x, y) \u2227 Have(x, z))) \u2192 \u00acReptile(x))\n\u2203x (Animal(x) \u2227 Fly(x) \u2227 Bird(x))\n\u2200x (Iguana(x) \u2192 Reptile(x))\n\u00ac(Iguana(john) \u2295 Bird(john))\nAnimal(john)", "conclusion": "John is an animal that can fly and John is a bird.", "conclusion-FOL": "Animal(john) \u2227 Fly(john) \u2227 Bird(john)", "label": "False", "example_id": 1279}
{"story_id": 30, "premises": "EndGame is a movie released in 2006.\nEndGame was set in Washington.\nEndGame was filmed outside of Washington.\nSome movies are filmed in New York.\nAndy Chang directed EndGame.\nAndy Chang is from Hong Kong.", "premises-FOL": "Movie(endGame) \u2227 Released(endGame, yr2006)\nSetIn(endGame, washington)\n\u00ac(FilmedIn(endGame, washington))\n\u2203x\u2203y(FilmedIn(x, newYork) \u2227 (\u00ac(x=y)) \u2227 FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)", "conclusion": "EndGame was filmed in New York.", "conclusion-FOL": "FilmedIn(endGame, newYork)", "label": "Uncertain", "example_id": 86}
{"story_id": 30, "premises": "EndGame is a movie released in 2006.\nEndGame was set in Washington.\nEndGame was filmed outside of Washington.\nSome movies are filmed in New York.\nAndy Chang directed EndGame.\nAndy Chang is from Hong Kong.", "premises-FOL": "Movie(endGame) \u2227 Released(endGame, yr2006)\nSetIn(endGame, washington)\n\u00ac(FilmedIn(endGame, washington))\n\u2203x\u2203y(FilmedIn(x, newYork) \u2227 (\u00ac(x=y)) \u2227 FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)", "conclusion": "EndGame was not directed by someone from Hong Kong.", "conclusion-FOL": "\u2200x (\u00ac(Directed(x, endGame) \u2227 From(x, hongKong)))", "label": "False", "example_id": 87}
{"story_id": 30, "premises": "EndGame is a movie released in 2006.\nEndGame was set in Washington.\nEndGame was filmed outside of Washington.\nSome movies are filmed in New York.\nAndy Chang directed EndGame.\nAndy Chang is from Hong Kong.", "premises-FOL": "Movie(endGame) \u2227 Released(endGame, yr2006)\nSetIn(endGame, washington)\n\u00ac(FilmedIn(endGame, washington))\n\u2203x\u2203y(FilmedIn(x, newYork) \u2227 (\u00ac(x=y)) \u2227 FilmedIn(y, newYork))\nDirected(andyChang, endGame)\nFrom(andyChang, hongKong)", "conclusion": "All of Andy Chang's movies are filmed outside of Washington.", "conclusion-FOL": "\u2200x (Directed(andyChang, x) \u2192 \u00ac(FilmedIn(x, washington)))", "label": "Uncertain", "example_id": 88}
{"story_id": 7, "premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "conclusion": "Eight is larger than seven.", "conclusion-FOL": "Larger(eight, seven)", "label": "True", "example_id": 17}
{"story_id": 7, "premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "conclusion": "Eight is positive.", "conclusion-FOL": "Positive(eight)", "label": "True", "example_id": 18}
{"story_id": 7, "premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "conclusion": "Six is larger than seven.", "conclusion-FOL": "Larger(six, seven)", "label": "False", "example_id": 19}
{"story_id": 293, "premises": "All dogs sleep.\nSome four-legged animals are dogs.", "premises-FOL": "\u2200x (Dog(x) \u2192 Sleep(x))\n\u2203x \u2203y (FourLegged(x) \u2227 Animal(x) \u2227 Dog(x) \u2227 FourLegged(y) \u2227 Animal(y) \u2227 Dog(y) \u2227 \u00ac(x=y))", "conclusion": "Some four-legged animals sleep.", "conclusion-FOL": "\u2203x \u2203y (FourLegged(x) \u2227 Animal(x) \u2227 Sleeps(x) \u2227 FourLegged(y) \u2227 Animal(y) \u2227 Sleeps(y) \u2227 \u00ac(x=y))", "label": "True", "example_id": 737}
{"story_id": 475, "premises": "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. \nAll PRC nationals are entitled to national social insurance coverage.\nEveryone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. \nAll French nationals are citizens of the European Union. \nAll Spanish nationals are citizens of the European Union. \nNo North Korean nationals are citizens of the European Union. \nMei is at the Franco-China diplomatic conference. \nEither Mei is a North Korean and can have medical bills partially covered, or neither is true.", "premises-FOL": "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))\n\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))\n\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))\n\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))", "conclusion": "Mei is a PRC national.", "conclusion-FOL": "PRCNational(mei)", "label": "Uncertain", "example_id": 1378}
{"story_id": 475, "premises": "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. \nAll PRC nationals are entitled to national social insurance coverage.\nEveryone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. \nAll French nationals are citizens of the European Union. \nAll Spanish nationals are citizens of the European Union. \nNo North Korean nationals are citizens of the European Union. \nMei is at the Franco-China diplomatic conference. \nEither Mei is a North Korean and can have medical bills partially covered, or neither is true.", "premises-FOL": "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))\n\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))\n\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))\n\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))", "conclusion": "Mei is not a PRC national.", "conclusion-FOL": "\u00acPRCNational(mei)", "label": "Uncertain", "example_id": 1379}
{"story_id": 475, "premises": "Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. \nAll PRC nationals are entitled to national social insurance coverage.\nEveryone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. \nAll French nationals are citizens of the European Union. \nAll Spanish nationals are citizens of the European Union. \nNo North Korean nationals are citizens of the European Union. \nMei is at the Franco-China diplomatic conference. \nEither Mei is a North Korean and can have medical bills partially covered, or neither is true.", "premises-FOL": "\u2200x (EntitledTo(x, nationalSocialInsuranceCoverage) \u2192 CanHavePartiallyCovered(x, medicalBills))\n\u2200x (PRCNational(x) \u2192 EntitledTo(x, nationalSocialInsuranceCoverage))\n\u2200x (In(x, franco-ChinaDiplomaticConference) \u2192 PRCNational(x) \u2295 FrenchNational(x))\n\u2200x (FrenchNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (SpanishNational(x) \u2192 CitizenOf(x, europeanUnion))\n\u2200x (NorthKoreanNational(x) \u2192 \u00acCitizenOf(x, europeanUnion))\nIn(mei, franco-ChinaDiplomaticConference)\n\u00ac(NorthKoreanNational(mei) \u2295 CanHavePartiallyCovered(mei, medicalBills))", "conclusion": "If Mei is either a North Korean or a Spanish national, then Mei is either both a French national and a citizen of the European Union, or neither a French national nor a citizen of the European Union.", "conclusion-FOL": "NorthKoreanNational(mei) \u2295 SpanishNational(mei) \u2192 \u00ac(FrenchNational(mei) \u2295 European(mei))", "label": "True", "example_id": 1380}
{"story_id": 268, "premises": "No people who do not admit a mistake are good teachers.\nSome well-informed people are people who do not admit a mistake.", "premises-FOL": "\u2200x (\u00acAdmit(x, mistake) \u2192 \u00acGoodTeacher(x))\n\u2203x \u2203y (WellInformed(x) \u2227 WellInformed(y) \u2227 \u00acAdmit(x, mistake) \u2227 \u00acAdmit(y, mistake) \u2227 \u00ac(x=y))", "conclusion": "Some good teachers are not well-informed people.", "conclusion-FOL": "\u2203x \u2203y (GoodTeacher(x) \u2227 GoodTeacher(y) \u2227 \u00acWellInformed(x) \u2227 \u00acWellInformed(y) \u2227 \u00ac(x=y))", "label": "Uncertain", "example_id": 712}
{"story_id": 25, "premises": "Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material.\nMort is not a Stamp catalog.\nMort is not a periodical, auction catalog, bibliography, or background material.\nMort is a piece of Philatelic literature.", "premises-FOL": "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))\n\u00acStamp(mort)\n\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))\nPhilatelicLit(mort)", "conclusion": "Mort is background material.", "conclusion-FOL": "Background(mort)", "label": "False", "example_id": 72}
{"story_id": 25, "premises": "Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material.\nMort is not a Stamp catalog.\nMort is not a periodical, auction catalog, bibliography, or background material.\nMort is a piece of Philatelic literature.", "premises-FOL": "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))\n\u00acStamp(mort)\n\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))\nPhilatelicLit(mort)", "conclusion": "Eragon is a piece of Philatelic literature.", "conclusion-FOL": "PhilatelicLit(eragon)", "label": "Uncertain", "example_id": 73}
{"story_id": 92, "premises": "Adventures of Rusty is a drama film and children's film.\nColumbia Pictures produced Adventures of Rusty.\nTintin was produced by Paramount.\nTintin is an adventure film.", "premises-FOL": "DramaFilm(adventuresOfRusty) \u2227 ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)", "conclusion": "Columbia pictures produced some drama film.", "conclusion-FOL": "\u2203x (DramaFilm(x) \u2227 Produces(columbiaPictures, x))", "label": "True", "example_id": 279}
{"story_id": 92, "premises": "Adventures of Rusty is a drama film and children's film.\nColumbia Pictures produced Adventures of Rusty.\nTintin was produced by Paramount.\nTintin is an adventure film.", "premises-FOL": "DramaFilm(adventuresOfRusty) \u2227 ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)", "conclusion": "Columbia pictures produced some adventure film.", "conclusion-FOL": "\u2203x (AdventureFilm(x) \u2227 Produces(columbiaPictures, x))", "label": "Uncertain", "example_id": 280}
{"story_id": 92, "premises": "Adventures of Rusty is a drama film and children's film.\nColumbia Pictures produced Adventures of Rusty.\nTintin was produced by Paramount.\nTintin is an adventure film.", "premises-FOL": "DramaFilm(adventuresOfRusty) \u2227 ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)", "conclusion": "Paramount produces children's films.", "conclusion-FOL": "\u2203x (ChildrensFilm(x) \u2227 Produces(paramount, x))", "label": "Uncertain", "example_id": 281}
{"story_id": 92, "premises": "Adventures of Rusty is a drama film and children's film.\nColumbia Pictures produced Adventures of Rusty.\nTintin was produced by Paramount.\nTintin is an adventure film.", "premises-FOL": "DramaFilm(adventuresOfRusty) \u2227 ChildrensFilm(adventuresOfRusty)\nProduces(columbiaPictures, adventuresOfRusty)\nProduces(paramount, tintin)\nAdventureFilm(tintin)", "conclusion": "Paramount produces adventure films.", "conclusion-FOL": "\u2203x (AdventureFilm(x) \u2227 Produces(paramount, x))", "label": "True", "example_id": 282}
{"story_id": 233, "premises": "Deng Xiaoping served as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward.\nMao Zedong died in 1976.\nAfter Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "premises-FOL": "ParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) \u2227 PraisedFor(dengXiaoping, reversionOfHongKong) \u2227 PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) \u2227 Under(dengXiaoping, mao) \u2227 VicePremierInThe1950s(dengXiaoping) \u2227 PresidedOver(dengXiaoping, antiRightistCampaign) \u2227 LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) \u2227 Following(chinasEconomicReconstruction, greatLeapForward) \u2227 Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)", "conclusion": "The paramount leader of the PRC was also the vice premier.", "conclusion-FOL": "\u2203x (ParamountLeaderOf(x, prc) \u2227 VicePremier(x))", "label": "True", "example_id": 660}
{"story_id": 233, "premises": "Deng Xiaoping served as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward.\nMao Zedong died in 1976.\nAfter Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "premises-FOL": "ParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) \u2227 PraisedFor(dengXiaoping, reversionOfHongKong) \u2227 PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) \u2227 Under(dengXiaoping, mao) \u2227 VicePremierInThe1950s(dengXiaoping) \u2227 PresidedOver(dengXiaoping, antiRightistCampaign) \u2227 LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) \u2227 Following(chinasEconomicReconstruction, greatLeapForward) \u2227 Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)", "conclusion": "Deng Xiaoping presided over something launched by someone he was under.", "conclusion-FOL": "\u2203x \u2203y (PresidedOver(dengxiaoping, x) \u2227 Under(dengxiaoping, y) \u2227 LaunchedBy(x, y))", "label": "True", "example_id": 661}
{"story_id": 233, "premises": "Deng Xiaoping served as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward.\nMao Zedong died in 1976.\nAfter Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "premises-FOL": "ParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) \u2227 PraisedFor(dengXiaoping, reversionOfHongKong) \u2227 PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) \u2227 Under(dengXiaoping, mao) \u2227 VicePremierInThe1950s(dengXiaoping) \u2227 PresidedOver(dengXiaoping, antiRightistCampaign) \u2227 LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) \u2227 Following(chinasEconomicReconstruction, greatLeapForward) \u2227 Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)", "conclusion": "The person instrumental in china's economic reconstruction gradually rose to supreme power.", "conclusion-FOL": "\u2203x (InstrumentalIn(x, chinaseconomicreconstruction) \u2227 GraduallyRoseTo(x, supremepower))", "label": "True", "example_id": 662}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "Dune is realistic fiction.", "conclusion-FOL": "RealisticFiction(dune)", "label": "Uncertain", "example_id": 1047}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "Dune is a result of creative and imaginative process.", "conclusion-FOL": "ResultOf(dune, creativeProcess) \u2227 ImaginativeProcess(dune)", "label": "True", "example_id": 1048}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "Dune is either a result of creative processes or came from an imaginative process.", "conclusion-FOL": "ResultOf(dune, creativeProcess) \u2295 ImaginativeProcess(dune)", "label": "False", "example_id": 1049}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "Dune is a result of creative processes and is science fiction.", "conclusion-FOL": "ResultOf(dune, creativeProcess) \u2227 ScienceFiction(dune))", "label": "True", "example_id": 1050}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "Dune is either a result of creative processes or is science fiction.", "conclusion-FOL": "Knows(dan, dune) \u2227 (ResultOf(dune, creativeProcess)  \u2295 ScienceFiction(dune))", "label": "False", "example_id": 1051}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "If Dune is a result of creative and imaginative processes, then Dune is not a result of creative processes and science-fiction.", "conclusion-FOL": "(ResultOf(dune, creativeProcess)  \u2227 ImaginativeProcess(dune)) \u2192 (\u00acResultOf(dune, creativeProcess) \u2227 \u00acScienceFiction(dune))", "label": "False", "example_id": 1052}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "If Dune is either a fact and a result of creative processes, or neither a fact nor a result of creative processes, then Dune is a result of creative processes and science-fiction.", "conclusion-FOL": "Knows(dan, dune) \u2227 (\u00ac(Fact(dune) \u2295 ResultOf(dune, creativeProcess))) \u2192 (ResultOf(dune, creativeProcess) \u2227 ScienceFiction(dune))", "label": "True", "example_id": 1053}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "If Dune is science-fiction, then Dune is not a result of creative processes and science-fiction.", "conclusion-FOL": "Knows(dan, dune) \u2227 (ScienceFiction(dune)) \u2192 (\u00ac(ResultOf(dune, creativeProcess)  \u2227 ScienceFiction(dune)))", "label": "False", "example_id": 1054}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "If Dune is not a result of creative processes and science-fiction, then Dune neither came from an imaginative process nor proved to be false.", "conclusion-FOL": "Knows(dan, dune) \u2227 (\u00ac(ResultOf(dune, creativeProcess)  \u2227 ScienceFiction(dune))) \u2192 (\u00ac(ImaginativeProcess(dune) \u2228 ProvedToBe(dune, false)))", "label": "True", "example_id": 1055}
{"story_id": 391, "premises": "All imaginative processes that Dan knows are results of creative processes.\nAll science fiction that Dan knows comes from an imaginative process.\nEverthing that Dan knows comes from either science-fiction or realistic fiction.\nNo facts that Dan knows have proven to be false.\nDan knows that Dune is science fiction or has proven to be false.", "premises-FOL": "\u2200x ((Knows(dan, x) \u2227 ImaginativeProcess(x)) \u2192 ResultOf(x, creativeProcess))\n\u2200x ((Knows(dan, x) \u2227 ScienceFiction(x)) \u2192 ImaginativeProcess(x)) \n\u2200x (Knows(dan, x) \u2192 (ScienceFiction(x) \u2295 RealisticFiction(x)))\n\u2200x ((Knows(dan, x) \u2227 Fact(x)) \u2192 \u00acProvedToBe(x, false)) \n(Knows(dan, dune) \u2227 ScienceFiction(dune)) \u2228 ProvedToBe(dune, false))", "conclusion": "If Dune is did not come from imaginative process and is not science-fiction, then Dune is neither a result of creative processes nor came from an imaginative process.", "conclusion-FOL": "Knows(dan, dune) \u2227 (\u00ac(ImaginativeProcess(dune) \u2227 ScienceFiction(dune))) \u2192 (\u00ac(ResultOf(dune, creativeProcess)  \u2228 ImaginativeProcess(dune)))", "label": "True", "example_id": 1056}
{"story_id": 181, "premises": "American superheroes come from either the DC Universe or Marvel Universe.\nCaptain America is one of America's top-ten favorite superheroes\nCaptain America does not come from the DC Universe.\nAmerica's top-ten favorite superheroes speak English.\nSome superheroes speak both English and Spanish. ", "premises-FOL": "\u2200x (Superhero(x) \u2227 American(x) \u2192 ComeFrom(x, dCUniverse) \u2295 ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) \u2227 TopTenFavorite(captainAmerica) \u2227 Superhero(captainAmerica) \n\u00acComeFrom(captainAmerica, dCUniverse)\n\u2200x (American(x) \u2227 TopTenFavorite(x) \u2227 Superhero(x)  \u2192 Speak(x, english)) \n\u2203x (Superhero(x) \u2192 (Speak(x, english) \u2227 Speak(x, spanish)))", "conclusion": "Captain America does not speak English.", "conclusion-FOL": "\u00acSpeak(captainAmerica, english)", "label": "False", "example_id": 521}
{"story_id": 181, "premises": "American superheroes come from either the DC Universe or Marvel Universe.\nCaptain America is one of America's top-ten favorite superheroes\nCaptain America does not come from the DC Universe.\nAmerica's top-ten favorite superheroes speak English.\nSome superheroes speak both English and Spanish. ", "premises-FOL": "\u2200x (Superhero(x) \u2227 American(x) \u2192 ComeFrom(x, dCUniverse) \u2295 ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) \u2227 TopTenFavorite(captainAmerica) \u2227 Superhero(captainAmerica) \n\u00acComeFrom(captainAmerica, dCUniverse)\n\u2200x (American(x) \u2227 TopTenFavorite(x) \u2227 Superhero(x)  \u2192 Speak(x, english)) \n\u2203x (Superhero(x) \u2192 (Speak(x, english) \u2227 Speak(x, spanish)))", "conclusion": "Captain America comes from the Marvel universe.", "conclusion-FOL": "ComeFrom(captainAmerica, marvelUniverse)", "label": "True", "example_id": 522}
{"story_id": 181, "premises": "American superheroes come from either the DC Universe or Marvel Universe.\nCaptain America is one of America's top-ten favorite superheroes\nCaptain America does not come from the DC Universe.\nAmerica's top-ten favorite superheroes speak English.\nSome superheroes speak both English and Spanish. ", "premises-FOL": "\u2200x (Superhero(x) \u2227 American(x) \u2192 ComeFrom(x, dCUniverse) \u2295 ComeFrom(x, marvelUniverse)) \nAmerican(captainAmerica) \u2227 TopTenFavorite(captainAmerica) \u2227 Superhero(captainAmerica) \n\u00acComeFrom(captainAmerica, dCUniverse)\n\u2200x (American(x) \u2227 TopTenFavorite(x) \u2227 Superhero(x)  \u2192 Speak(x, english)) \n\u2203x (Superhero(x) \u2192 (Speak(x, english) \u2227 Speak(x, spanish)))", "conclusion": "Captain America speaks Spanish.", "conclusion-FOL": "Speak(captainAmerica, spanish)", "label": "Uncertain", "example_id": 523}
{"story_id": 75, "premises": "Robert Zimmer was a philosopher born in Germany.\nRobert Zimmer is an essayist.\nRobert Zimmer was born in 1953.\nEvery essayist is a writer.", "premises-FOL": "BornIn(robertZimmer, germany) \u2227 Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n\u2200x (Essayist(x) \u2192 Writer(x))", "conclusion": "Robert Zimmer is German.", "conclusion-FOL": "BornIn(robertZimmer, germany)", "label": "Uncertain", "example_id": 228}
{"story_id": 75, "premises": "Robert Zimmer was a philosopher born in Germany.\nRobert Zimmer is an essayist.\nRobert Zimmer was born in 1953.\nEvery essayist is a writer.", "premises-FOL": "BornIn(robertZimmer, germany) \u2227 Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n\u2200x (Essayist(x) \u2192 Writer(x))", "conclusion": "Robert Zimmer is not a writer.", "conclusion-FOL": "\u00acWriter(robertZimmer)", "label": "False", "example_id": 229}
{"story_id": 75, "premises": "Robert Zimmer was a philosopher born in Germany.\nRobert Zimmer is an essayist.\nRobert Zimmer was born in 1953.\nEvery essayist is a writer.", "premises-FOL": "BornIn(robertZimmer, germany) \u2227 Philosopher(robertZimmer)\nEssayist(robertZimmer)\nBornIn(robertZimmer, yr1953)\n\u2200x (Essayist(x) \u2192 Writer(x))", "conclusion": "Robert Zimmer is a biographer.", "conclusion-FOL": "Biographer(robertZimmer)", "label": "Uncertain", "example_id": 230}
{"story_id": 250, "premises": "All people who repay their loans on time have a high credit score.\nSome people with high credit scores and high salaries are approved for mortgages.\nJohn has a high salary.", "premises-FOL": "\u2200x (RepayOnTime(x) \u2192 Has(x, highCreditScore))\n\u2203x ((Has(x, highCreditScore) \u2227 Has(x, highSalary)) \u2192 ApprovedFor(x, mortgage))\nHas(john, highSalary)", "conclusion": "If John repays his loans on time, he will be approved for a mortgage.", "conclusion-FOL": "RepayOnTime(john) \u2192 ApprovedFor(john, mortgage)", "label": "Uncertain", "example_id": 694}
{"story_id": 344, "premises": "All students are members of the university.\nAll graduate students are students.\nAll PhD students are graduate students.\nSome PhD students are Teaching Fellows.\nIf John is not a PhD student, then he is not a member of the university.\nIf John is a Teaching Fellow, then he is a PhD student or a graduate student.", "premises-FOL": "\u2200x (Student(x) \u2192 MemberOf(x, university))\n\u2200x (GraduateStudent(x) \u2192 Student(x))\n\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))\n\u2203x (PhDStudent(x) \u2227 TeachingFellow(x))\n\u00acPhDStudent(john) \u2192 \u00acMemberOf(john, university)\nTeachingFellow(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)", "conclusion": "John is a Teaching Fellow", "conclusion-FOL": "TF(john)", "label": "False", "example_id": 907}
{"story_id": 344, "premises": "All students are members of the university.\nAll graduate students are students.\nAll PhD students are graduate students.\nSome PhD students are Teaching Fellows.\nIf John is not a PhD student, then he is not a member of the university.\nIf John is a Teaching Fellow, then he is a PhD student or a graduate student.", "premises-FOL": "\u2200x (Student(x) \u2192 MemberOf(x, university))\n\u2200x (GraduateStudent(x) \u2192 Student(x))\n\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))\n\u2203x (PhDStudent(x) \u2227 TeachingFellow(x))\n\u00acPhDStudent(john) \u2192 \u00acMemberOf(john, university)\nTeachingFellow(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)", "conclusion": "John is not a Teaching Fellow.", "conclusion-FOL": "\u00acTF(john)", "label": "True", "example_id": 908}
{"story_id": 344, "premises": "All students are members of the university.\nAll graduate students are students.\nAll PhD students are graduate students.\nSome PhD students are Teaching Fellows.\nIf John is not a PhD student, then he is not a member of the university.\nIf John is a Teaching Fellow, then he is a PhD student or a graduate student.", "premises-FOL": "\u2200x (Student(x) \u2192 MemberOf(x, university))\n\u2200x (GraduateStudent(x) \u2192 Student(x))\n\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))\n\u2203x (PhDStudent(x) \u2227 TeachingFellow(x))\n\u00acPhDStudent(john) \u2192 \u00acMemberOf(john, university)\nTeachingFellow(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)", "conclusion": "John is a PhD student.", "conclusion-FOL": "PhDStudent(john)", "label": "Uncertain", "example_id": 909}
{"story_id": 165, "premises": "Belgium, France, and Germany are European countries.\nParis is the capital of France.\nThe Eiffel Tower is one of the main tourist attractions located in Paris.\nSome people who live in Belgium speak French.\nIf John goes to Europe, he will see some tourist attractions.\nJohn speaks French.", "premises-FOL": "EuropeanCountry(belgium) \u2227 EuropeanCountry(france) \u2227 EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)\n\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))\n\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))\nSpeak(john, french)", "conclusion": "If John goes to Europe, he will see the Eiffel Tower.", "conclusion-FOL": "GoTo(john, europe) \u2192 See(john, eiffelTower)", "label": "Uncertain", "example_id": 473}
{"story_id": 165, "premises": "Belgium, France, and Germany are European countries.\nParis is the capital of France.\nThe Eiffel Tower is one of the main tourist attractions located in Paris.\nSome people who live in Belgium speak French.\nIf John goes to Europe, he will see some tourist attractions.\nJohn speaks French.", "premises-FOL": "EuropeanCountry(belgium) \u2227 EuropeanCountry(france) \u2227 EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)\n\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))\n\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))\nSpeak(john, french)", "conclusion": "The Eiffel Tower is located in the capital of France.", "conclusion-FOL": "\u2203x (CapitalOf(x, france) \u2227 LocatedIn(eiffelTower, x))", "label": "True", "example_id": 474}
{"story_id": 165, "premises": "Belgium, France, and Germany are European countries.\nParis is the capital of France.\nThe Eiffel Tower is one of the main tourist attractions located in Paris.\nSome people who live in Belgium speak French.\nIf John goes to Europe, he will see some tourist attractions.\nJohn speaks French.", "premises-FOL": "EuropeanCountry(belgium) \u2227 EuropeanCountry(france) \u2227 EuropeanCountry(germany)\nCapitalOf(paris, france)\nTouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)\n\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))\n\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))\nSpeak(john, french)", "conclusion": "John lives in Belgium.", "conclusion-FOL": "LiveIn(john, belgium)", "label": "Uncertain", "example_id": 475}
{"story_id": 342, "premises": "All sports cars are loud.\nNo loud cars are electric.\nIf a car is a Ferrari, then it is a sports car.\nAll cars made in Maranello are Ferraris.\nThe Toyota Prius is made in Maranello or is a loud car, or both.", "premises-FOL": "\u2200x (SportsCar(x) \u2192 LoudCar(x))\n\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))\n\u2200x (Ferrari(x) \u2192 SportsCar(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Ferrari(x))\n(Car(toyotaPrius) \u2227 MadeIn(toyotaPrius, maranello)) \u2228 LoudCar(toyotaPrius)", "conclusion": "Prius is an electric car.", "conclusion-FOL": "ElectricCar(toyotaPrius)", "label": "False", "example_id": 900}
{"story_id": 342, "premises": "All sports cars are loud.\nNo loud cars are electric.\nIf a car is a Ferrari, then it is a sports car.\nAll cars made in Maranello are Ferraris.\nThe Toyota Prius is made in Maranello or is a loud car, or both.", "premises-FOL": "\u2200x (SportsCar(x) \u2192 LoudCar(x))\n\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))\n\u2200x (Ferrari(x) \u2192 SportsCar(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Ferrari(x))\n(Car(toyotaPrius) \u2227 MadeIn(toyotaPrius, maranello)) \u2228 LoudCar(toyotaPrius)", "conclusion": "The Toyota Prius is not an electric car.", "conclusion-FOL": "\u00acElectricCar(toyotaPrius)", "label": "True", "example_id": 901}
{"story_id": 342, "premises": "All sports cars are loud.\nNo loud cars are electric.\nIf a car is a Ferrari, then it is a sports car.\nAll cars made in Maranello are Ferraris.\nThe Toyota Prius is made in Maranello or is a loud car, or both.", "premises-FOL": "\u2200x (SportsCar(x) \u2192 LoudCar(x))\n\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))\n\u2200x (Ferrari(x) \u2192 SportsCar(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Ferrari(x))\n(Car(toyotaPrius) \u2227 MadeIn(toyotaPrius, maranello)) \u2228 LoudCar(toyotaPrius)", "conclusion": "The Toyota Prius is a equipped with a Ferrari V12 engine.", "conclusion-FOL": "MadeIn(toyotaPrius, maranello)", "label": "Uncertain", "example_id": 902}
{"story_id": 342, "premises": "All sports cars are loud.\nNo loud cars are electric.\nIf a car is a Ferrari, then it is a sports car.\nAll cars made in Maranello are Ferraris.\nThe Toyota Prius is made in Maranello or is a loud car, or both.", "premises-FOL": "\u2200x (SportsCar(x) \u2192 LoudCar(x))\n\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))\n\u2200x (Ferrari(x) \u2192 SportsCar(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Ferrari(x))\n(Car(toyotaPrius) \u2227 MadeIn(toyotaPrius, maranello)) \u2228 LoudCar(toyotaPrius)", "conclusion": "If The Toyota Prius is a Ferrari or a loud car, then The Toyota Prius is an electric car.", "conclusion-FOL": "Ferrari(toyotaPrius) \u2228 LoudCar(toyotaPrius) \u2192 ElectricCar(toyotaPrius)", "label": "False", "example_id": 903}
{"story_id": 446, "premises": "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. \nAll flowers are plants.\nEvery kitten is a cute animal.\nIf something is grown in a garden, then it is a flower.\nPiper is a kitten or a cute animal.", "premises-FOL": "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u2200x (Kitten(x) \u2192 CuteAnimal(x))\n\u2200x (GrownIn(x, garden) \u2192 Flower(x))\nKitten(piper) \u2228 CuteAnimal(piper)", "conclusion": "Piper was grown in a garden.", "conclusion-FOL": "GrownIn(piper, garden)", "label": "False", "example_id": 1283}
{"story_id": 446, "premises": "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. \nAll flowers are plants.\nEvery kitten is a cute animal.\nIf something is grown in a garden, then it is a flower.\nPiper is a kitten or a cute animal.", "premises-FOL": "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u2200x (Kitten(x) \u2192 CuteAnimal(x))\n\u2200x (GrownIn(x, garden) \u2192 Flower(x))\nKitten(piper) \u2228 CuteAnimal(piper)", "conclusion": "Piper was not grown in a garden.", "conclusion-FOL": "\u00acGrownIn(piper, garden)", "label": "True", "example_id": 1284}
{"story_id": 446, "premises": "If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. \nAll flowers are plants.\nEvery kitten is a cute animal.\nIf something is grown in a garden, then it is a flower.\nPiper is a kitten or a cute animal.", "premises-FOL": "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u2200x (Kitten(x) \u2192 CuteAnimal(x))\n\u2200x (GrownIn(x, garden) \u2192 Flower(x))\nKitten(piper) \u2228 CuteAnimal(piper)", "conclusion": "Piper is a kitten.", "conclusion-FOL": "Kitten(piper)", "label": "Uncertain", "example_id": 1285}
{"story_id": 149, "premises": "\nGuam sent an athlete to the Calgary Winter Olympics.\nIf Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.\nJudd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.", "premises-FOL": "\n\u2203x (Send(guam, athlete, calgaryWinterOlympics))\n\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))\n\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)", "conclusion": "Judd Bankert competed in the 1988 Winter Olympics.", "conclusion-FOL": "ParticipatedIn(juddBankert, winterOlympics, year1988)", "label": "True", "example_id": 435}
{"story_id": 149, "premises": "\nGuam sent an athlete to the Calgary Winter Olympics.\nIf Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988.\nJudd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.", "premises-FOL": "\n\u2203x (Send(guam, athlete, calgaryWinterOlympics))\n\u2200x (Athlete(x) \u2227 SendTo(guam, x, calgaryWinterOlympics) \u2192 ParticipatedIn(x, winterOlympics, year1988))\n\u2200x \u2200y (Athlete(x) \u2227 From(x, guam) \u2227 ParticipatedIn(x, winterOlympics, y) \u2192 x=juddBankert)", "conclusion": "Guam has participated in the Summer Olympics at least once.", "conclusion-FOL": "\u2203x (ParticipatedIn(guam, summerOlympics, x))", "label": "Uncertain", "example_id": 436}
{"story_id": 70, "premises": "Michael O'Donnell is a British physician, journalist, author, and broadcaster.\nOne of the word-setters of My Word! was Michael O'Donnell.\nThe magazine World Medicine was edited by Michael O'Donnell.\nMichael O'Donnell was born in Yorkshire as the son of a general practitioner.", "premises-FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))", "conclusion": "The son of a general practitioner was a word-setter of My Word!.", "conclusion-FOL": "\u2203x \u2203y (SonOf(x, y) \u2227 GeneralPractitioner(y) \u2227 WordSetter(x))", "label": "True", "example_id": 208}
{"story_id": 70, "premises": "Michael O'Donnell is a British physician, journalist, author, and broadcaster.\nOne of the word-setters of My Word! was Michael O'Donnell.\nThe magazine World Medicine was edited by Michael O'Donnell.\nMichael O'Donnell was born in Yorkshire as the son of a general practitioner.", "premises-FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))", "conclusion": "World Medicine is not a magazine.", "conclusion-FOL": "\u00acMagazine(worldmedicine)", "label": "False", "example_id": 209}
{"story_id": 70, "premises": "Michael O'Donnell is a British physician, journalist, author, and broadcaster.\nOne of the word-setters of My Word! was Michael O'Donnell.\nThe magazine World Medicine was edited by Michael O'Donnell.\nMichael O'Donnell was born in Yorkshire as the son of a general practitioner.", "premises-FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))", "conclusion": "There are no British authors.", "conclusion-FOL": "\u2200x (British(x) \u2192 \u00acAuthor(x))", "label": "False", "example_id": 210}
{"story_id": 70, "premises": "Michael O'Donnell is a British physician, journalist, author, and broadcaster.\nOne of the word-setters of My Word! was Michael O'Donnell.\nThe magazine World Medicine was edited by Michael O'Donnell.\nMichael O'Donnell was born in Yorkshire as the son of a general practitioner.", "premises-FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))", "conclusion": "There are no journalists that were born in Yorkshire.", "conclusion-FOL": "\u2200x (Journalist(x) \u2192 \u00acBornIn(x, yorkshire))", "label": "False", "example_id": 211}
{"story_id": 70, "premises": "Michael O'Donnell is a British physician, journalist, author, and broadcaster.\nOne of the word-setters of My Word! was Michael O'Donnell.\nThe magazine World Medicine was edited by Michael O'Donnell.\nMichael O'Donnell was born in Yorkshire as the son of a general practitioner.", "premises-FOL": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)\nWordSetter(michael)\nMagazine(worldMedicine) \u2227 EditedBy(worldMedicine, michael)\nBornIn(michael, yorkshire) \u2227 \u2203x(SonOf(michael, x) \u2227 GeneralPractitioner(x))", "conclusion": "There is a son of a general practitioner that is not an author.", "conclusion-FOL": "\u2203x \u2203y (Son(x, y) \u2227 GeneralPractitioner(y) \u2227 \u00acAuthor(x))", "label": "Uncertain", "example_id": 212}
{"story_id": 255, "premises": "No homework is fun.\nSome reading is homework.", "premises-FOL": "\u2200x (Homework(x) \u2192 \u00acFun(x))\n\u2203x (Reading(x) \u2227 Homework(x))", "conclusion": "Some reading is fun.", "conclusion-FOL": "\u2203x (Reading(x) \u2227 Fun(x))", "label": "Uncertain", "example_id": 699}
{"story_id": 298, "premises": "The handbrake of a car is either up or down.\nThe handbrake is down when a car is parked.", "premises-FOL": "\u2200x \u2200y (HandbrakeOf(x, y) \u2227 Car(y) \u2192 Up(x) \u2295 Down(x))\n\u2200x \u2200y (HandbrakeOf(x, y) \u2227 Parked(y) \u2227 Car(y) \u2192 Down(x))", "conclusion": "The handbrake is up when some cars are parked.", "conclusion-FOL": "\u2203x \u2203y (HandbrakeOf(x, y) \u2227 Parked(y) \u2227 Car(y) \u2227 Up(x))", "label": "False", "example_id": 742}
{"story_id": 382, "premises": "All people in this midwest town who own horse ranches regularly ride horses for pleasure and sport.\nAll people in this midwest town with a lot of disposable income have a horse ranch.\nIf people in this midwest town compete in horse dressage shows, then they have a lot of disposable income.\nIf people in this midwest town compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.\nIf people in this midwest town regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.\nManny is in this midwest town, and she either has a horse ranch and lives in a cramped residential building, or she does neither.", "premises-FOL": "\u2200x (InThisMidwestTown(x) \u2227 Have(x, horseRanch) \u2192 RegularlyRideHorseForPleasure(x))\n\u2200x (InThisMidwestTown(x) \u2227 Have(x, disposableIncome) \u2192 Have(x, horseRank))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 Have(x, disposableIncome))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 InvestedIn(x, equestrianGearAndEquipment))\n\u2200x (InThisMidwestTown(x) \u2227 RegularlyRideHorseForPleasure(x) \u2192 \u00acLiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) \u2227 \u00ac(Have(manny, horseRanch) \u2295 LiveIn(manny, crampedBuilding))", "conclusion": "Manny regularly rides horses for pleasure and sport.", "conclusion-FOL": "RegularlyRideHorsesForPleasure(manny)", "label": "Uncertain", "example_id": 1020}
{"story_id": 382, "premises": "All people in this midwest town who own horse ranches regularly ride horses for pleasure and sport.\nAll people in this midwest town with a lot of disposable income have a horse ranch.\nIf people in this midwest town compete in horse dressage shows, then they have a lot of disposable income.\nIf people in this midwest town compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.\nIf people in this midwest town regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.\nManny is in this midwest town, and she either has a horse ranch and lives in a cramped residential building, or she does neither.", "premises-FOL": "\u2200x (InThisMidwestTown(x) \u2227 Have(x, horseRanch) \u2192 RegularlyRideHorseForPleasure(x))\n\u2200x (InThisMidwestTown(x) \u2227 Have(x, disposableIncome) \u2192 Have(x, horseRank))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 Have(x, disposableIncome))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 InvestedIn(x, equestrianGearAndEquipment))\n\u2200x (InThisMidwestTown(x) \u2227 RegularlyRideHorseForPleasure(x) \u2192 \u00acLiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) \u2227 \u00ac(Have(manny, horseRanch) \u2295 LiveIn(manny, crampedBuilding))", "conclusion": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.", "conclusion-FOL": "CompeteIn(manny, horseDressageShow) \u2227 InvestedIn(manny, equestrianGearAndEquipment)", "label": "False", "example_id": 1021}
{"story_id": 382, "premises": "All people in this midwest town who own horse ranches regularly ride horses for pleasure and sport.\nAll people in this midwest town with a lot of disposable income have a horse ranch.\nIf people in this midwest town compete in horse dressage shows, then they have a lot of disposable income.\nIf people in this midwest town compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.\nIf people in this midwest town regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.\nManny is in this midwest town, and she either has a horse ranch and lives in a cramped residential building, or she does neither.", "premises-FOL": "\u2200x (InThisMidwestTown(x) \u2227 Have(x, horseRanch) \u2192 RegularlyRideHorseForPleasure(x))\n\u2200x (InThisMidwestTown(x) \u2227 Have(x, disposableIncome) \u2192 Have(x, horseRank))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 Have(x, disposableIncome))\n\u2200x (InThisMidwestTown(x) \u2227 CompeteIn(x, horseDressageShow) \u2192 InvestedIn(x, equestrianGearAndEquipment))\n\u2200x (InThisMidwestTown(x) \u2227 RegularlyRideHorseForPleasure(x) \u2192 \u00acLiveIn(x, crampedBuilding))\nInThisMidwestTown(manny) \u2227 \u00ac(Have(manny, horseRanch) \u2295 LiveIn(manny, crampedBuilding))", "conclusion": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.", "conclusion-FOL": "\u00ac(HaveAHorseRanch(manny) \u2295 CompeteIn(manny, horseDressageShow)) \u2192 \u00acInvestedIn(manny, equestrianGearAndEquipment)", "label": "True", "example_id": 1022}
{"story_id": 54, "premises": "A roundel is a rounded artillery fortification.\nA roundel is not higher than adjacent walls. \nCannons can be deployed on artillery fortifications. \nRoundels are the oldest artillery fortifications.\nBattery towers are artillery fortifications.", "premises-FOL": "\u2200x (Roundel(x) \u2192 (Rounded(x) \u2227 ArtilleryFortification(x)))\n\u2200x \u2200y ((Roundel(x) \u2227 AdjacentWalls(x,y)) \u2192 \u00acHigher(x, y))\n\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))\n\u2200x \u2200y ((Roundel(x) \u2227 ArtilleryFortification(y)) \u2192 Older(x, y))\n\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))", "conclusion": "Cannons can be deployed on battery towers.", "conclusion-FOL": "\u2200x (BatteryTower(x) \u2192 DeployCannons(x))", "label": "True", "example_id": 158}
{"story_id": 54, "premises": "A roundel is a rounded artillery fortification.\nA roundel is not higher than adjacent walls. \nCannons can be deployed on artillery fortifications. \nRoundels are the oldest artillery fortifications.\nBattery towers are artillery fortifications.", "premises-FOL": "\u2200x (Roundel(x) \u2192 (Rounded(x) \u2227 ArtilleryFortification(x)))\n\u2200x \u2200y ((Roundel(x) \u2227 AdjacentWalls(x,y)) \u2192 \u00acHigher(x, y))\n\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))\n\u2200x \u2200y ((Roundel(x) \u2227 ArtilleryFortification(y)) \u2192 Older(x, y))\n\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))", "conclusion": "Roundels are older than battery towers.", "conclusion-FOL": "\u2200x \u2200y ((Roundel(x) \u2227 BatteryTower(y)) \u2192 Older(x, y))", "label": "True", "example_id": 159}
{"story_id": 54, "premises": "A roundel is a rounded artillery fortification.\nA roundel is not higher than adjacent walls. \nCannons can be deployed on artillery fortifications. \nRoundels are the oldest artillery fortifications.\nBattery towers are artillery fortifications.", "premises-FOL": "\u2200x (Roundel(x) \u2192 (Rounded(x) \u2227 ArtilleryFortification(x)))\n\u2200x \u2200y ((Roundel(x) \u2227 AdjacentWalls(x,y)) \u2192 \u00acHigher(x, y))\n\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))\n\u2200x \u2200y ((Roundel(x) \u2227 ArtilleryFortification(y)) \u2192 Older(x, y))\n\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))", "conclusion": "Battery towers are higher than adjacent walls.", "conclusion-FOL": "\u2200x \u2200y ((BatteryTower(x) \u2227 AdjacentWall(x,y)) \u2192 Higher(x, y))", "label": "Uncertain", "example_id": 160}
{"story_id": 54, "premises": "A roundel is a rounded artillery fortification.\nA roundel is not higher than adjacent walls. \nCannons can be deployed on artillery fortifications. \nRoundels are the oldest artillery fortifications.\nBattery towers are artillery fortifications.", "premises-FOL": "\u2200x (Roundel(x) \u2192 (Rounded(x) \u2227 ArtilleryFortification(x)))\n\u2200x \u2200y ((Roundel(x) \u2227 AdjacentWalls(x,y)) \u2192 \u00acHigher(x, y))\n\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))\n\u2200x \u2200y ((Roundel(x) \u2227 ArtilleryFortification(y)) \u2192 Older(x, y))\n\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))", "conclusion": "Cannons can be deployed on roundels.", "conclusion-FOL": "\u2200x (Roundel(x) \u2192 DeployCannons(x))", "label": "True", "example_id": 161}
{"story_id": 288, "premises": "Tissues are soft.\nSome papers are tissues.", "premises-FOL": "\u2200x (Tissue(x) \u2192 Soft(x))\n\u2203x \u2203y (Paper(x) \u2227 Paper(x) \u2227 Tissue(x) \u2227 Tissue(y) \u2227 \u00ac(x=y))", "conclusion": "Some papers are hard.", "conclusion-FOL": "\u2203x \u2203y (Paper(x) \u2227 Paper(y) \u2227 Hard(x) \u2227 Hard(y) \u2227 \u00ac(x=y))", "label": "Uncertain", "example_id": 732}
{"story_id": 169, "premises": "All volunteers receive intangible benefits for their work.\nVolunteers work regularly or on an as-needed basis.\nSome volunteers are trained.\nVolunteers work in groups or individually.\nEnvironmental volunteers contribute toward environmental management or conservation.\nParticipating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "premises-FOL": "\u2200x (Volunteer(x) \u2192 Receive(x, intangibleBenefit))\n\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2295 WorkAsNeeded(x))\n\u2203x (Volunteer(x) \u2192 Trained(x))\n\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))\n\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalManagement) \u2228 ContributeTo(x, environmentalConservation)))\n\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))", "conclusion": "Volunteers who participate in natural disaster response receive intangible benefits for their work.", "conclusion-FOL": "\u2200x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 Receive(x, intangibleBenefit))", "label": "True", "example_id": 485}
{"story_id": 169, "premises": "All volunteers receive intangible benefits for their work.\nVolunteers work regularly or on an as-needed basis.\nSome volunteers are trained.\nVolunteers work in groups or individually.\nEnvironmental volunteers contribute toward environmental management or conservation.\nParticipating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "premises-FOL": "\u2200x (Volunteer(x) \u2192 Receive(x, intangibleBenefit))\n\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2295 WorkAsNeeded(x))\n\u2203x (Volunteer(x) \u2192 Trained(x))\n\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))\n\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalManagement) \u2228 ContributeTo(x, environmentalConservation)))\n\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))", "conclusion": "Environmental volunteers work in groups.", "conclusion-FOL": "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 WorkInGroup(x))", "label": "Uncertain", "example_id": 486}
{"story_id": 169, "premises": "All volunteers receive intangible benefits for their work.\nVolunteers work regularly or on an as-needed basis.\nSome volunteers are trained.\nVolunteers work in groups or individually.\nEnvironmental volunteers contribute toward environmental management or conservation.\nParticipating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "premises-FOL": "\u2200x (Volunteer(x) \u2192 Receive(x, intangibleBenefit))\n\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2295 WorkAsNeeded(x))\n\u2203x (Volunteer(x) \u2192 Trained(x))\n\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))\n\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalManagement) \u2228 ContributeTo(x, environmentalConservation)))\n\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))", "conclusion": "To be a volunteer, you must be trained.", "conclusion-FOL": "\u2200x (Volunteer(x) \u2192 Trained(x))", "label": "Uncertain", "example_id": 487}
{"story_id": 376, "premises": "All people in this tech company who are consistent and enjoy sticking to their regular routines do not like surprises.\nPeople in this tech company who wear the same flannel shirts every day are consistent and enjoy sticking to their regular routines.\nPeople in this tech company who do not like shopping for clothes wear the same flannel shirts every day.\nOld people living in stable homes do not like surprises.\nPeople in this tech company who have very high energy and are impulsive like surprises.\nMike works in this tech company.\nIf Mike is not a person who wears the same flannel shirts every day, has very high energy, and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "premises-FOL": "\u2200x (InThisTechCompany(x) \u2227 Consistent(x) \u2227 StickTo(x, theirRegularRoutine) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2192 Consistent(x) \u2227 StickTo(x, theirRegularRoutine))\n\u2200x (InThisTechCompany(x) \u2227 \u00acLikeShoppingFor(x, clothes) \u2192 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)))\n\u2200x (InThisTechCompany(x) \u2227 Old(x) \u2227 LiveIn(x, stableHome) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 Have(x, highEnergy) \u2227 Impulsive(x) \u2192 \u00acLike(x, surprise))\nInThisTechCompany(mike)\n\u00ac(\u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2227 Have(mike, highEnergy) \u2227 Impulsive(mike)) \u2192 (Consistent(mike) \u2227 StickTo(mike, theirRegularRoutine)) \u2295 \u00acLike(mike, surprise)", "conclusion": "Mike is an old person living in a stable home.", "conclusion-FOL": "Old(mike) \u2227 LiveIn(mike, stableHome)", "label": "Uncertain", "example_id": 1002}
{"story_id": 376, "premises": "All people in this tech company who are consistent and enjoy sticking to their regular routines do not like surprises.\nPeople in this tech company who wear the same flannel shirts every day are consistent and enjoy sticking to their regular routines.\nPeople in this tech company who do not like shopping for clothes wear the same flannel shirts every day.\nOld people living in stable homes do not like surprises.\nPeople in this tech company who have very high energy and are impulsive like surprises.\nMike works in this tech company.\nIf Mike is not a person who wears the same flannel shirts every day, has very high energy, and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "premises-FOL": "\u2200x (InThisTechCompany(x) \u2227 Consistent(x) \u2227 StickTo(x, theirRegularRoutine) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2192 Consistent(x) \u2227 StickTo(x, theirRegularRoutine))\n\u2200x (InThisTechCompany(x) \u2227 \u00acLikeShoppingFor(x, clothes) \u2192 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)))\n\u2200x (InThisTechCompany(x) \u2227 Old(x) \u2227 LiveIn(x, stableHome) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 Have(x, highEnergy) \u2227 Impulsive(x) \u2192 \u00acLike(x, surprise))\nInThisTechCompany(mike)\n\u00ac(\u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2227 Have(mike, highEnergy) \u2227 Impulsive(mike)) \u2192 (Consistent(mike) \u2227 StickTo(mike, theirRegularRoutine)) \u2295 \u00acLike(mike, surprise)", "conclusion": "If Mike wears the same flannel shirts every day or does not like shopping for clothes, then Mike is neither an old person living in a stable home nor does he like shopping for clothes.", "conclusion-FOL": "(\u2203y (flannelShirt(y) \u2227 WearEveryday(mike, y)) \u2228 \u00acLikeShoppingFor(mike, clothes)) \u2192 \u00ac(Old(mike) \u2227 LiveIn(mike, stableHome)) \u2227 \u00acLikeShoppingFor(mike, clothes)", "label": "True", "example_id": 1003}
{"story_id": 376, "premises": "All people in this tech company who are consistent and enjoy sticking to their regular routines do not like surprises.\nPeople in this tech company who wear the same flannel shirts every day are consistent and enjoy sticking to their regular routines.\nPeople in this tech company who do not like shopping for clothes wear the same flannel shirts every day.\nOld people living in stable homes do not like surprises.\nPeople in this tech company who have very high energy and are impulsive like surprises.\nMike works in this tech company.\nIf Mike is not a person who wears the same flannel shirts every day, has very high energy, and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "premises-FOL": "\u2200x (InThisTechCompany(x) \u2227 Consistent(x) \u2227 StickTo(x, theirRegularRoutine) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2192 Consistent(x) \u2227 StickTo(x, theirRegularRoutine))\n\u2200x (InThisTechCompany(x) \u2227 \u00acLikeShoppingFor(x, clothes) \u2192 \u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)))\n\u2200x (InThisTechCompany(x) \u2227 Old(x) \u2227 LiveIn(x, stableHome) \u2192 \u00acLike(x, surprise))\n\u2200x (InThisTechCompany(x) \u2227 Have(x, highEnergy) \u2227 Impulsive(x) \u2192 \u00acLike(x, surprise))\nInThisTechCompany(mike)\n\u00ac(\u2203y (flannelShirt(y) \u2227 WearEveryday(x, y)) \u2227 Have(mike, highEnergy) \u2227 Impulsive(mike)) \u2192 (Consistent(mike) \u2227 StickTo(mike, theirRegularRoutine)) \u2295 \u00acLike(mike, surprise)", "conclusion": "If Mike is not an old person living in a stable home and does not like shopping for clothes, then Mike does not like shopping for clothes.", "conclusion-FOL": "\u00ac(Old(mike) \u2227 LiveIn(mike, stableHome)) \u2227 \u00acLikeShoppingFor(mike, clothes)) \u2192 \u00acLikeShoppingFor(mike, clothes)", "label": "False", "example_id": 1004}
{"story_id": 215, "premises": "Adam owns cars.\nAdam has a favorite car.\nAmong the cars he owns, Adam's favorite car is European.\nAdam broke his favorite car.", "premises-FOL": "\u2203x\u2203y (Car(x) \u2227 Car(y) \u2227 (x\u2260y) \u2227 Owns(adam, x)) \n\u2203x (Car(x) \u2227 Favorite(adam, x))\n\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))\n\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))", "conclusion": "Adam owns a Japanese car.", "conclusion-FOL": "\u2203x (Japanese(x) \u2227 Owns(adam, x))", "label": "Uncertain", "example_id": 615}
{"story_id": 215, "premises": "Adam owns cars.\nAdam has a favorite car.\nAmong the cars he owns, Adam's favorite car is European.\nAdam broke his favorite car.", "premises-FOL": "\u2203x\u2203y (Car(x) \u2227 Car(y) \u2227 (x\u2260y) \u2227 Owns(adam, x)) \n\u2203x (Car(x) \u2227 Favorite(adam, x))\n\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))\n\u2200x ((Car(x) \u2227 Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))", "conclusion": "Adam broke a European car.", "conclusion-FOL": "\u2203x (European(x) \u2227 Broke(adam, x))", "label": "True", "example_id": 616}
{"story_id": 433, "premises": "There are no buildings in New Haven higher than 400 meters. \nAll buildings managed by Yale Housing are in New Haven. \nAll Manhattan skyscrapers are higher than 400 meters. \nAll buildings owned by Bloomberg are in Manhattan. \nAll buildings with the Bloomberg logo are buildings owned by Bloomberg. \nTower A is neither a building in New Haven nor a skyscraper in Manhattan.\nTower B is a skyscraper building in Manhattan with a Bloomberg logo. ", "premises-FOL": "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))\n\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))\n\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))\nBuildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))\nBuildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)", "conclusion": "Tower A is higher than 400 meters.", "conclusion-FOL": "HigherThan(towerA, num400)", "label": "Uncertain", "example_id": 1235}
{"story_id": 433, "premises": "There are no buildings in New Haven higher than 400 meters. \nAll buildings managed by Yale Housing are in New Haven. \nAll Manhattan skyscrapers are higher than 400 meters. \nAll buildings owned by Bloomberg are in Manhattan. \nAll buildings with the Bloomberg logo are buildings owned by Bloomberg. \nTower A is neither a building in New Haven nor a skyscraper in Manhattan.\nTower B is a skyscraper building in Manhattan with a Bloomberg logo. ", "premises-FOL": "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))\n\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))\n\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))\nBuildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))\nBuildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)", "conclusion": "Tower A is not higher than 400 meters.", "conclusion-FOL": "\u00acHigherThan(towerA, num400)", "label": "Uncertain", "example_id": 1236}
{"story_id": 433, "premises": "There are no buildings in New Haven higher than 400 meters. \nAll buildings managed by Yale Housing are in New Haven. \nAll Manhattan skyscrapers are higher than 400 meters. \nAll buildings owned by Bloomberg are in Manhattan. \nAll buildings with the Bloomberg logo are buildings owned by Bloomberg. \nTower A is neither a building in New Haven nor a skyscraper in Manhattan.\nTower B is a skyscraper building in Manhattan with a Bloomberg logo. ", "premises-FOL": "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))\n\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))\n\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))\nBuildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))\nBuildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)", "conclusion": "Tower A is a building with the Bloomberg logo or it is managed by Yale Housing.", "conclusion-FOL": "HasLogo(towerB, bloomberg) \u2228 ManagedBy(x, yaleHousing)", "label": "False", "example_id": 1237}
{"story_id": 433, "premises": "There are no buildings in New Haven higher than 400 meters. \nAll buildings managed by Yale Housing are in New Haven. \nAll Manhattan skyscrapers are higher than 400 meters. \nAll buildings owned by Bloomberg are in Manhattan. \nAll buildings with the Bloomberg logo are buildings owned by Bloomberg. \nTower A is neither a building in New Haven nor a skyscraper in Manhattan.\nTower B is a skyscraper building in Manhattan with a Bloomberg logo. ", "premises-FOL": "\u2200x ((Buildings(x) \u2227 In(x, newHaven)) \u2192 \u00acHigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 In(x, newHaven))\n\u2200x ((Buildings(x) \u2227 Skyscraper(x) \u2227 In(x, manhattan)) \u2192 HigherThan(x, num400))\n\u2200x ((Buildings(x) \u2227 OwnedBy(x, bloomberg)) \u2192 Skyscraper(x) \u2227 In(x, manhattan))\n\u2200x ((Buildings(x) \u2227 HasLogo(x, bloomberg)) \u2192 OwnedBy(x, bloomberg))\nBuildings(towerA) \u2227 (\u00acInNewHaven(towerA)) \u2227 (\u00acManhattanSkyscraper(towerA))\nBuildings(towerB) \u2227 HasLogo(towerB, bloomberg) \u2227 Skyscraper(towerB) \u2227 In(towerB, manhattan)", "conclusion": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.", "conclusion-FOL": "\u00acHasLogo(towerB, bloomberg) \u2227 (\u00acManagedBy(x, yaleHousing))", "label": "True", "example_id": 1238}
{"story_id": 439, "premises": "No fish are birds.\nAn osprey is a bird.\nA carp is a fish.\nAll goldfish are carp.\nIf Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish.", "premises-FOL": "\u2200x (Fish(x) \u2192 \u00acBird(x))\n\u2200x (Osprey(x) \u2192 Bird(x))\n\u2200x (Carp(x) \u2192 Fish(x))\n\u2200x (Goldfish(x) \u2192 Carp(x))\nOsprey(bubbles) \u2295 Goldfish(bubbles) \u2192 \u00acFish(bubbles)", "conclusion": "Bubbles is an Osprey.", "conclusion-FOL": "Osprey(bubbles)", "label": "Uncertain", "example_id": 1261}
{"story_id": 439, "premises": "No fish are birds.\nAn osprey is a bird.\nA carp is a fish.\nAll goldfish are carp.\nIf Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish.", "premises-FOL": "\u2200x (Fish(x) \u2192 \u00acBird(x))\n\u2200x (Osprey(x) \u2192 Bird(x))\n\u2200x (Carp(x) \u2192 Fish(x))\n\u2200x (Goldfish(x) \u2192 Carp(x))\nOsprey(bubbles) \u2295 Goldfish(bubbles) \u2192 \u00acFish(bubbles)", "conclusion": "Bubbles is a goldfish.", "conclusion-FOL": "Goldfish(bubbles)", "label": "False", "example_id": 1262}
{"story_id": 439, "premises": "No fish are birds.\nAn osprey is a bird.\nA carp is a fish.\nAll goldfish are carp.\nIf Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish.", "premises-FOL": "\u2200x (Fish(x) \u2192 \u00acBird(x))\n\u2200x (Osprey(x) \u2192 Bird(x))\n\u2200x (Carp(x) \u2192 Fish(x))\n\u2200x (Goldfish(x) \u2192 Carp(x))\nOsprey(bubbles) \u2295 Goldfish(bubbles) \u2192 \u00acFish(bubbles)", "conclusion": "Bubbles is not a goldfish.", "conclusion-FOL": "\u00acGoldfish(bubbles)", "label": "True", "example_id": 1263}
{"story_id": 158, "premises": "Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been.\nThe cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.\nCities in Florida that they are interested in are Orlando and Miami.\nMr. Smith has been to two cities in California.\nMrs. Smith has been to one city in Florida.", "premises-FOL": "\u2200x (WantToGoTo(mr.AndMrs.Smith, x) \u2227 City(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 NeverGo(x))\nCity(sanFrancisco) \u2227 California(sanFrancisco) \u2227 WantToGoTo(mr.AndMrs.Smith, sanFrancisco) \u2227 City(losAngeles) \u2227 California(losAngeles) \u2227 WantToGoTo(mr.AndMrs.Smith, losAngeles) \u2227 City(sanDiego) \u2227 California(sanDiego) \u2227 WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) \u2227 Florida(orlando) \u2227 WantToGo(mr.AndMrs.Smith, orlando) \u2227 City(miami) \u2227 Florida(miami) \u2227 WantToGo(mr.AndMrs.Smith, miami)\n\u2203x \u2203y \u2200z (\u00ac(x=z) \u2227 \u00ac(y=z) \u2227 \u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 City(z) \u2227 California(x) \u2227 California(y) \u2227 California(z) \u2192 Visit(mr.smith, x) \u2227 Visit(mr.smith, y) \u2227 \u00acVisit(mr.smith, z))\n\u2203x \u2200y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 Florida(x) \u2227 Florida(y) \u2192 Visit(mrs.smith, x) \u2227 \u00acVisit(mrs.smith, y))", "conclusion": "Mr. Smith has been to San Francisco.", "conclusion-FOL": "\u2203x (City(x) \u2227 Visit(mr.smith, sanFrancisco))", "label": "Uncertain", "example_id": 453}
{"story_id": 158, "premises": "Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been.\nThe cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.\nCities in Florida that they are interested in are Orlando and Miami.\nMr. Smith has been to two cities in California.\nMrs. Smith has been to one city in Florida.", "premises-FOL": "\u2200x (WantToGoTo(mr.AndMrs.Smith, x) \u2227 City(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 NeverGo(x))\nCity(sanFrancisco) \u2227 California(sanFrancisco) \u2227 WantToGoTo(mr.AndMrs.Smith, sanFrancisco) \u2227 City(losAngeles) \u2227 California(losAngeles) \u2227 WantToGoTo(mr.AndMrs.Smith, losAngeles) \u2227 City(sanDiego) \u2227 California(sanDiego) \u2227 WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) \u2227 Florida(orlando) \u2227 WantToGo(mr.AndMrs.Smith, orlando) \u2227 City(miami) \u2227 Florida(miami) \u2227 WantToGo(mr.AndMrs.Smith, miami)\n\u2203x \u2203y \u2200z (\u00ac(x=z) \u2227 \u00ac(y=z) \u2227 \u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 City(z) \u2227 California(x) \u2227 California(y) \u2227 California(z) \u2192 Visit(mr.smith, x) \u2227 Visit(mr.smith, y) \u2227 \u00acVisit(mr.smith, z))\n\u2203x \u2200y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 Florida(x) \u2227 Florida(y) \u2192 Visit(mrs.smith, x) \u2227 \u00acVisit(mrs.smith, y))", "conclusion": "They have at leat one candidate city in Florida to visit.", "conclusion-FOL": "\u2203x (WantToGoTo(x) \u2227 City(x) \u2227 Florida(x))", "label": "Uncertain", "example_id": 454}
{"story_id": 158, "premises": "Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been.\nThe cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.\nCities in Florida that they are interested in are Orlando and Miami.\nMr. Smith has been to two cities in California.\nMrs. Smith has been to one city in Florida.", "premises-FOL": "\u2200x (WantToGoTo(mr.AndMrs.Smith, x) \u2227 City(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 NeverGo(x))\nCity(sanFrancisco) \u2227 California(sanFrancisco) \u2227 WantToGoTo(mr.AndMrs.Smith, sanFrancisco) \u2227 City(losAngeles) \u2227 California(losAngeles) \u2227 WantToGoTo(mr.AndMrs.Smith, losAngeles) \u2227 City(sanDiego) \u2227 California(sanDiego) \u2227 WantToGoTo(mr.AndMrs.Smith, sanDiego)\nCity(orlando) \u2227 Florida(orlando) \u2227 WantToGo(mr.AndMrs.Smith, orlando) \u2227 City(miami) \u2227 Florida(miami) \u2227 WantToGo(mr.AndMrs.Smith, miami)\n\u2203x \u2203y \u2200z (\u00ac(x=z) \u2227 \u00ac(y=z) \u2227 \u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 City(z) \u2227 California(x) \u2227 California(y) \u2227 California(z) \u2192 Visit(mr.smith, x) \u2227 Visit(mr.smith, y) \u2227 \u00acVisit(mr.smith, z))\n\u2203x \u2200y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 Florida(x) \u2227 Florida(y) \u2192 Visit(mrs.smith, x) \u2227 \u00acVisit(mrs.smith, y))", "conclusion": "They have at least two candidate cities in California to visit.", "conclusion-FOL": "\u2203x \u2203y (\u00ac(x=y) \u2227 City(x) \u2227 City(y) \u2227 WantToGoTo(mr.AndMrs.Smith, x) \u2227 California(x) \u2227 WantToGoTo(mr.AndMrs.Smith, y) \u2227 California(y))", "label": "Uncertain", "example_id": 455}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "The bird is still.", "conclusion-FOL": "Still(bird)", "label": "Uncertain", "example_id": 1424}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "The bird is not still.", "conclusion-FOL": "\u00acStill(bird)", "label": "Uncertain", "example_id": 1425}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "The bird is unpredictable and changing.", "conclusion-FOL": "Unpredictable(bird) \u2227 Changing(bird)", "label": "True", "example_id": 1426}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "The bird is unpredictable or changing.", "conclusion-FOL": "Unpredictable(bird) \u2228 Changing(bird)", "label": "True", "example_id": 1427}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "The bird is either unpredictable or changing.", "conclusion-FOL": "Unpredictable(bird) \u2295 Changing(bird)", "label": "False", "example_id": 1428}
{"story_id": 486, "premises": "Everything in Size Town is big or small.\nAll big things in Size Town are heavy.\nAll small things in Size Town are light.\nAll heavy things in Size Town are still.\nAll light things in Size Town are unstable.\nAll unstable things in Size Town are changing.\nAll unstable things in Size Town are unpredictable.\nThe bird is in Size Town and it is not both heavy and still.", "premises-FOL": "\u2200x (In(x, sizeTown) \u2192 (Big(x) \u2228 Small(x)))\n\u2200x (Big(x) \u2227 In(x, sizeTown) \u2192 Heavy(x))\n\u2200x (Small(x) \u2227 In(x, sizeTown) \u2192 Light(x))\n\u2200x (Heavy(x) \u2227 In(x, sizeTown) \u2192 Still(x))\n\u2200x (Light(x) \u2227 In(x, sizeTown) \u2192 Unstable(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Changing(x))\n\u2200x (Unstable(x) \u2227 In(x, sizeTown) \u2192 Unpredictable(x))\nIn(bird, sizeTown) \u2227 \u00ac(Heavy(bird) \u2227 Still(bird))", "conclusion": "If the bird is small or still, then it is either unpredictable or changing.", "conclusion-FOL": "Small(bird) \u2228 Still(bird) \u2192 Unpredictable(bird) \u2295 Changing(bird)", "label": "False", "example_id": 1429}
{"story_id": 95, "premises": "DI Ray is a police procedural television series.\nDI Ray was created and written by Maya Sondhi.\nDI Ray was produced by Jed Mercurio.\nMaya Sondhi and Jed Mercurio are both British.", "premises-FOL": "TelevisionSeries(dIRay) \u2227 PoliceProcedural(dIRay)\nCreates(maya, dIRay) \u2227 Writes(maya, dIRay)\nProduces(jed, dIRay)\nBritish(maya) \u2227 British(jed) ", "conclusion": "DI Ray was created by a Brit.", "conclusion-FOL": "\u2203x (British(x) \u2227 Creates(x, dIRay))", "label": "True", "example_id": 287}
{"story_id": 95, "premises": "DI Ray is a police procedural television series.\nDI Ray was created and written by Maya Sondhi.\nDI Ray was produced by Jed Mercurio.\nMaya Sondhi and Jed Mercurio are both British.", "premises-FOL": "TelevisionSeries(dIRay) \u2227 PoliceProcedural(dIRay)\nCreates(maya, dIRay) \u2227 Writes(maya, dIRay)\nProduces(jed, dIRay)\nBritish(maya) \u2227 British(jed) ", "conclusion": "Some Brit produced a television series.", "conclusion-FOL": "\u2203x \u2203y(British(x) \u2227 TelevisionSeries(y) \u2227 Produces(x, y))", "label": "True", "example_id": 288}
{"story_id": 465, "premises": "Everyone who took the bar exam can read. \nAll lawyers took the bar exam. \nEveryone who took the bar exam is knowledgeable about criminal procedures. \nAll people who got a score of 180 on the LSAT can read. \nNo elephants can read. \nIf Mike can not read or is not an elephant, then Mike either took the bar exam or can read. ", "premises-FOL": "\u2200x (Take(x, barExam) \u2192 CanRead(x))\n\u2200x (Lawyer(x) \u2192 Take(x, barExam))\n\u2200x (Take(x, barExam) \u2192 KnowledgeableAbout(x, criminalProceeder))\n\u2200x (GetOn(x, scoreOf180, lSAT) \u2192 CanRead(x))\n\u2200x (Elephant(x) \u2192 \u00acCanRead(x))\n\u00ac(CanRead(mike) \u2227 Elephant(mike)) \u2192 Take(mike, barExam) \u2295 CanRead(mike)", "conclusion": "Mike got 180 on the LSAT.", "conclusion-FOL": "GetOn(mike, 180, lSAT)", "label": "Uncertain", "example_id": 1342}
{"story_id": 465, "premises": "Everyone who took the bar exam can read. \nAll lawyers took the bar exam. \nEveryone who took the bar exam is knowledgeable about criminal procedures. \nAll people who got a score of 180 on the LSAT can read. \nNo elephants can read. \nIf Mike can not read or is not an elephant, then Mike either took the bar exam or can read. ", "premises-FOL": "\u2200x (Take(x, barExam) \u2192 CanRead(x))\n\u2200x (Lawyer(x) \u2192 Take(x, barExam))\n\u2200x (Take(x, barExam) \u2192 KnowledgeableAbout(x, criminalProceeder))\n\u2200x (GetOn(x, scoreOf180, lSAT) \u2192 CanRead(x))\n\u2200x (Elephant(x) \u2192 \u00acCanRead(x))\n\u00ac(CanRead(mike) \u2227 Elephant(mike)) \u2192 Take(mike, barExam) \u2295 CanRead(mike)", "conclusion": "Mike did not take the bar exam and is not both knowledgeable about criminal procedures and someone who got 180 on the LSAT.", "conclusion-FOL": "\u00acTake(mike, barExam) \u2227 \u00ac(KnowledgeableAbout(mike, criminalProcedures)\u2227 GetOn(mike, 180, lSAT))", "label": "True", "example_id": 1343}
{"story_id": 465, "premises": "Everyone who took the bar exam can read. \nAll lawyers took the bar exam. \nEveryone who took the bar exam is knowledgeable about criminal procedures. \nAll people who got a score of 180 on the LSAT can read. \nNo elephants can read. \nIf Mike can not read or is not an elephant, then Mike either took the bar exam or can read. ", "premises-FOL": "\u2200x (Take(x, barExam) \u2192 CanRead(x))\n\u2200x (Lawyer(x) \u2192 Take(x, barExam))\n\u2200x (Take(x, barExam) \u2192 KnowledgeableAbout(x, criminalProceeder))\n\u2200x (GetOn(x, scoreOf180, lSAT) \u2192 CanRead(x))\n\u2200x (Elephant(x) \u2192 \u00acCanRead(x))\n\u00ac(CanRead(mike) \u2227 Elephant(mike)) \u2192 Take(mike, barExam) \u2295 CanRead(mike)", "conclusion": "Mike took the bar exam.", "conclusion-FOL": "Take(mike, barExam)", "label": "False", "example_id": 1344}
{"story_id": 326, "premises": "Some soccer defenders are center-backs.\nAll soccer defenders are soccer players.\nNo soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2203x (ProfessionalSoccerDefender(x) \u2227 ProfessionalCenterback(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x)))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)", "conclusion": "Stephen Curry is a center-back.", "conclusion-FOL": "ProfessionalCenterback(stephenCurry)", "label": "Uncertain", "example_id": 834}
{"story_id": 326, "premises": "Some soccer defenders are center-backs.\nAll soccer defenders are soccer players.\nNo soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2203x (ProfessionalSoccerDefender(x) \u2227 ProfessionalCenterback(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x)))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)", "conclusion": "Stephen Curry is not both a centerback and a soccer defender.", "conclusion-FOL": "\u00ac(ProfessionalCenterback(stephenCurry) \u2227 ProfessionalSoccerDefender(stephenCurry))", "label": "False", "example_id": 835}
{"story_id": 326, "premises": "Some soccer defenders are center-backs.\nAll soccer defenders are soccer players.\nNo soccer players are professional basketball players.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2203x (ProfessionalSoccerDefender(x) \u2227 ProfessionalCenterback(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalSoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x)))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\nNBAPlayer(stephencurry)", "conclusion": "If Stephen Curry is not both a centerback and a soccer defender, then Stephen Curry is neither a soccer player nor a professional basketball player.", "conclusion-FOL": "\u00ac(Centerback(stephenCurry) \u2227 SoccerDefender(stephenCurry)) \u2192 \u00ac(SoccerPlayer(stephenCurry) \u2228 ProfessionalBasketballPlayer(stephenCurry))", "label": "True", "example_id": 836}
{"story_id": 186, "premises": "If a person doesn't have enough money to buy a product, then that person can't buy it.\nMonitors are products.\n4k monitors are more expensive than 1080 monitors and 2k monitors.\nJohn is a person.\nJohn doesn't have enough money to buy a 2k monitor.", "premises-FOL": "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))\n\u2200x (Monitor(x) \u2192 Product(x))\n\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))\nPerson(john)\n\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))", "conclusion": "John can't buy a 1080 monitor.", "conclusion-FOL": "\u2200x (Monitor(x) \u2227 OneOEightO(x) \u2192 \u00acBuy(john, x))", "label": "Uncertain", "example_id": 537}
{"story_id": 186, "premises": "If a person doesn't have enough money to buy a product, then that person can't buy it.\nMonitors are products.\n4k monitors are more expensive than 1080 monitors and 2k monitors.\nJohn is a person.\nJohn doesn't have enough money to buy a 2k monitor.", "premises-FOL": "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))\n\u2200x (Monitor(x) \u2192 Product(x))\n\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))\nPerson(john)\n\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))", "conclusion": "John can't buy a 2k monitor.", "conclusion-FOL": "\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acBuy(john, x))", "label": "True", "example_id": 538}
{"story_id": 263, "premises": "All artificial satellites are important scientific achievements.\nSome artificial satellites are not U.S. inventions.", "premises-FOL": "\u2200x (ArtificialSatellite(x) \u2192 ImportantScientificAchievement(x))\n\u2203x (ArtificialSatellite(x) \u2227 \u00acUSInvention(x))", "conclusion": "All important scientific achievements are U.S. inventions.", "conclusion-FOL": "\u2200x (ImportantScientificAchievement(x) \u2227 USInvention(x))", "label": "False", "example_id": 707}
{"story_id": 257, "premises": "Some cats are not pets.\nAll cats are mammals.", "premises-FOL": "\u2203x (Cat(x) \u2227 \u00acPet(x))\n\u2200x (Cat(x) \u2192 Mammal(x))", "conclusion": "Some mammals are not pets.", "conclusion-FOL": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))", "label": "True", "example_id": 701}
{"story_id": 364, "premises": "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. \nPeople in this neighborhood visit a coffee shop regularly or order takeout at least once a day.\nIf people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.\nIf people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.\nAll people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.\nSam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours", "premises-FOL": "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))\n\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))\n\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))\n\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))\n\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))", "conclusion": "Sam is living in this neighborhood and he is addicted to coffee.", "conclusion-FOL": "InThisNeighborhood(sam) \u2227 AddictedTo(sam, coffee)", "label": "Uncertain", "example_id": 967}
{"story_id": 364, "premises": "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. \nPeople in this neighborhood visit a coffee shop regularly or order takeout at least once a day.\nIf people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.\nIf people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.\nAll people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.\nSam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours", "premises-FOL": "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))\n\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))\n\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))\n\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))\n\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))", "conclusion": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home.", "conclusion-FOL": "\u2203y (CoffeemakerAndBlender(y) \u2227 Own(sam, y))", "label": "False", "example_id": 968}
{"story_id": 364, "premises": "If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. \nPeople in this neighborhood visit a coffee shop regularly or order takeout at least once a day.\nIf people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.\nIf people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.\nAll people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.\nSam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours", "premises-FOL": "\u2200x (In(x, thisNeighborhood) \u2227 VisitRegularly(x, coffeeShop) \u2192 AddictedTo(x, coffee))\n\u2200x (In(x, thisNeighborhood) \u2192 (VisitRegularly(x, coffeeShop) \u2228 (\u2203y (TakeOut(y) \u2227 Order(x, y, aDay))))\n\u2200x (In(x, thisNeighborhood) \u2227 MakeAtUsing(x, home, ownFood, recipe) \u2192 \u2203y (TakeOut(y) \u2227 Order(x, y)))\n\u2200x (In(x, thisNeighborhood) \u2227 \u2203y (CoffeemakerAndBlender(y) \u2227 Own(x, y)) \u2192 \u00acOrderAtLeastOnceADay(x, takeout))\n\u2200x (In(x, thisNeighborhood) \u2227 BusyWith(x, 12HourWorkHour) \u2192 MakeAtUsing(x, home, ownFood, recipe))\nIn(sam, thisNeighborhood) \u2227 \u00ac(AddictedTo(sam, coffee) \u2295 BusyWith(sam, 12HourWorkHour))", "conclusion": "Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day.", "conclusion-FOL": "(\u2203y (CoffeemakerAndBlender(y) \u2227 Own(sam, y)) \u2228 (\u2203y (TakeOut(y) \u2227 Order(sam, y, aDay)))", "label": "True", "example_id": 969}
{"story_id": 327, "premises": "No professional basketball players are soccer players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerbacks are soccer defenders.\nRoger Federer is either both an NBA player and a soccer defender, or neither.", "premises-FOL": "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))", "conclusion": "Roger Federer is a centerback.", "conclusion-FOL": "ProfessionalCenterback(rogerFederer)", "label": "False", "example_id": 837}
{"story_id": 327, "premises": "No professional basketball players are soccer players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerbacks are soccer defenders.\nRoger Federer is either both an NBA player and a soccer defender, or neither.", "premises-FOL": "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))", "conclusion": "Roger Federer is not a centerback.", "conclusion-FOL": "\u00acProfessionalCenterback(rogerFederer)", "label": "True", "example_id": 838}
{"story_id": 327, "premises": "No professional basketball players are soccer players.\nAll NBA players are professional basketball players.\nAll soccer defenders are soccer players.\nAll centerbacks are soccer defenders.\nRoger Federer is either both an NBA player and a soccer defender, or neither.", "premises-FOL": "\u2200x (ProfessionalBasketballPlayer(x) \u2192 \u00acProfessionalSoccerPlayer(x))\n\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))\n\u2200x (ProfessionalSoccerDefender(x) \u2192 ProfessionalSoccerPlayer(x))\n\u2200x (ProfessionalCenterback(x) \u2192 ProfessionalSoccerDefender(x))\n\u00ac(NBAPlayer(rogerfederer) \u2295 ProfessionalSoccerDefender(rogerfederer))", "conclusion": "Roger Federer is a soccer player.", "conclusion-FOL": "ProfessionalSoccerPlayer(rogerFederer)", "label": "Uncertain", "example_id": 839}
{"story_id": 443, "premises": "Some teachers who work at pools are not nice.\nAll teachers working at pools are pool managers.\nAll pool managers are lifeguards.\nIf someone is a lifeguard, then they work at a pool.\nMary does not work at a pool.", "premises-FOL": "\u2203x (Teacher(x) \u2227 WorkAt(x, pool) \u2227 \u00acNice(x))\n\u2200x (Teacher(x) \u2227 WorkAt(x, pool) \u2192 PoolManager(x))\n\u2200x (PoolManager(x) \u2192 Lifeguard(x))\n\u2200x (Lifeguard(x) \u2192 WorkAt(x, pool))\n\u00acWorkAt(mary, pool)", "conclusion": "Mary is nice.", "conclusion-FOL": "Nice(mary)", "label": "Uncertain", "example_id": 1274}
{"story_id": 443, "premises": "Some teachers who work at pools are not nice.\nAll teachers working at pools are pool managers.\nAll pool managers are lifeguards.\nIf someone is a lifeguard, then they work at a pool.\nMary does not work at a pool.", "premises-FOL": "\u2203x (Teacher(x) \u2227 WorkAt(x, pool) \u2227 \u00acNice(x))\n\u2200x (Teacher(x) \u2227 WorkAt(x, pool) \u2192 PoolManager(x))\n\u2200x (PoolManager(x) \u2192 Lifeguard(x))\n\u2200x (Lifeguard(x) \u2192 WorkAt(x, pool))\n\u00acWorkAt(mary, pool)", "conclusion": "Mary is not a nice teacher working at a pool.", "conclusion-FOL": "\u00ac(Nice(mary) \u2227 Teacher(mary) \u2227 WorkAt(mary, pool))", "label": "True", "example_id": 1275}
{"story_id": 443, "premises": "Some teachers who work at pools are not nice.\nAll teachers working at pools are pool managers.\nAll pool managers are lifeguards.\nIf someone is a lifeguard, then they work at a pool.\nMary does not work at a pool.", "premises-FOL": "\u2203x (Teacher(x) \u2227 WorkAt(x, pool) \u2227 \u00acNice(x))\n\u2200x (Teacher(x) \u2227 WorkAt(x, pool) \u2192 PoolManager(x))\n\u2200x (PoolManager(x) \u2192 Lifeguard(x))\n\u2200x (Lifeguard(x) \u2192 WorkAt(x, pool))\n\u00acWorkAt(mary, pool)", "conclusion": "Mary is is a nice teacher working at a pool.", "conclusion-FOL": "Nice(mary) \u2227 Teacher(mary) \u2227 WorkAt(mary, pool)", "label": "False", "example_id": 1276}
{"story_id": 302, "premises": "Not all art pieces require talent.\nEverything that requires talent requires practice.", "premises-FOL": "\u2203x (ArtPiece(x) \u2227 \u00acRequire(x, talent))\n\u2200x (Require(x, talent) \u2192 Require(x, practice))", "conclusion": "There exist art pieces that do not require practice.", "conclusion-FOL": "\u2203x \u2203y (ArtPiece(x) \u2227 \u00acRequire(x, practice) \u2227 ArtPiece(y) \u2227 \u00acRequire(y, practice) \u2227 \u00ac(x=y))", "label": "True", "example_id": 746}
{"story_id": 88, "premises": "Bernarda Bryson Shahn was a painter and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio. \nBernarda Bryson Shahn was married to Ben Shahn.\nPeople born in Athens, Ohio, are Americans.", "premises-FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "conclusion": "Bernarda Bryson Shahn was born in Greece.", "conclusion-FOL": "BornIn(bernardaBrysonShahn, greece)", "label": "Uncertain", "example_id": 267}
{"story_id": 88, "premises": "Bernarda Bryson Shahn was a painter and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio. \nBernarda Bryson Shahn was married to Ben Shahn.\nPeople born in Athens, Ohio, are Americans.", "premises-FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "conclusion": "Bernarda Bryson Shahn was American.", "conclusion-FOL": "American(bernardaBrysonShahn)", "label": "True", "example_id": 268}
{"story_id": 88, "premises": "Bernarda Bryson Shahn was a painter and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio. \nBernarda Bryson Shahn was married to Ben Shahn.\nPeople born in Athens, Ohio, are Americans.", "premises-FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "conclusion": "Bernarda Bryson Shahn had been divorced once.", "conclusion-FOL": "Divorced(bernardaBrysonShahn)", "label": "Uncertain", "example_id": 269}
{"story_id": 369, "premises": "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.\nEverybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.\nEverybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.\nEverybody in Emma's family live with at least one roommate, does not own any pets.\nEverybody in Emma's family who owns at least one pet lives with at least one roommate.\nEmily is in Emma's family.\nIf Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ", "premises-FOL": "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))\n\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))\n\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))\n\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))\n\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))\nInEmmasFamily(emily)\n((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))", "conclusion": "Emily is in Emma's family and she lives with at least one roommate.", "conclusion-FOL": "\u2203y (LiveWith(emily, y) \u2227 Roommate(y))", "label": "Uncertain", "example_id": 982}
{"story_id": 369, "premises": "Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house.\nEverybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year.\nEverybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities.\nEverybody in Emma's family live with at least one roommate, does not own any pets.\nEverybody in Emma's family who owns at least one pet lives with at least one roommate.\nEmily is in Emma's family.\nIf Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ", "premises-FOL": "\u2200x (InEmmasFamily(x) \u2227 UpgradeToEveryYear(x, newestIphoneModel) \u2192 \u00acSavingMoneyForOn(x, downPayment, newHouse))\n\u2200x (InEmmasFamily(x) \u2227 EnjoyReading(x, techSpec) \u2227 KeepUpdatedOn(x, latestTechnology) \u2192 UpgradeToEveryYear(x, newestIphoneModel))\n\u2200x (InEmmasFamily(x) \u2227 (SavingMoneyForOn(x, downPayment, newHouse) \u2228 LiveIn(x, apartment, bigMetropolitanCity)))\n\u2200x (InEmmasFamily(x) \u2227 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))) \u2192 \u00ac(\u2203y (Own(x, y) \u2227 Pet(y))))\n\u2200x (InEmmasFamily(x) \u2227 (\u2203y (Own(x, y) \u2227 Pet(y))) \u2192 (\u2203y (LiveWith(x, y) \u2227 Roommate(y))))\nInEmmasFamily(emily)\n((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2192 ((\u2203y (Own(emily, y) \u2227 Pet(y))) \u2227 LiveIn(emily, apartment, bigMetropolitanCity)) \u2295 \u00ac((\u2203y (Own(emily, y) \u2227 Roommate(y))) \u2228 LiveIn(emily, apartment, bigMetropolitanCity))", "conclusion": "Emily enjoys reading about tech specs and keeping up to date on the latest technology.", "conclusion-FOL": "EnjoyReading(emily, techSpec) \u2227 KeepUpdatedOn(emily, latestTechnology)", "label": "False", "example_id": 983}
{"story_id": 451, "premises": "People on the payroll are being paid by the school.\nIf someone has a job at a school, then they are on the payroll.\nAll faculty members have a job at a school.\nIf someone teaches students, they are a faculty member or a teacher.\nEvery teacher has students.\nIf Nancy is a teacher, then they are on the payroll.\nIf Nancy is not a teacher, then they are not paid by the school.\nNancy teaches students.", "premises-FOL": "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))\n\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))\n\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))\n\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))\n\u2200x (Teacher(x) \u2192 Have(x, student))\nTeacher(nancy) \u2192 OnPayroll(nancy)\n\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)\nTeach(nancy, student)", "conclusion": "Nancy is a faculty member.", "conclusion-FOL": "FacultyMember(nancy)", "label": "Uncertain", "example_id": 1298}
{"story_id": 451, "premises": "People on the payroll are being paid by the school.\nIf someone has a job at a school, then they are on the payroll.\nAll faculty members have a job at a school.\nIf someone teaches students, they are a faculty member or a teacher.\nEvery teacher has students.\nIf Nancy is a teacher, then they are on the payroll.\nIf Nancy is not a teacher, then they are not paid by the school.\nNancy teaches students.", "premises-FOL": "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))\n\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))\n\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))\n\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))\n\u2200x (Teacher(x) \u2192 Have(x, student))\nTeacher(nancy) \u2192 OnPayroll(nancy)\n\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)\nTeach(nancy, student)", "conclusion": "Nancy is paid by the school and has students.", "conclusion-FOL": "PaidBy(nancy, school) \u2227 Have(nancy, student)", "label": "True", "example_id": 1299}
{"story_id": 451, "premises": "People on the payroll are being paid by the school.\nIf someone has a job at a school, then they are on the payroll.\nAll faculty members have a job at a school.\nIf someone teaches students, they are a faculty member or a teacher.\nEvery teacher has students.\nIf Nancy is a teacher, then they are on the payroll.\nIf Nancy is not a teacher, then they are not paid by the school.\nNancy teaches students.", "premises-FOL": "\u2200x (OnPayroll(x) \u2192 PaidBy(x, school))\n\u2200x (HaveJobAt(x, school) \u2192 OnPayroll(x))\n\u2200x (FacultyMember(x) \u2192 HaveJobAt(x, school))\n\u2200x (Teach(x, student) \u2192 FacultyMember(x) \u2228 Teacher(x))\n\u2200x (Teacher(x) \u2192 Have(x, student))\nTeacher(nancy) \u2192 OnPayroll(nancy)\n\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)\nTeach(nancy, student)", "conclusion": "Nancy is not paid by the school or does not have students.", "conclusion-FOL": "\u00acPaidBy(nancy, school) \u2228 \u00acHave(nancy, student))", "label": "False", "example_id": 1300}
{"story_id": 248, "premises": "Kangaroos are an animal.\nNo Kangaroos live in Germany.\nJane will fly to Germany if she saves enough money for the summer.\nIf Jane flies to Germany, she will go to the Berlin Zoo.\nIf someone goes to the Berlin Zoo, they will see some of the animals in Germany.", "premises-FOL": "\u2200x (Kangaroo(x) \u2192 Animal(x))\n\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))\nSavesFor(jane, enoughMoney, theSummer) \u2192 FlyTo(jane, germany)\nFlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) \n\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 LiveIn(x, germany) \u2227 Animal(y) \u2192 WillSee(y, x, berlinzoo))", "conclusion": "Jane will see a kangaroo if she saves enough money for the summer.", "conclusion-FOL": "\u2203x (SavesFor(jane, enoughMoney, theSummer)  \u2227 Kangaroo(x) \u2192 WillSee(x, jane, berlinzoo))", "label": "False", "example_id": 691}
{"story_id": 214, "premises": "If a class has prerequisites, the student must take the prerequisites to take the class.\nIf a class has no prerequisites, then the student can take the class\nCPSC 201 and CPSC 223 are prerequisites for CPSC 323.\nIntro Microeconomics is the only prerequisite for Intermediate Microeconomics.\nIntro Geology has no prerequisites.", "premises-FOL": "\u2200x \u2200y \u2200z (Class(x) \u2227 Student(y) \u2227 Prereq(z,x) \u2227 \u00acTake(y, z) \u2192 \u00acCanTake(y, x))\n\u2200x \u2200y ((Class(x) \u2227 Student(y) \u2227 \u00ac\u2203z Prereq(z,x)) \u2192 CanTake(y, x))\nPrereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)\n\u2200x (Prereq(x,intermediateMicro) \u2192 x=introMicroeconomics)\n\u00ac(\u2203x (Prereq(x, introGeology)))", "conclusion": "CPSC 201 has no prerequisites.", "conclusion-FOL": "\u2200x (\u00acPrereq(x, cpsc201))", "label": "Uncertain", "example_id": 611}
{"story_id": 214, "premises": "If a class has prerequisites, the student must take the prerequisites to take the class.\nIf a class has no prerequisites, then the student can take the class\nCPSC 201 and CPSC 223 are prerequisites for CPSC 323.\nIntro Microeconomics is the only prerequisite for Intermediate Microeconomics.\nIntro Geology has no prerequisites.", "premises-FOL": "\u2200x \u2200y \u2200z (Class(x) \u2227 Student(y) \u2227 Prereq(z,x) \u2227 \u00acTake(y, z) \u2192 \u00acCanTake(y, x))\n\u2200x \u2200y ((Class(x) \u2227 Student(y) \u2227 \u00ac\u2203z Prereq(z,x)) \u2192 CanTake(y, x))\nPrereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)\n\u2200x (Prereq(x,intermediateMicro) \u2192 x=introMicroeconomics)\n\u00ac(\u2203x (Prereq(x, introGeology)))", "conclusion": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.", "conclusion-FOL": "Taken(cpsc201) \u2227 \u00acTaken(cpsc223) \u2227 CanTake(cpsc323)", "label": "False", "example_id": 612}
{"story_id": 214, "premises": "If a class has prerequisites, the student must take the prerequisites to take the class.\nIf a class has no prerequisites, then the student can take the class\nCPSC 201 and CPSC 223 are prerequisites for CPSC 323.\nIntro Microeconomics is the only prerequisite for Intermediate Microeconomics.\nIntro Geology has no prerequisites.", "premises-FOL": "\u2200x \u2200y \u2200z (Class(x) \u2227 Student(y) \u2227 Prereq(z,x) \u2227 \u00acTake(y, z) \u2192 \u00acCanTake(y, x))\n\u2200x \u2200y ((Class(x) \u2227 Student(y) \u2227 \u00ac\u2203z Prereq(z,x)) \u2192 CanTake(y, x))\nPrereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)\n\u2200x (Prereq(x,intermediateMicro) \u2192 x=introMicroeconomics)\n\u00ac(\u2203x (Prereq(x, introGeology)))", "conclusion": "A student cannot take Intro Geology.", "conclusion-FOL": "\u00acCanTake(introgeology)", "label": "False", "example_id": 613}
{"story_id": 214, "premises": "If a class has prerequisites, the student must take the prerequisites to take the class.\nIf a class has no prerequisites, then the student can take the class\nCPSC 201 and CPSC 223 are prerequisites for CPSC 323.\nIntro Microeconomics is the only prerequisite for Intermediate Microeconomics.\nIntro Geology has no prerequisites.", "premises-FOL": "\u2200x \u2200y \u2200z (Class(x) \u2227 Student(y) \u2227 Prereq(z,x) \u2227 \u00acTake(y, z) \u2192 \u00acCanTake(y, x))\n\u2200x \u2200y ((Class(x) \u2227 Student(y) \u2227 \u00ac\u2203z Prereq(z,x)) \u2192 CanTake(y, x))\nPrereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)\n\u2200x (Prereq(x,intermediateMicro) \u2192 x=introMicroeconomics)\n\u00ac(\u2203x (Prereq(x, introGeology)))", "conclusion": "Intermediate Microeconomics has one prerequisite.", "conclusion-FOL": "\u2203x (Taken(x) \u2192 CanTake(intermediatemicro))", "label": "True", "example_id": 614}
{"story_id": 37, "premises": "Heptalogyy is a compound literary or narrative work that is made up of seven distinct works.\nThe Harry Potter series consists of 7 distinct works.\nThe Chronicles of Narnia consists of 7 distinct works.", "premises-FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)", "conclusion": "The Harry Potter series of books is Heptalogy.", "conclusion-FOL": "Heptalogy(harryPotter)", "label": "True", "example_id": 107}
{"story_id": 37, "premises": "Heptalogyy is a compound literary or narrative work that is made up of seven distinct works.\nThe Harry Potter series consists of 7 distinct works.\nThe Chronicles of Narnia consists of 7 distinct works.", "premises-FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)", "conclusion": "The Chronicles of Narnia series of books is not Heptalogy.", "conclusion-FOL": "\u00acHeptalogy(chroniclesOfNarnia)", "label": "False", "example_id": 108}
{"story_id": 37, "premises": "Heptalogyy is a compound literary or narrative work that is made up of seven distinct works.\nThe Harry Potter series consists of 7 distinct works.\nThe Chronicles of Narnia consists of 7 distinct works.", "premises-FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)", "conclusion": "The Lord of the Rings is Heptalogy.", "conclusion-FOL": "Heptalogy(lordOfRings)", "label": "Uncertain", "example_id": 109}
{"story_id": 381, "premises": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.\nIf people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.\nPeople are fascinated by the history of the Renaissance and other past eras, or they are contemporary academics who enjoy learning.\nPeople who are focused on futuristic and vocational subjects are contemporary academics who enjoy learning.\nIf people are professors who take a historical approach, then they are not contemporary academics who enjoy learning.\nIf Clyde is not focused on futuristic and voctional subjects, then he is neither focused on futuristic and vocational subjects nor enjoys dressing up in old-fashioned and historical period clothing.", "premises-FOL": "\u2200x (AttendRegularly(x, renaissanceFair) \u2192 Enjoy(x, dressingUp, oldFashionedClothing) \u2227 Enjoy(x, dressingUp, historicalPeriodClothing))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2192 AttendRegularly(x, renaissanceFair))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2295 (ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u2200x (FocusedOn(x, futuristicSubject) \u2227 FocusedOn(x, vocationalSubject) \u2192 ContemporaryAcademic(x) \u2227 Enjoy(x, learning))\n\u2200x (Professor(x) \u2227 Take(x, historicalApproach) \u2192 \u00ac(ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject))\u2192 \u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject) \u2228 (Enjoy(clyde, dressingUp, oldFashionedClothing) \u2227 Enjoy(clyde, dressingUp, historicalPeriodClothing)))", "conclusion": "Clyde attends Renaissance fairs regularly.", "conclusion-FOL": "AttendRegularly(clyde, renaissanceFair)", "label": "Uncertain", "example_id": 1017}
{"story_id": 381, "premises": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.\nIf people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.\nPeople are fascinated by the history of the Renaissance and other past eras, or they are contemporary academics who enjoy learning.\nPeople who are focused on futuristic and vocational subjects are contemporary academics who enjoy learning.\nIf people are professors who take a historical approach, then they are not contemporary academics who enjoy learning.\nIf Clyde is not focused on futuristic and voctional subjects, then he is neither focused on futuristic and vocational subjects nor enjoys dressing up in old-fashioned and historical period clothing.", "premises-FOL": "\u2200x (AttendRegularly(x, renaissanceFair) \u2192 Enjoy(x, dressingUp, oldFashionedClothing) \u2227 Enjoy(x, dressingUp, historicalPeriodClothing))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2192 AttendRegularly(x, renaissanceFair))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2295 (ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u2200x (FocusedOn(x, futuristicSubject) \u2227 FocusedOn(x, vocationalSubject) \u2192 ContemporaryAcademic(x) \u2227 Enjoy(x, learning))\n\u2200x (Professor(x) \u2227 Take(x, historicalApproach) \u2192 \u00ac(ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject))\u2192 \u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject) \u2228 (Enjoy(clyde, dressingUp, oldFashionedClothing) \u2227 Enjoy(clyde, dressingUp, historicalPeriodClothing)))", "conclusion": "Clyde is a professor who takes a historical approach.", "conclusion-FOL": "Professor(clyde) \u2227 Take(clyde, historicalApproach)", "label": "False", "example_id": 1018}
{"story_id": 381, "premises": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.\nIf people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.\nPeople are fascinated by the history of the Renaissance and other past eras, or they are contemporary academics who enjoy learning.\nPeople who are focused on futuristic and vocational subjects are contemporary academics who enjoy learning.\nIf people are professors who take a historical approach, then they are not contemporary academics who enjoy learning.\nIf Clyde is not focused on futuristic and voctional subjects, then he is neither focused on futuristic and vocational subjects nor enjoys dressing up in old-fashioned and historical period clothing.", "premises-FOL": "\u2200x (AttendRegularly(x, renaissanceFair) \u2192 Enjoy(x, dressingUp, oldFashionedClothing) \u2227 Enjoy(x, dressingUp, historicalPeriodClothing))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2192 AttendRegularly(x, renaissanceFair))\n\u2200x (FascinatedBy(x, historyOfRenaissance) \u2295 (ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u2200x (FocusedOn(x, futuristicSubject) \u2227 FocusedOn(x, vocationalSubject) \u2192 ContemporaryAcademic(x) \u2227 Enjoy(x, learning))\n\u2200x (Professor(x) \u2227 Take(x, historicalApproach) \u2192 \u00ac(ContemporaryAcademic(x) \u2227 Enjoy(x, learning)))\n\u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject))\u2192 \u00ac(FocusedOn(clyde, futuristicSubject) \u2227 FocusedOn(clyde, vocationalSubject) \u2228 (Enjoy(clyde, dressingUp, oldFashionedClothing) \u2227 Enjoy(clyde, dressingUp, historicalPeriodClothing)))", "conclusion": "Clyde is a professor who takes a historical approach, or is a contemporary academic.", "conclusion-FOL": "(Professor(clyde) \u2227 Take(clyde, historicalApproach)) \u2228 (ContemporaryAcademic(clyde) \u2227 Enjoy(clyde, learning))", "label": "True", "example_id": 1019}
{"story_id": 270, "premises": "No sports cars are vehicles intended to be driven at moderate speeds.\nAll automobiles designed for family use are vehicles intended to be driven at moderate speeds.", "premises-FOL": "\u2200x (SportsCar(x) \u2192 \u00acIntendedToBeDrivenAt(x, moderateSpeed))\n\u2200x (DesignedFor(x, familyUse) \u2192 IntendedToBeDrivenAt(x, moderateSpeed))", "conclusion": "No sports cars are automobiles designed for family use.", "conclusion-FOL": "\u2200x (SportsCar(x) \u2192 \u00acFor(x, familyUse))", "label": "True", "example_id": 714}
{"story_id": 356, "premises": "If people work well in teams in the workplace, then they get along with all their colleagues at their work.\nIf people come to work every day with a positive attitude, then they work well in teams in the workplace.\nPeople either come to work every day with a positive attitude or are always tired every morning.\nIf people are always tired in the morning, then they are criticized by their boss.\nIf people are criticized by their boss, then they do not receive positive feedback from teams at work.\nKat either is a person who works well in teams in the workplac and is always tired every morning, or she is neither.", "premises-FOL": "\u2200x (WorkWellInTeamsIn(x, workPlace) \u2192 \u2200y (Colleague(y) \u2227 GetAlongWithAtWork(x, y)))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2192 WorkWellInTeamsIn(x, workPlace))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2295 AlwaysTiredInMorning(x))\n\u2200x (AlwaysTiredInMorning(x) \u2192 CriticizedBy(x, boss))\n\u2200x (CriticizedBy(x, boss) \u2192 \u00acReceiveFromAtWork(x, positiveFeedback, team))\n\u00ac(WorkWellInTeamsIn(kat, workPlace) \u2295 Tired(kat))", "conclusion": "Kat is a person who comes to work every day with a positive attitude.", "conclusion-FOL": "ComeToWorkWithEveryDay(kat, positiveAttitude)", "label": "Uncertain", "example_id": 944}
{"story_id": 356, "premises": "If people work well in teams in the workplace, then they get along with all their colleagues at their work.\nIf people come to work every day with a positive attitude, then they work well in teams in the workplace.\nPeople either come to work every day with a positive attitude or are always tired every morning.\nIf people are always tired in the morning, then they are criticized by their boss.\nIf people are criticized by their boss, then they do not receive positive feedback from teams at work.\nKat either is a person who works well in teams in the workplac and is always tired every morning, or she is neither.", "premises-FOL": "\u2200x (WorkWellInTeamsIn(x, workPlace) \u2192 \u2200y (Colleague(y) \u2227 GetAlongWithAtWork(x, y)))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2192 WorkWellInTeamsIn(x, workPlace))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2295 AlwaysTiredInMorning(x))\n\u2200x (AlwaysTiredInMorning(x) \u2192 CriticizedBy(x, boss))\n\u2200x (CriticizedBy(x, boss) \u2192 \u00acReceiveFromAtWork(x, positiveFeedback, team))\n\u00ac(WorkWellInTeamsIn(kat, workPlace) \u2295 Tired(kat))", "conclusion": "Kat gets along with her colleagues at her work and receives positive feedback from teams at her work.", "conclusion-FOL": "(\u2200y (Colleague(y) \u2227 GetAlongWithAtWork(kat, y))) \u2227 ReceiveFromAtWork(kat, positiveFeedback, team)", "label": "False", "example_id": 945}
{"story_id": 356, "premises": "If people work well in teams in the workplace, then they get along with all their colleagues at their work.\nIf people come to work every day with a positive attitude, then they work well in teams in the workplace.\nPeople either come to work every day with a positive attitude or are always tired every morning.\nIf people are always tired in the morning, then they are criticized by their boss.\nIf people are criticized by their boss, then they do not receive positive feedback from teams at work.\nKat either is a person who works well in teams in the workplac and is always tired every morning, or she is neither.", "premises-FOL": "\u2200x (WorkWellInTeamsIn(x, workPlace) \u2192 \u2200y (Colleague(y) \u2227 GetAlongWithAtWork(x, y)))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2192 WorkWellInTeamsIn(x, workPlace))\n\u2200x (ComeToWorkWithEveryDay(x, positiveAttitude) \u2295 AlwaysTiredInMorning(x))\n\u2200x (AlwaysTiredInMorning(x) \u2192 CriticizedBy(x, boss))\n\u2200x (CriticizedBy(x, boss) \u2192 \u00acReceiveFromAtWork(x, positiveFeedback, team))\n\u00ac(WorkWellInTeamsIn(kat, workPlace) \u2295 Tired(kat))", "conclusion": "Kat either gets along with her colleagues at her work or receives positive feedback from teams at her work.", "conclusion-FOL": "(\u2200y (Colleague(y) \u2227 GetAlongWithAtWork(kat, y))) \u2295 ReceiveFromAtWork(kat, positiveFeedback, team)", "label": "True", "example_id": 946}
{"story_id": 276, "premises": "Drishti is an open-source software.\nOpen-source software is free to modify.", "premises-FOL": "OpenSourceSoftware(drishti)\n\u2200x (OpenSourceSoftware(x) \u2192 FreeToModify(x))", "conclusion": "Drishti is free to modify.", "conclusion-FOL": "FreeToModify(drishti)", "label": "True", "example_id": 720}
{"story_id": 161, "premises": "There are five grades in English class: A+, A, B+, B, and C. \nIf a student gets an A+ in English class, then his score is greater than 95.\nIf a student gets an A in English class, then his score is greater than 90 but lower than 95.\nZhang got an A in English class.\nWang's English class score is better than Zhang's.\nWu's English class score is lower than 90.\nIf a student's English class score is lower than 90, then it is not greater than 95 or 90, and lower than 95.", "premises-FOL": "GradeIn(aPlus, englishClass) \u2228 GradeIn(a, englishClass) \u2228 GradeIn(bPlus, englishClass) \u2228 GradeIn(b, englishClass) \u2228 GradeIn(c, englishClass) \u2227 (GradeIn(aPlus, englishClass) \u2192 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(a, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(bPlus, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(b, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(c, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass)) \n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, aPlus, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan95(y))\n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, a, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan90(y) \u2227 LowerThan95(y)) \nStudent(zhang) \u2227 GetGradeIn(zhang, a, englishClass)\n\u2200x \u2200y (Student(zhang) \u2227 Student(wang) \u2227 EnglishScore(zhang, x) \u2227 EnglishScore(wang, y) \u2227 Better(y, x))\n\u2200x (Student(wu) \u2227 EnglishScore(wu, x) \u2227 LowerThan90(x))\n\u2200x \u2200y (Student(x) \u2227 EnglishScore(x, y) \u2227 LowerThan90(y) \u2192 \u00acGreaterThan95(y) \u2227 \u00acGreaterThan90(y) \u2227 LowerThan95(y))", "conclusion": "Zhang's English class score is lower than 95.", "conclusion-FOL": "\u2200x (EnglishScore(zhang, x) \u2227 LowerThan95(x))", "label": "True", "example_id": 461}
{"story_id": 161, "premises": "There are five grades in English class: A+, A, B+, B, and C. \nIf a student gets an A+ in English class, then his score is greater than 95.\nIf a student gets an A in English class, then his score is greater than 90 but lower than 95.\nZhang got an A in English class.\nWang's English class score is better than Zhang's.\nWu's English class score is lower than 90.\nIf a student's English class score is lower than 90, then it is not greater than 95 or 90, and lower than 95.", "premises-FOL": "GradeIn(aPlus, englishClass) \u2228 GradeIn(a, englishClass) \u2228 GradeIn(bPlus, englishClass) \u2228 GradeIn(b, englishClass) \u2228 GradeIn(c, englishClass) \u2227 (GradeIn(aPlus, englishClass) \u2192 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(a, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(bPlus, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(b, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(c, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass)) \n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, aPlus, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan95(y))\n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, a, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan90(y) \u2227 LowerThan95(y)) \nStudent(zhang) \u2227 GetGradeIn(zhang, a, englishClass)\n\u2200x \u2200y (Student(zhang) \u2227 Student(wang) \u2227 EnglishScore(zhang, x) \u2227 EnglishScore(wang, y) \u2227 Better(y, x))\n\u2200x (Student(wu) \u2227 EnglishScore(wu, x) \u2227 LowerThan90(x))\n\u2200x \u2200y (Student(x) \u2227 EnglishScore(x, y) \u2227 LowerThan90(y) \u2192 \u00acGreaterThan95(y) \u2227 \u00acGreaterThan90(y) \u2227 LowerThan95(y))", "conclusion": "Wang got an A+ in English class.", "conclusion-FOL": "GetGradeIn(wang, aPlus, englishClass)", "label": "Uncertain", "example_id": 462}
{"story_id": 161, "premises": "There are five grades in English class: A+, A, B+, B, and C. \nIf a student gets an A+ in English class, then his score is greater than 95.\nIf a student gets an A in English class, then his score is greater than 90 but lower than 95.\nZhang got an A in English class.\nWang's English class score is better than Zhang's.\nWu's English class score is lower than 90.\nIf a student's English class score is lower than 90, then it is not greater than 95 or 90, and lower than 95.", "premises-FOL": "GradeIn(aPlus, englishClass) \u2228 GradeIn(a, englishClass) \u2228 GradeIn(bPlus, englishClass) \u2228 GradeIn(b, englishClass) \u2228 GradeIn(c, englishClass) \u2227 (GradeIn(aPlus, englishClass) \u2192 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(a, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(bPlus, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(b, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(b, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(c, englishClass)) \u2227 (GradeIn(c, englishClass) \u2192 \u00acGradeIn(aPlus, englishClass) \u2227 \u00acGradeIn(a, englishClass) \u2227 \u00acGradeIn(bPlus, englishClass) \u2227 \u00acGradeIn(b, englishClass)) \n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, aPlus, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan95(y))\n\u2200x \u2200y (Student(x) \u2227 GetGradeIn(x, a, englishClass) \u2192 EnglishClassScore(x, y) \u2227 GreaterThan90(y) \u2227 LowerThan95(y)) \nStudent(zhang) \u2227 GetGradeIn(zhang, a, englishClass)\n\u2200x \u2200y (Student(zhang) \u2227 Student(wang) \u2227 EnglishScore(zhang, x) \u2227 EnglishScore(wang, y) \u2227 Better(y, x))\n\u2200x (Student(wu) \u2227 EnglishScore(wu, x) \u2227 LowerThan90(x))\n\u2200x \u2200y (Student(x) \u2227 EnglishScore(x, y) \u2227 LowerThan90(y) \u2192 \u00acGreaterThan95(y) \u2227 \u00acGreaterThan90(y) \u2227 LowerThan95(y))", "conclusion": "Wu does not get an A or A+ in English class.", "conclusion-FOL": "\u00acGetGradeIn(wu, aPlus, englishClass) \u2227\u00acGetGradeIn(wu, a, englishClass)", "label": "True", "example_id": 463}
{"story_id": 216, "premises": "Olivia doesn't prefer warm temperatures during the day.\nWhen Olivia sleeps, she prefers a cool temperature.\nOlivia sleeps during the night.\nOlivia works during the day.\nOlivia either works or sleeps.\nIt is either the day or the night.\nOlivia either prefers warm temperatures or prefers cool temperatures.", "premises-FOL": "\u2200x (Day(x) \u2192 \u00acPrefer(olivia, warmTemperature, x))\n\u2200x (Sleep(olivia, x) \u2192 Prefer(olivia, coolTemperature, x))\n\u2200x (Night(x) \u2192 Sleep(olivia, x))\n\u2200x (Day(x) \u2192 Work(olivia, x))\nWork(olivia) \u2295 Sleep(olivia)\n\u2200x (Day(x) \u2295 Night(x))\n\u2200x (Prefer(olivia, warmTemperature, x) \u2295 Prefer(olivia, coolTemperature, x))", "conclusion": "At all times, Olivia prefers a cool temperature.", "conclusion-FOL": "\u2200x (Prefer(olivia, coolTemperature, x))", "label": "True", "example_id": 617}
{"story_id": 207, "premises": "TOra is a GUI.\nGUIs are software.\nSoftware can be free or paid.\nPaid Software is not under the GNU General Public License.\nTOra is under the GNU General Public License.", "premises-FOL": "GUI(tora)\n\u2200x (GUI(x) \u2192 Software(x))\n\u2200x (Software(x) \u2192 Free(x) \u2295 Paid(x))\n\u2200x (Paid(x) \u2227 Software(x) \u2192 \u00acUnderGNULicense(x))\nUnderGNULicense(tora)", "conclusion": "TOra is a paid software.", "conclusion-FOL": "Paid(tora) \u2227 Software(tora)", "label": "False", "example_id": 592}
{"story_id": 207, "premises": "TOra is a GUI.\nGUIs are software.\nSoftware can be free or paid.\nPaid Software is not under the GNU General Public License.\nTOra is under the GNU General Public License.", "premises-FOL": "GUI(tora)\n\u2200x (GUI(x) \u2192 Software(x))\n\u2200x (Software(x) \u2192 Free(x) \u2295 Paid(x))\n\u2200x (Paid(x) \u2227 Software(x) \u2192 \u00acUnderGNULicense(x))\nUnderGNULicense(tora)", "conclusion": "TOra is a free software.", "conclusion-FOL": "Free(tora) \u2227 Software(tora)", "label": "True", "example_id": 593}
{"story_id": 424, "premises": "Customers choose a Prime Video plan or an HBO Max Plan, or both. \nAll customers who choose a Prime Video Plan are rewarded with a $30 gift card. \nThere are no customers who do not choose any plan. \nNone of the customers who are rewarded with a $30 gift card are older than 80.\nAll the customers are either older than 80 or between the ages of 60 and 80.\nJames is a customer who is not between the ages of 60 and 80. ", "premises-FOL": "\u2200x (Customer(x) \u2192 (Choose(x, primeVideoPlan) \u2228 Choose(x, hBOMaxPlan)))\n\u2200x ((Customer(x) \u2227 Choose(x, hBOMaxPlan)) \u2192 RewardWith(x, giftCard))\n\u2200x (Customer(x) \u2192 (\u2203y(Plan(y) \u2227 Choose(x, y))))\n\u2200x ((Customer(x) \u2227 RewardWith(x, giftCard)) \u2192 (\u00acOlderThan(x, num80)))\n\u2200x (Customer(x) \u2192 (\u2203y(GreaterThan(y, num80) \u2227 Age(james,y)) \u2295 (\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))))\nCustomer(james) \u2227 (\u00ac\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))", "conclusion": "James is a customer who does not choose any plans.", "conclusion-FOL": "Choose(james, noPlan)", "label": "False", "example_id": 1199}
{"story_id": 424, "premises": "Customers choose a Prime Video plan or an HBO Max Plan, or both. \nAll customers who choose a Prime Video Plan are rewarded with a $30 gift card. \nThere are no customers who do not choose any plan. \nNone of the customers who are rewarded with a $30 gift card are older than 80.\nAll the customers are either older than 80 or between the ages of 60 and 80.\nJames is a customer who is not between the ages of 60 and 80. ", "premises-FOL": "\u2200x (Customer(x) \u2192 (Choose(x, primeVideoPlan) \u2228 Choose(x, hBOMaxPlan)))\n\u2200x ((Customer(x) \u2227 Choose(x, hBOMaxPlan)) \u2192 RewardWith(x, giftCard))\n\u2200x (Customer(x) \u2192 (\u2203y(Plan(y) \u2227 Choose(x, y))))\n\u2200x ((Customer(x) \u2227 RewardWith(x, giftCard)) \u2192 (\u00acOlderThan(x, num80)))\n\u2200x (Customer(x) \u2192 (\u2203y(GreaterThan(y, num80) \u2227 Age(james,y)) \u2295 (\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))))\nCustomer(james) \u2227 (\u00ac\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))", "conclusion": "James is a customer who chooses a Prime Video plan or does not choose any plans.", "conclusion-FOL": "Choose(james, planA) \u2228 Choose(james, noPlan)", "label": "True", "example_id": 1200}
{"story_id": 424, "premises": "Customers choose a Prime Video plan or an HBO Max Plan, or both. \nAll customers who choose a Prime Video Plan are rewarded with a $30 gift card. \nThere are no customers who do not choose any plan. \nNone of the customers who are rewarded with a $30 gift card are older than 80.\nAll the customers are either older than 80 or between the ages of 60 and 80.\nJames is a customer who is not between the ages of 60 and 80. ", "premises-FOL": "\u2200x (Customer(x) \u2192 (Choose(x, primeVideoPlan) \u2228 Choose(x, hBOMaxPlan)))\n\u2200x ((Customer(x) \u2227 Choose(x, hBOMaxPlan)) \u2192 RewardWith(x, giftCard))\n\u2200x (Customer(x) \u2192 (\u2203y(Plan(y) \u2227 Choose(x, y))))\n\u2200x ((Customer(x) \u2227 RewardWith(x, giftCard)) \u2192 (\u00acOlderThan(x, num80)))\n\u2200x (Customer(x) \u2192 (\u2203y(GreaterThan(y, num80) \u2227 Age(james,y)) \u2295 (\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))))\nCustomer(james) \u2227 (\u00ac\u2203y(Between(y, num60, num80) \u2227 Age(james, y)))", "conclusion": "Suppose James is a customer who chooses the Prime Video plan or does not choose any plans, then he is either rewarded a $30 gift card or chooses the HBO Max plan.", "conclusion-FOL": "Choose(james, planA) \u2228 Choose(james, noPlan) \u2192 RewardWith(james, giftCard) \u2295 Choose(james, planB)", "label": "False", "example_id": 1201}
{"story_id": 173, "premises": "Detroit City is a horse.\nSome horses are racehorses.\nIf a horse falls in a race, it poses risks to its rider.\nDetroit City fell in a race.\nA horse is a racehorse if it is in a race.", "premises-FOL": "Horse(detroitcity)\n\u2203x (Horse(x) \u2227 Racehorse(x))\n\u2200x (Horse(x) \u2227 InRace(x) \u2227 Falls(x) \u2192 PoseRiskTo(x, rider))\nInRace(detroitcity) \u2227 Fall(detroitcity)\n\u2200x (Horse(x) \u2227 InRace(x) \u2192 Racehorse(x))", "conclusion": "Detroit City has been in multiple races.", "conclusion-FOL": "MultipleRace(detroitcity)", "label": "Uncertain", "example_id": 497}
{"story_id": 173, "premises": "Detroit City is a horse.\nSome horses are racehorses.\nIf a horse falls in a race, it poses risks to its rider.\nDetroit City fell in a race.\nA horse is a racehorse if it is in a race.", "premises-FOL": "Horse(detroitcity)\n\u2203x (Horse(x) \u2227 Racehorse(x))\n\u2200x (Horse(x) \u2227 InRace(x) \u2227 Falls(x) \u2192 PoseRiskTo(x, rider))\nInRace(detroitcity) \u2227 Fall(detroitcity)\n\u2200x (Horse(x) \u2227 InRace(x) \u2192 Racehorse(x))", "conclusion": "Detroit City poses risks to its rider.", "conclusion-FOL": "PoseRiskTo(detroitcity, rider)", "label": "True", "example_id": 498}
{"story_id": 173, "premises": "Detroit City is a horse.\nSome horses are racehorses.\nIf a horse falls in a race, it poses risks to its rider.\nDetroit City fell in a race.\nA horse is a racehorse if it is in a race.", "premises-FOL": "Horse(detroitcity)\n\u2203x (Horse(x) \u2227 Racehorse(x))\n\u2200x (Horse(x) \u2227 InRace(x) \u2227 Falls(x) \u2192 PoseRiskTo(x, rider))\nInRace(detroitcity) \u2227 Fall(detroitcity)\n\u2200x (Horse(x) \u2227 InRace(x) \u2192 Racehorse(x))", "conclusion": "Detroit City is a racehorse.", "conclusion-FOL": "Racehorse(detroitcity)", "label": "True", "example_id": 499}
{"story_id": 112, "premises": "Frederick Monhoff was an architect, artist, and illustrator.\nFrederick Monhoff was an American.\nAn artist is good at physical or conceptual art.\nAll Americans are American citizens.", "premises-FOL": "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)\nAmerican(monhoff)\n\u2200x (Artist(x) \u2192 GoodAt(x, physicalArt) \u2228 GoodAt(x, conceptualArt))\n\u2200x (American(x) \u2192 AmericanCitizen(x))", "conclusion": "Frederick Monhoff was good at physical art.", "conclusion-FOL": "GoodAt(monhoff, physicalArt)", "label": "Uncertain", "example_id": 339}
{"story_id": 112, "premises": "Frederick Monhoff was an architect, artist, and illustrator.\nFrederick Monhoff was an American.\nAn artist is good at physical or conceptual art.\nAll Americans are American citizens.", "premises-FOL": "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)\nAmerican(monhoff)\n\u2200x (Artist(x) \u2192 GoodAt(x, physicalArt) \u2228 GoodAt(x, conceptualArt))\n\u2200x (American(x) \u2192 AmericanCitizen(x))", "conclusion": "No illustrator was an American citizen.", "conclusion-FOL": "\u00ac(\u2203x (Illustrator(x) \u2227 AmericanCitizen(x)))", "label": "False", "example_id": 340}
{"story_id": 18, "premises": "Miroslav Fiedler was a Czech mathematician.\nMiroslav Fiedler is known for his contributions to linear algebra and graph theory.\nMiroslav Fiedler is honored by the Fiedler eigenvalue.\nFiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "premises-FOL": "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)", "conclusion": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "conclusion-FOL": "\u2203x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) \u2227 HonoredBy(miroslavFiedler, x))", "label": "True", "example_id": 51}
{"story_id": 18, "premises": "Miroslav Fiedler was a Czech mathematician.\nMiroslav Fiedler is known for his contributions to linear algebra and graph theory.\nMiroslav Fiedler is honored by the Fiedler eigenvalue.\nFiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "premises-FOL": "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)", "conclusion": "Miroslav Fiedler was a French mathematician.", "conclusion-FOL": "French(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)", "label": "Uncertain", "example_id": 52}
{"story_id": 18, "premises": "Miroslav Fiedler was a Czech mathematician.\nMiroslav Fiedler is known for his contributions to linear algebra and graph theory.\nMiroslav Fiedler is honored by the Fiedler eigenvalue.\nFiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "premises-FOL": "Czech(miroslavFiedler) \u2227 Mathematician(miroslavFiedler)\nKnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)\nHonoredBy(miroslavFiedler, fiedlerEigenvalue)\nTheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)", "conclusion": "A Czech mathematician is known for his contributions to linear algebra and graph theory.", "conclusion-FOL": "\u2203x (Czech(x) \u2227 Mathematician(x) \u2227 KnownFor(x, contributionsToLinearAlgebraAndGraphTheory))", "label": "True", "example_id": 53}
{"story_id": 153, "premises": "A laptop is a computer.\nYou can play games on a computer.\nA phone is not a computer.", "premises-FOL": "\u2200x (Laptop(x) \u2192 Computer(x))\n\u2200x (Computer(x) \u2192 CanPlayGameOn(x))\n\u2200x (Phone(x) \u2192 \u00acComputer(x))", "conclusion": "You can play games on a laptop.", "conclusion-FOL": "\u2200x (Laptop(x) \u2192 CanPlayGameOn(x))", "label": "True", "example_id": 444}
{"story_id": 153, "premises": "A laptop is a computer.\nYou can play games on a computer.\nA phone is not a computer.", "premises-FOL": "\u2200x (Laptop(x) \u2192 Computer(x))\n\u2200x (Computer(x) \u2192 CanPlayGameOn(x))\n\u2200x (Phone(x) \u2192 \u00acComputer(x))", "conclusion": "You can not play games on a phone.", "conclusion-FOL": "\u2200x (Phone(x) \u2192 \u00acCanPlayGameOn(x))", "label": "Uncertain", "example_id": 445}
{"story_id": 11, "premises": "Walter Folger Brown was an American politician and lawyer who served as the postmaster general.\nWalter Folger Brown graduated from Harvard University with a Bachelor of Arts.\nWhile they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.\nKatherin Hafer married Walter Folger Brown.", "premises-FOL": "AmericanPolitician(walterBrown) \u2227 Lawyer(walterBrown) \u2227 ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) \u2227 GraduatedWith(walterBrown, bachelorsOfArt)\n\u2203t(In(walterBrown, toledo, t) \u2227 In(walterBrownFather, toledo, t) \u2227 PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)", "conclusion": "Walter Folger Brown graduated with a Bachelor of Arts.", "conclusion-FOL": "GraduatedWith(walterBrown, bachelorsOfArt)", "label": "True", "example_id": 29}
{"story_id": 11, "premises": "Walter Folger Brown was an American politician and lawyer who served as the postmaster general.\nWalter Folger Brown graduated from Harvard University with a Bachelor of Arts.\nWhile they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.\nKatherin Hafer married Walter Folger Brown.", "premises-FOL": "AmericanPolitician(walterBrown) \u2227 Lawyer(walterBrown) \u2227 ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) \u2227 GraduatedWith(walterBrown, bachelorsOfArt)\n\u2203t(In(walterBrown, toledo, t) \u2227 In(walterBrownFather, toledo, t) \u2227 PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)", "conclusion": "Walter Folger Brown's father was in Toledo.", "conclusion-FOL": "\u2203t(In(walterBrownFather, toledo, t))", "label": "True", "example_id": 30}
{"story_id": 11, "premises": "Walter Folger Brown was an American politician and lawyer who served as the postmaster general.\nWalter Folger Brown graduated from Harvard University with a Bachelor of Arts.\nWhile they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.\nKatherin Hafer married Walter Folger Brown.", "premises-FOL": "AmericanPolitician(walterBrown) \u2227 Lawyer(walterBrown) \u2227 ServedAs(walterBrown, postMasterGeneral)\nGraduated(walterBrown, harvard) \u2227 GraduatedWith(walterBrown, bachelorsOfArt)\n\u2203t(In(walterBrown, toledo, t) \u2227 In(walterBrownFather, toledo, t) \u2227 PracticedLawTogether(walterBrown, walterBrownFather, t))\nMarried(katherinHafer, walterBrown)", "conclusion": "Walter Folger Brown was not in Toledo.", "conclusion-FOL": "\u2203t(\u00acIn(walterBrownFather, toledo, t))", "label": "False", "example_id": 31}
{"story_id": 410, "premises": "All products designed by Apple are sold at Apple Stores.\nAll products with Apple logos are designed by Apple.\nAll Macbooks have Apple logos.\nAll products with Apple M2 chips are Mackbooks.\nA Thinkpad X1 is not both sold in Apple Stores and is a Macbook.", "premises-FOL": "\u2200x ((Product(x) \u2227 DesignedBy(x, apple)) \u2192 SoldIn(x, appleStore))\n\u2200x ((Product(x) \u2227 With(x, appleLogo)) \u2192 DesignedBy(x, apple))\n\u2200x (Macbook(x) \u2192 With(x, appleLogo))\n\u2200x ((Product(x) \u2227 With(x, appleM2Chip)) \u2192 Macbook(x))\n\u00ac(SoldIn(thinkpadX1, appleStore) \u2227 Macbook(thinkpadX1))", "conclusion": "The Thinkpad X1 has an Apple M2 chip.", "conclusion-FOL": "With(thinkpadX1, appleM2Chip)", "label": "False", "example_id": 1147}
{"story_id": 410, "premises": "All products designed by Apple are sold at Apple Stores.\nAll products with Apple logos are designed by Apple.\nAll Macbooks have Apple logos.\nAll products with Apple M2 chips are Mackbooks.\nA Thinkpad X1 is not both sold in Apple Stores and is a Macbook.", "premises-FOL": "\u2200x ((Product(x) \u2227 DesignedBy(x, apple)) \u2192 SoldIn(x, appleStore))\n\u2200x ((Product(x) \u2227 With(x, appleLogo)) \u2192 DesignedBy(x, apple))\n\u2200x (Macbook(x) \u2192 With(x, appleLogo))\n\u2200x ((Product(x) \u2227 With(x, appleM2Chip)) \u2192 Macbook(x))\n\u00ac(SoldIn(thinkpadX1, appleStore) \u2227 Macbook(thinkpadX1))", "conclusion": "The Thinkpad X1 is sold in Apple Stores.", "conclusion-FOL": "SoldIn(thinkpadX1, appleStore)", "label": "Uncertain", "example_id": 1148}
{"story_id": 410, "premises": "All products designed by Apple are sold at Apple Stores.\nAll products with Apple logos are designed by Apple.\nAll Macbooks have Apple logos.\nAll products with Apple M2 chips are Mackbooks.\nA Thinkpad X1 is not both sold in Apple Stores and is a Macbook.", "premises-FOL": "\u2200x ((Product(x) \u2227 DesignedBy(x, apple)) \u2192 SoldIn(x, appleStore))\n\u2200x ((Product(x) \u2227 With(x, appleLogo)) \u2192 DesignedBy(x, apple))\n\u2200x (Macbook(x) \u2192 With(x, appleLogo))\n\u2200x ((Product(x) \u2227 With(x, appleM2Chip)) \u2192 Macbook(x))\n\u00ac(SoldIn(thinkpadX1, appleStore) \u2227 Macbook(thinkpadX1))", "conclusion": "The Thinkpad X1 has an Apple M2 chip and is a Macbook.", "conclusion-FOL": "With(thinkpadX1, appleM2Chip) \u2227 Macbook(thinkpadX1)", "label": "False", "example_id": 1149}
{"story_id": 410, "premises": "All products designed by Apple are sold at Apple Stores.\nAll products with Apple logos are designed by Apple.\nAll Macbooks have Apple logos.\nAll products with Apple M2 chips are Mackbooks.\nA Thinkpad X1 is not both sold in Apple Stores and is a Macbook.", "premises-FOL": "\u2200x ((Product(x) \u2227 DesignedBy(x, apple)) \u2192 SoldIn(x, appleStore))\n\u2200x ((Product(x) \u2227 With(x, appleLogo)) \u2192 DesignedBy(x, apple))\n\u2200x (Macbook(x) \u2192 With(x, appleLogo))\n\u2200x ((Product(x) \u2227 With(x, appleM2Chip)) \u2192 Macbook(x))\n\u00ac(SoldIn(thinkpadX1, appleStore) \u2227 Macbook(thinkpadX1))", "conclusion": "The Thinkpad X1 either has an Apple M2 chip or is a Macbook.", "conclusion-FOL": "With(thinkpadX1, appleM2Chip)) \u2295 Macbook(thinkpadX1)", "label": "False", "example_id": 1150}
{"story_id": 410, "premises": "All products designed by Apple are sold at Apple Stores.\nAll products with Apple logos are designed by Apple.\nAll Macbooks have Apple logos.\nAll products with Apple M2 chips are Mackbooks.\nA Thinkpad X1 is not both sold in Apple Stores and is a Macbook.", "premises-FOL": "\u2200x ((Product(x) \u2227 DesignedBy(x, apple)) \u2192 SoldIn(x, appleStore))\n\u2200x ((Product(x) \u2227 With(x, appleLogo)) \u2192 DesignedBy(x, apple))\n\u2200x (Macbook(x) \u2192 With(x, appleLogo))\n\u2200x ((Product(x) \u2227 With(x, appleM2Chip)) \u2192 Macbook(x))\n\u00ac(SoldIn(thinkpadX1, appleStore) \u2227 Macbook(thinkpadX1))", "conclusion": "If the Thinkpad X1 has an Apple M2 chip and is a Macbook, then it neither has an Apple M2 chip nor is sold in Apple Stores.", "conclusion-FOL": "(With(thinkpadX1, appleM2Chip) \u2227 Macbook(thinkpadX1)) \u2192 \u00ac(With(thinkpadX1, appleM2Chip) \u2228 SoldIn(thinkpadX1, appleStore))", "label": "True", "example_id": 1151}
{"story_id": 205, "premises": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.\nOxford Street and Regent Street are in London.\nJohn Nash designed a construction on Regent Street.\nJohn Nash designed Oxford Circus.\nJohn Nash is a British architect.\nOxford Circus is the entrance to Oxford Circus tube station, a part of the Central line in 1900.", "premises-FOL": "RoadJunction(oxfordCircus) \u2227 Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) \u2227 In(regentSt, london)\nDesigned(nash, construction) \u2227 On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) \u2227 British(nash)\nEntraceTo(oxfordCircus, tubeStation) \u2227 PartOf(tubeStation, centralline) \u2227 In(tubeStation, 1900)", "conclusion": "Oxford Circus is in London.", "conclusion-FOL": "In(oxfordCircus, london)", "label": "True", "example_id": 585}
{"story_id": 205, "premises": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.\nOxford Street and Regent Street are in London.\nJohn Nash designed a construction on Regent Street.\nJohn Nash designed Oxford Circus.\nJohn Nash is a British architect.\nOxford Circus is the entrance to Oxford Circus tube station, a part of the Central line in 1900.", "premises-FOL": "RoadJunction(oxfordCircus) \u2227 Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) \u2227 In(regentSt, london)\nDesigned(nash, construction) \u2227 On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) \u2227 British(nash)\nEntraceTo(oxfordCircus, tubeStation) \u2227 PartOf(tubeStation, centralline) \u2227 In(tubeStation, 1900)", "conclusion": "Oxford Circus is designed by a British architect.", "conclusion-FOL": "\u2203x (British(x) \u2227 Architect(x) \u2227 Design(x, oxfordCircus))", "label": "True", "example_id": 586}
{"story_id": 205, "premises": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.\nOxford Street and Regent Street are in London.\nJohn Nash designed a construction on Regent Street.\nJohn Nash designed Oxford Circus.\nJohn Nash is a British architect.\nOxford Circus is the entrance to Oxford Circus tube station, a part of the Central line in 1900.", "premises-FOL": "RoadJunction(oxfordCircus) \u2227 Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) \u2227 In(regentSt, london)\nDesigned(nash, construction) \u2227 On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) \u2227 British(nash)\nEntraceTo(oxfordCircus, tubeStation) \u2227 PartOf(tubeStation, centralline) \u2227 In(tubeStation, 1900)", "conclusion": "John Nash designed the Central line in 1900.", "conclusion-FOL": "\u2200x (PartOf(x, centralLine) \u2192 Design(johnNash, x))", "label": "Uncertain", "example_id": 587}
{"story_id": 205, "premises": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.\nOxford Street and Regent Street are in London.\nJohn Nash designed a construction on Regent Street.\nJohn Nash designed Oxford Circus.\nJohn Nash is a British architect.\nOxford Circus is the entrance to Oxford Circus tube station, a part of the Central line in 1900.", "premises-FOL": "RoadJunction(oxfordCircus) \u2227 Connect(oxfordCircus, oxfordSt, regentSt)\nIn(oxfordSt, london) \u2227 In(regentSt, london)\nDesigned(nash, construction) \u2227 On(construction, regentSt)\nDesigned(nash, oxfordCircus)\nArchitect(nash) \u2227 British(nash)\nEntraceTo(oxfordCircus, tubeStation) \u2227 PartOf(tubeStation, centralline) \u2227 In(tubeStation, 1900)", "conclusion": "Regent Street is not in London.", "conclusion-FOL": "\u00acIn(regentStreet, london)", "label": "False", "example_id": 588}
{"story_id": 473, "premises": "All pets in my house are either cats or dogs.\nAll the dogs in my house bark.\nGhosts do not exist.\nIf some pet in my house barks, then it is not dead.\nAll of the pets in my house are either dead or alive.\nJojo is a pet in my house, and it is not alive.", "premises-FOL": "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))\n\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))\n\u2200x (\u00acGhost(x))\n\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))\n\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))\nPet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)", "conclusion": "Jojo is a ghost.", "conclusion-FOL": "Ghost(jojo)", "label": "False", "example_id": 1369}
{"story_id": 473, "premises": "All pets in my house are either cats or dogs.\nAll the dogs in my house bark.\nGhosts do not exist.\nIf some pet in my house barks, then it is not dead.\nAll of the pets in my house are either dead or alive.\nJojo is a pet in my house, and it is not alive.", "premises-FOL": "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))\n\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))\n\u2200x (\u00acGhost(x))\n\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))\n\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))\nPet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)", "conclusion": "Jojo is a cat or a ghost.", "conclusion-FOL": "Cat(jojo) \u2228 Ghost(jojo)", "label": "True", "example_id": 1370}
{"story_id": 473, "premises": "All pets in my house are either cats or dogs.\nAll the dogs in my house bark.\nGhosts do not exist.\nIf some pet in my house barks, then it is not dead.\nAll of the pets in my house are either dead or alive.\nJojo is a pet in my house, and it is not alive.", "premises-FOL": "\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Cat(x) \u2295 Dog(x))\n\u2200x (Dog(x) \u2227 In(x, myHouse) \u2192 Bark(x))\n\u2200x (\u00acGhost(x))\n\u2200x (Bark(x) \u2227 Pet(x) \u2227 In(x, myHouse) \u2192 \u00acDead(x))\n\u2200x (Pet(x) \u2227 In(x, myHouse) \u2192 Dead(x) \u2295 Alive(x))\nPet(jojo) \u2227 InMyHouse(jojo)\u2227 \u00acAlive(jojo)", "conclusion": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.", "conclusion-FOL": "Cat(jojo) \u2228 Ghost(jojo) \u2192 Bark(jojo) \u2295 Dog(jojo)", "label": "False", "example_id": 1371}
{"story_id": 440, "premises": "All tigers are cats.\nNo cats are dogs.\nAll Bengal tigers are tigers.\nAll huskies are dogs.\nFido is either a Bengal tiger or a cat.", "premises-FOL": "\u2200x (Tiger(x) \u2192 Cat(x))\n\u2200x (Cat(x) \u2192 \u00acDog(x))\n\u2200x (BengalTiger(x) \u2192 Tiger(x))\n\u2200x (Husky(x) \u2192 Dog(x))\nBengalTiger(fido) \u2295 Cat(fido)", "conclusion": "Fido is a husky animal.", "conclusion-FOL": "Husky(fido)", "label": "False", "example_id": 1264}
{"story_id": 440, "premises": "All tigers are cats.\nNo cats are dogs.\nAll Bengal tigers are tigers.\nAll huskies are dogs.\nFido is either a Bengal tiger or a cat.", "premises-FOL": "\u2200x (Tiger(x) \u2192 Cat(x))\n\u2200x (Cat(x) \u2192 \u00acDog(x))\n\u2200x (BengalTiger(x) \u2192 Tiger(x))\n\u2200x (Husky(x) \u2192 Dog(x))\nBengalTiger(fido) \u2295 Cat(fido)", "conclusion": "Fido is not a husky.", "conclusion-FOL": "\u00acHusky(fido)", "label": "True", "example_id": 1265}
{"story_id": 440, "premises": "All tigers are cats.\nNo cats are dogs.\nAll Bengal tigers are tigers.\nAll huskies are dogs.\nFido is either a Bengal tiger or a cat.", "premises-FOL": "\u2200x (Tiger(x) \u2192 Cat(x))\n\u2200x (Cat(x) \u2192 \u00acDog(x))\n\u2200x (BengalTiger(x) \u2192 Tiger(x))\n\u2200x (Husky(x) \u2192 Dog(x))\nBengalTiger(fido) \u2295 Cat(fido)", "conclusion": "Fido is a Bengal tiger.", "conclusion-FOL": "BengalTiger(fido)", "label": "Uncertain", "example_id": 1266}
{"story_id": 440, "premises": "All tigers are cats.\nNo cats are dogs.\nAll Bengal tigers are tigers.\nAll huskies are dogs.\nFido is either a Bengal tiger or a cat.", "premises-FOL": "\u2200x (Tiger(x) \u2192 Cat(x))\n\u2200x (Cat(x) \u2192 \u00acDog(x))\n\u2200x (BengalTiger(x) \u2192 Tiger(x))\n\u2200x (Husky(x) \u2192 Dog(x))\nBengalTiger(fido) \u2295 Cat(fido)", "conclusion": "Fido is neither a dog nor a husky.", "conclusion-FOL": "\u00acDog(fido) \u2227 \u00acHusky(fido)", "label": "True", "example_id": 1267}
{"story_id": 66, "premises": "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.\nIf a city is in a state in the US, the city is a US city.\nIf a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.\nThe 2028 Summer Olympics is scheduled to take place in Los Angeles.\nLos Angeles is a city in California.\nAtlanta is a US city.\nAtlanta is in Georgia.\nCalifornia is a state in the United States.\nBoxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.\nAtlanta in the United States held the 1996 Summer Olympics.", "premises-FOL": "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))\n\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))\n\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)", "conclusion": "The 2028 Summer Olympics will take place in the US.", "conclusion-FOL": "SummerOlympicsIn(unitedStates, yr2028)", "label": "True", "example_id": 195}
{"story_id": 66, "premises": "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.\nIf a city is in a state in the US, the city is a US city.\nIf a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.\nThe 2028 Summer Olympics is scheduled to take place in Los Angeles.\nLos Angeles is a city in California.\nAtlanta is a US city.\nAtlanta is in Georgia.\nCalifornia is a state in the United States.\nBoxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.\nAtlanta in the United States held the 1996 Summer Olympics.", "premises-FOL": "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))\n\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))\n\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)", "conclusion": "The 1996 Summer Olympics is not in Georgia.", "conclusion-FOL": "\u00acSummerOlympicsIn(georgia, yr1996)", "label": "False", "example_id": 196}
{"story_id": 66, "premises": "If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.\nIf a city is in a state in the US, the city is a US city.\nIf a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.\nThe 2028 Summer Olympics is scheduled to take place in Los Angeles.\nLos Angeles is a city in California.\nAtlanta is a US city.\nAtlanta is in Georgia.\nCalifornia is a state in the United States.\nBoxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.\nAtlanta in the United States held the 1996 Summer Olympics.", "premises-FOL": "\u2200x \u2200y ((SummerOlympicsIn(x,y) \u2227 In(x, unitedStates)) \u2192 SummerOlympicsIn(x, unitedStates))\n\u2200x \u2200y ((In(x, y) \u2227 In(y, unitedStates)) \u2192 In(x, unitedStates))\n\u2200x \u2200y \u2200z ((In(x, z) \u2227 State(z) \u2227 SummerOlympicsIn(x,y)) \u2192 SummerOlympicsIn(z, y))\nSummerOlympicsIn(losAngeles, yr2028)\nIn(losAngeles, california)\nIn(atlanta, unitedStates)\nIn(california, unitedStates)\nIn(atlanta, georgia)\n\u00acInSummerOlympicsIn(boxing, yr2028) \u2227 (\u00acInSummerOlympicsIn(modern_pentathlon, yr2028)) \u2227 (\u00acInSummerOlympicsIn(weightlifting, yr2028))\nSummerOlympicsIn(atlanta, yr1996)", "conclusion": "Skateboarding will appear at The 2028 Summer Olympics.", "conclusion-FOL": "InSummerOlympicsIn(skateboarding, yr2028)", "label": "Uncertain", "example_id": 197}
{"story_id": 9, "premises": "The taiga vole is a large vole found in northwestern North America. \nCats like playing with all voles.\nThe taiga vole lives in the boreal taiga zone.\nThe boreal taiga zone in North America is a cold place to live in.", "premises-FOL": "Vole(taigaVole) \u2227 LiveIn(taigaVole, northAmerica)\nLikePlayingWith(cat, taigaVole)\nLiveIn(taigaVole, borealTaigaZone)\n\u2200x ((LiveIn(x, northAmerica) \u2227 LiveIn(x, borealTaigaZone)) \u2192 LiveIn(x, coldPlace))", "conclusion": "Cats like playing with taiga vole.", "conclusion-FOL": "LikePlayingWith(cat, taigaVole)", "label": "True", "example_id": 23}
{"story_id": 9, "premises": "The taiga vole is a large vole found in northwestern North America. \nCats like playing with all voles.\nThe taiga vole lives in the boreal taiga zone.\nThe boreal taiga zone in North America is a cold place to live in.", "premises-FOL": "Vole(taigaVole) \u2227 LiveIn(taigaVole, northAmerica)\nLikePlayingWith(cat, taigaVole)\nLiveIn(taigaVole, borealTaigaZone)\n\u2200x ((LiveIn(x, northAmerica) \u2227 LiveIn(x, borealTaigaZone)) \u2192 LiveIn(x, coldPlace))", "conclusion": "Taiga vole's living place is not cold.", "conclusion-FOL": "\u00acLiveIn(taigaVole, coldPlace)", "label": "False", "example_id": 24}
{"story_id": 389, "premises": "A diseases affect females or males.\nNo women have prostate cancer.\nA cancer is either prostate cancer or non-prostate cancer. \nNo type of cancer is without mutations.\nAll non-prostate cancers are a type of cancer.\nIf adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both.", "premises-FOL": "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )\n\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))\n\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) \n\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) \n\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) \n(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))", "conclusion": "Adenocarcinoma is a prostate cancer.", "conclusion-FOL": "ProstateCancer(adenocarcinoma)", "label": "Uncertain", "example_id": 1041}
{"story_id": 389, "premises": "A diseases affect females or males.\nNo women have prostate cancer.\nA cancer is either prostate cancer or non-prostate cancer. \nNo type of cancer is without mutations.\nAll non-prostate cancers are a type of cancer.\nIf adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both.", "premises-FOL": "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )\n\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))\n\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) \n\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) \n\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) \n(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))", "conclusion": "Adenocarcinoma is a disease in women.", "conclusion-FOL": "Affect(adenocarcinoma, men)", "label": "True", "example_id": 1042}
{"story_id": 389, "premises": "A diseases affect females or males.\nNo women have prostate cancer.\nA cancer is either prostate cancer or non-prostate cancer. \nNo type of cancer is without mutations.\nAll non-prostate cancers are a type of cancer.\nIf adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both.", "premises-FOL": "\u2200x (Disease(x) \u2192 (Affects(x, female) \u2228 Affects(x, male)) )\n\u2200x (Affect(x, female) \u2192 \u00acProstateCancer(x))\n\u2200x (ProstateCancer(x) \u2228 NonProstateCancer(x)) \n\u2200x (Cancer(x) \u2192 \u00acWithout(x, mutation)) \n\u2200x (NonProstateCancer(x) \u2192 Cancer(x)) \n(Cancer(adenocarcinoma) \u2228 Without(adenocarcinoma, mutation)) \u2192 (Affect(adenocarcinoma, female) \u2228 Without(adenocarcinoma, mutation))", "conclusion": "If adenocarcinoma is a disease in women or without mutations, then adenocarcinoma is without mutations and a non-prostate cancer.", "conclusion-FOL": "(Affect(adenocarcinoma, men) \u2228 Without(adenocarcinoma, mutation)) \u2192 (NonProstateCancer(adenocarcinoma) \u2227 Without(adenocarcinoma, mutation))", "label": "False", "example_id": 1043}
{"story_id": 59, "premises": "Some monitors equipped in the lab are produced by the company named AOC. \nAll monitors equipped in the lab are cheaper than their original prices. \nIf a monitor is cheaper than its original price, then its resolution is 1080p. \nIf a monitor has a resolution of 1080p, then it does not support the type-c port. \nLG34 is equipped in the lab.  ", "premises-FOL": "\u2203x \u2203y  (LabMonitor(x) \u2227 AOC(x) \u2227 (\u00ac(x=y)) \u2227 LabMonitor(y) \u2227 AOC(y))\n\u2200x (LabMonitor(x) \u2192 Discounted(x))\n\u2200x (Discounted(x) \u2192 A1080p(x))\n\u2200x (A1080p(x) \u2192 \u00acTypeC(x))\nLabMonitor(lg-34)", "conclusion": "LG34 machine is produced by AOC.", "conclusion-FOL": "AOC(lg-34)", "label": "Uncertain", "example_id": 174}
{"story_id": 59, "premises": "Some monitors equipped in the lab are produced by the company named AOC. \nAll monitors equipped in the lab are cheaper than their original prices. \nIf a monitor is cheaper than its original price, then its resolution is 1080p. \nIf a monitor has a resolution of 1080p, then it does not support the type-c port. \nLG34 is equipped in the lab.  ", "premises-FOL": "\u2203x \u2203y  (LabMonitor(x) \u2227 AOC(x) \u2227 (\u00ac(x=y)) \u2227 LabMonitor(y) \u2227 AOC(y))\n\u2200x (LabMonitor(x) \u2192 Discounted(x))\n\u2200x (Discounted(x) \u2192 A1080p(x))\n\u2200x (A1080p(x) \u2192 \u00acTypeC(x))\nLabMonitor(lg-34)", "conclusion": "LG34 machine does not support the type-c port.", "conclusion-FOL": "\u00acTypeC(lg-34)", "label": "True", "example_id": 175}
{"story_id": 59, "premises": "Some monitors equipped in the lab are produced by the company named AOC. \nAll monitors equipped in the lab are cheaper than their original prices. \nIf a monitor is cheaper than its original price, then its resolution is 1080p. \nIf a monitor has a resolution of 1080p, then it does not support the type-c port. \nLG34 is equipped in the lab.  ", "premises-FOL": "\u2203x \u2203y  (LabMonitor(x) \u2227 AOC(x) \u2227 (\u00ac(x=y)) \u2227 LabMonitor(y) \u2227 AOC(y))\n\u2200x (LabMonitor(x) \u2192 Discounted(x))\n\u2200x (Discounted(x) \u2192 A1080p(x))\n\u2200x (A1080p(x) \u2192 \u00acTypeC(x))\nLabMonitor(lg-34)", "conclusion": "LG34 is not with a resolution of 1080p.", "conclusion-FOL": "\u00acA1080p(lg-34)", "label": "False", "example_id": 176}
{"story_id": 412, "premises": "All fruits sold at Nica's market are shipped from Colombia. \nSome fruits sold in New Haven are shipped from Mexico.\nNo fruits shipped from Colombia are sold at the local farmers market in New Haven. \nAvocados are a kind of fruit sold at the local farmers market in New Haven or at Nica's market. \nAvocados are either shipped from Colombia and sold in New Haven, or neither.", "premises-FOL": "\u2200x ((Fruit(x) \u2227 SoldAt(x, nicasMarket)) \u2192 ShippedFrom(x, colombia))\n\u2203x \u2203y (Fruit(x) \u2227 SoldIn(x, newHaven) \u2227 ShippedFrom(x, mexico) \u2227 (\u00ac(x=y)) \u2227 Fruit(y) \u2227 SoldIn(y, newHaven) \u2227 ShippedFrom(y, mexico))\n\u2200x ((Fruit(x) \u2227 ShippedFrom(x, colombia)) \u2192 \u00ac(SoldAt(x, localFarmersMarket)))\nFruit(avocado) \u2227 (SoldAt(avocado, localFarmersMarket) \u2228 SoldAt(avocado, nica'sMarket))\n\u00ac(ShippedFrom(avocado, colombia) \u2295 SoldIn(avocado, newHaven))", "conclusion": "Avocados are a kind of fruit sold at the local farmers market in New Haven.", "conclusion-FOL": "Fruit(avocado) \u2227 SoldAt(avocado, localFarmersMarket)", "label": "Uncertain", "example_id": 1155}
{"story_id": 412, "premises": "All fruits sold at Nica's market are shipped from Colombia. \nSome fruits sold in New Haven are shipped from Mexico.\nNo fruits shipped from Colombia are sold at the local farmers market in New Haven. \nAvocados are a kind of fruit sold at the local farmers market in New Haven or at Nica's market. \nAvocados are either shipped from Colombia and sold in New Haven, or neither.", "premises-FOL": "\u2200x ((Fruit(x) \u2227 SoldAt(x, nicasMarket)) \u2192 ShippedFrom(x, colombia))\n\u2203x \u2203y (Fruit(x) \u2227 SoldIn(x, newHaven) \u2227 ShippedFrom(x, mexico) \u2227 (\u00ac(x=y)) \u2227 Fruit(y) \u2227 SoldIn(y, newHaven) \u2227 ShippedFrom(y, mexico))\n\u2200x ((Fruit(x) \u2227 ShippedFrom(x, colombia)) \u2192 \u00ac(SoldAt(x, localFarmersMarket)))\nFruit(avocado) \u2227 (SoldAt(avocado, localFarmersMarket) \u2228 SoldAt(avocado, nica'sMarket))\n\u00ac(ShippedFrom(avocado, colombia) \u2295 SoldIn(avocado, newHaven))", "conclusion": "Avocados are either sold at the local farmers market in New Haven or are sold in New Haven.", "conclusion-FOL": "SoldAt(avocado, localFarmersMarket) \u2295 SoldIn(avocado, newHaven)", "label": "True", "example_id": 1156}
{"story_id": 412, "premises": "All fruits sold at Nica's market are shipped from Colombia. \nSome fruits sold in New Haven are shipped from Mexico.\nNo fruits shipped from Colombia are sold at the local farmers market in New Haven. \nAvocados are a kind of fruit sold at the local farmers market in New Haven or at Nica's market. \nAvocados are either shipped from Colombia and sold in New Haven, or neither.", "premises-FOL": "\u2200x ((Fruit(x) \u2227 SoldAt(x, nicasMarket)) \u2192 ShippedFrom(x, colombia))\n\u2203x \u2203y (Fruit(x) \u2227 SoldIn(x, newHaven) \u2227 ShippedFrom(x, mexico) \u2227 (\u00ac(x=y)) \u2227 Fruit(y) \u2227 SoldIn(y, newHaven) \u2227 ShippedFrom(y, mexico))\n\u2200x ((Fruit(x) \u2227 ShippedFrom(x, colombia)) \u2192 \u00ac(SoldAt(x, localFarmersMarket)))\nFruit(avocado) \u2227 (SoldAt(avocado, localFarmersMarket) \u2228 SoldAt(avocado, nica'sMarket))\n\u00ac(ShippedFrom(avocado, colombia) \u2295 SoldIn(avocado, newHaven))", "conclusion": "Avocados are either sold in New Haven or sold at Nica's market.", "conclusion-FOL": "SoldIn(avocado, newHaven) \u2295 SoldAt(x, nica'sMarket)", "label": "False", "example_id": 1157}
{"story_id": 412, "premises": "All fruits sold at Nica's market are shipped from Colombia. \nSome fruits sold in New Haven are shipped from Mexico.\nNo fruits shipped from Colombia are sold at the local farmers market in New Haven. \nAvocados are a kind of fruit sold at the local farmers market in New Haven or at Nica's market. \nAvocados are either shipped from Colombia and sold in New Haven, or neither.", "premises-FOL": "\u2200x ((Fruit(x) \u2227 SoldAt(x, nicasMarket)) \u2192 ShippedFrom(x, colombia))\n\u2203x \u2203y (Fruit(x) \u2227 SoldIn(x, newHaven) \u2227 ShippedFrom(x, mexico) \u2227 (\u00ac(x=y)) \u2227 Fruit(y) \u2227 SoldIn(y, newHaven) \u2227 ShippedFrom(y, mexico))\n\u2200x ((Fruit(x) \u2227 ShippedFrom(x, colombia)) \u2192 \u00ac(SoldAt(x, localFarmersMarket)))\nFruit(avocado) \u2227 (SoldAt(avocado, localFarmersMarket) \u2228 SoldAt(avocado, nica'sMarket))\n\u00ac(ShippedFrom(avocado, colombia) \u2295 SoldIn(avocado, newHaven))", "conclusion": "If avocados are not both sold at the local farmers market in New Haven and shipped from Columbia, then they are neither sold at the local farmers market in New Haven nor in New Haven generally.", "conclusion-FOL": "\u00ac(SoldAt(avocado, localFarmersMarket) \u2227 ShippedFrom(avocado, colombia)) \u2192 \u00acSoldAt(avocado, localFarmersMarket) \u2227 \u00acSoldIn(avocado, newHaven)", "label": "False", "example_id": 1158}
{"story_id": 418, "premises": "Some monitors equipped in the library are produced by AOC. \nAll monitors equipped in the library are cheaper than 800 dollars. \nAll monitors cheaper than 800 dollars are with a resolution lower than 1080p. \nIf a monitor has a resolution lower than 1080p, then it does not support the type-c port. \nA-2017 supports the type-c port. ", "premises-FOL": "\u2203x \u2203y(Monitor(x) \u2227 ProducedBy(x, aOC) \u2227 In(x, library) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, aOC) \u2227 In(y, library))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 CheaperThan(x, dollars800))\n\u2200x ((Monitor(x) \u2227 CheaperThan(x, dollars800)) \u2192 ResolutionLessThan(x, p1080))\n\u2200x ((Monitor(x) \u2227 ResolutionLessThan(x, p1080)) \u2192 \u00acSupports(x, type-CPort))\nSupports(a-2017, type-CPort)", "conclusion": "A-2017 is produced by AOC.", "conclusion-FOL": "ProducedBy(x, aOC)", "label": "Uncertain", "example_id": 1178}
{"story_id": 418, "premises": "Some monitors equipped in the library are produced by AOC. \nAll monitors equipped in the library are cheaper than 800 dollars. \nAll monitors cheaper than 800 dollars are with a resolution lower than 1080p. \nIf a monitor has a resolution lower than 1080p, then it does not support the type-c port. \nA-2017 supports the type-c port. ", "premises-FOL": "\u2203x \u2203y(Monitor(x) \u2227 ProducedBy(x, aOC) \u2227 In(x, library) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, aOC) \u2227 In(y, library))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 CheaperThan(x, dollars800))\n\u2200x ((Monitor(x) \u2227 CheaperThan(x, dollars800)) \u2192 ResolutionLessThan(x, p1080))\n\u2200x ((Monitor(x) \u2227 ResolutionLessThan(x, p1080)) \u2192 \u00acSupports(x, type-CPort))\nSupports(a-2017, type-CPort)", "conclusion": "A-2017 is produced by AOC and equipped in the library.", "conclusion-FOL": "ProducedBy(a-2017, aOC) \u2227 In(a-2017, library)", "label": "False", "example_id": 1179}
{"story_id": 418, "premises": "Some monitors equipped in the library are produced by AOC. \nAll monitors equipped in the library are cheaper than 800 dollars. \nAll monitors cheaper than 800 dollars are with a resolution lower than 1080p. \nIf a monitor has a resolution lower than 1080p, then it does not support the type-c port. \nA-2017 supports the type-c port. ", "premises-FOL": "\u2203x \u2203y(Monitor(x) \u2227 ProducedBy(x, aOC) \u2227 In(x, library) \u2227 (\u00ac(x=y)) \u2227 Monitor(y) \u2227 ProducedBy(y, aOC) \u2227 In(y, library))\n\u2200x ((Monitor(x) \u2227 In(x, library)) \u2192 CheaperThan(x, dollars800))\n\u2200x ((Monitor(x) \u2227 CheaperThan(x, dollars800)) \u2192 ResolutionLessThan(x, p1080))\n\u2200x ((Monitor(x) \u2227 ResolutionLessThan(x, p1080)) \u2192 \u00acSupports(x, type-CPort))\nSupports(a-2017, type-CPort)", "conclusion": "If either A-2017 is both with a resolution of 1080p and produced by AOC or it is neither, then it is not equipped in the library.", "conclusion-FOL": "\u00ac(ResolutionLessThan(a-2017, p1080) \u2295 ProducedBy(x, aOC)) \u2192 \u00ac(In(a-2017, library))", "label": "True", "example_id": 1180}
{"story_id": 4, "premises": "S\u016bduva Marijampol\u0117 holds the Lithuanian Super Cup.\nS\u016bduva Marijampol\u0117 is a soccer team.", "premises-FOL": "Holds(suduva, theLithuanianSuperCup)\nSoccerTeam(suduva)", "conclusion": "Some soccer team holds the Lithuanian Super Cup.", "conclusion-FOL": "\u2203x (SoccerTeam(x) \u2227 Holds(x, theLithuanianSuperCup))", "label": "True", "example_id": 10}
{"story_id": 94, "premises": "Ainderby Quernhow is a village and civil parish in the Hambleton District.\nHambleton District is in North Yorkshire.\nNorth Yorkshire is in England.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "premises-FOL": "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))", "conclusion": "There is a village in England.", "conclusion-FOL": "\u2203x (Village(x) \u2227 In(x, england))", "label": "True", "example_id": 285}
{"story_id": 94, "premises": "Ainderby Quernhow is a village and civil parish in the Hambleton District.\nHambleton District is in North Yorkshire.\nNorth Yorkshire is in England.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "premises-FOL": "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))", "conclusion": "There is no civil parish in England.", "conclusion-FOL": "\u00ac(\u2203x (CivilParish(x) \u2227 In(x, england)))", "label": "False", "example_id": 286}
{"story_id": 48, "premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "conclusion": "Douglas Adams is a writer.", "conclusion-FOL": "Writer(douglasAdams)", "label": "True", "example_id": 138}
{"story_id": 48, "premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "conclusion": "Douglas Adams created innovative ideas.", "conclusion-FOL": "Create(douglasAdams, innovativeIdea)", "label": "True", "example_id": 139}
{"story_id": 48, "premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "conclusion": "The Salmon of Doubt has no innovative Ideas.", "conclusion-FOL": "\u00acContain(theSalmonOfDoubt, innovativeIdea)", "label": "Uncertain", "example_id": 140}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "Reformation is an eco-friendly brand.", "conclusion-FOL": "EcoFriendly(reformation) \u2227 Brand(reformation)", "label": "Uncertain", "example_id": 822}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "Reformation produces fast fashion products.", "conclusion-FOL": "FastFashion(reformation) \u2227 Product(reformation)", "label": "False", "example_id": 823}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "Reformation does not produce fast fashion products.", "conclusion-FOL": "\u00ac(FastFashion(reformation) \u2227 Product(reformation))", "label": "True", "example_id": 824}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "Reformation does not produce fast fashion products or does not produce disposable products.", "conclusion-FOL": "\u00ac(FastFashion(reformation) \u2227 Product(reformation)) \u2228 \u00ac(Disposable(x) \u2227 Product(x))", "label": "True", "example_id": 825}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "If Reformation produces disposable products, then Reformation produces fast fashion products.", "conclusion-FOL": "(Disposable(reformation) \u2227 Product(reformation)) \u2192 (FastFashion(reformation) \u2227 Product(reformation))", "label": "True", "example_id": 826}
{"story_id": 323, "premises": "No disposable products can help slow down global warming. \nAll eco-friendly brands can help slow down global warming. \nAll sustainable fashion brands are eco-friendly brands.\nAll fast fashion products are disposable products.\nIf Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "premises-FOL": "\u2200x (Disposable(x) \u2227 Product(x) \u2192 \u00acHelpSlowDown(x, globalWarming))\n\u2200x (EcoFriendly(x) \u2227 Brand(x) \u2192 Help(x, slowDownGlobalWarming))\n\u2200x (Sustainable(x) \u2227 FashionBrand(x) \u2192 EcoFriendly(x) \u2227 Brand(x))\n\u2200x (FastFashion(x) \u2227 Product(x) \u2192 Disposable(x) \u2227 Product(x)) \n\u00acHelpSlowDown(reformation, globalWarming) \u2192 (EcoFriendly(reformation) \u2227 Brand(reformation)) \u2228 (Sustainable(reformation) \u2227 FashionBrand(reformation))", "conclusion": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.", "conclusion-FOL": "(FastFashion(reformation) \u2227 Product(reformation)) \u2228 \u00acHelpSlowDown(reformation, globalWarming)", "label": "False", "example_id": 827}
{"story_id": 93, "premises": "Roy Richardson was a cricketer who played for Sint Maarten, a constituent country.\nRoy Richardson was a right-handed batsman and medium-pace bowler.\nRoy Richardson was old when he debuted in cricket.\nSherville Huggins dismissed Roy Richardson.", "premises-FOL": "Cricketeer(royRichardson) \u2227 PlaysFor(royRichardson, sintMaarten) \u2227 ConstituentCountry(sintMaarten)\nRightHanded(royRichardson) \u2227 Batsman(royRichardson) \u2227 MediumPaceBowler(royRichardson)\nOldAtDebut(royRichardson)\nDismisses(shervilleHuggins, royRichardson)", "conclusion": "Sherville Huggins has never dismissed anyone playing cricket for a constituent country.", "conclusion-FOL": "\u2200x \u2200y ((ConsituentCountry(y) \u2227 PlayedFor(x, y)) \u2192  \u00acDismissed(shervillehuggins, x))", "label": "False", "example_id": 283}
{"story_id": 93, "premises": "Roy Richardson was a cricketer who played for Sint Maarten, a constituent country.\nRoy Richardson was a right-handed batsman and medium-pace bowler.\nRoy Richardson was old when he debuted in cricket.\nSherville Huggins dismissed Roy Richardson.", "premises-FOL": "Cricketeer(royRichardson) \u2227 PlaysFor(royRichardson, sintMaarten) \u2227 ConstituentCountry(sintMaarten)\nRightHanded(royRichardson) \u2227 Batsman(royRichardson) \u2227 MediumPaceBowler(royRichardson)\nOldAtDebut(royRichardson)\nDismisses(shervilleHuggins, royRichardson)", "conclusion": "No right-handed medium-pace bowlers were playing for Sint Maarten.", "conclusion-FOL": "\u2200x ((RightHanded(x) \u2227 MediumPaceBowler(x)) \u2192 \u00acPlayedFor(x, sintMaarten))", "label": "False", "example_id": 284}
{"story_id": 251, "premises": "To get a job at Google, you need to have a lot of work experience or a good education.\nOne needs to submit their resume to Google to get a job there.\nJohn has a lot of work experience.\nJohn submitted his resume to Google and got a job there.", "premises-FOL": "\u2200x (GetAJobAt(x, google) \u2192 Have(x, aLotOfWorkExperience) \u2228 Have(x, goodEducation))\n\u2200x (GetAJobAt(x, google) \u2192 Submitted(x, resume, google))\nHave(john, aLotOfWorkExperience)\nSubmitted(john, resume, google) \u2227 GetAJobAt(john, google)", "conclusion": "John is a Yale graduate.", "conclusion-FOL": "YaleGraduate(john)", "label": "Uncertain", "example_id": 695}
{"story_id": 338, "premises": "No iPhones are standalone desktops. \nAll Apple-made cellphones are iPhones.  \nAll phones with A15 Bionic chips are Apple-made cell phones. \nAll phones equipped with four core-GPU made by Apple are phones with A15 Bionic chips. \nIf an unannounced Huawei phone is either a phone with A15 Bionic chips or equipped with four core-GPU made by Apple, then unannounced Huawei phone is neither a phone with A15 Bionic chips nor a standalone desktop.", "premises-FOL": "\u2200x (IPhone(x) \u2192 \u00acStandaloneDesktop(x))\n\u2200x (AppleMade(x) \u2227 Cellphone(x) \u2192 IPhone(x))\n\u2200x (Phone(x) \u2227 With(x, a15BionicChip) \u2192 AppleMade(x) \u2227 Cellphone(x))\n\u2200x (Phone(x) \u2227 EquippedWith(x, fourCoreGPU) \u2227 MadeBy(x, apple) \u2192 Phone(x) \u2227 With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip)) \u2295 (Phone(unannouncedHuaweiPhone) \u2227 EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) \u2227 MadeBy(unannouncedHuaweiPhone, apple)) \u2192 \u00ac(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip) \u2227 StandaloneDesktop(unannouncedHuaweiPhone))", "conclusion": "Joe is a person taking classes.", "conclusion-FOL": "AppleMade(unannouncedHuaweiPhone) \u2227 Cellphone(unannouncedHuaweiPhone)", "label": "Uncertain", "example_id": 884}
{"story_id": 338, "premises": "No iPhones are standalone desktops. \nAll Apple-made cellphones are iPhones.  \nAll phones with A15 Bionic chips are Apple-made cell phones. \nAll phones equipped with four core-GPU made by Apple are phones with A15 Bionic chips. \nIf an unannounced Huawei phone is either a phone with A15 Bionic chips or equipped with four core-GPU made by Apple, then unannounced Huawei phone is neither a phone with A15 Bionic chips nor a standalone desktop.", "premises-FOL": "\u2200x (IPhone(x) \u2192 \u00acStandaloneDesktop(x))\n\u2200x (AppleMade(x) \u2227 Cellphone(x) \u2192 IPhone(x))\n\u2200x (Phone(x) \u2227 With(x, a15BionicChip) \u2192 AppleMade(x) \u2227 Cellphone(x))\n\u2200x (Phone(x) \u2227 EquippedWith(x, fourCoreGPU) \u2227 MadeBy(x, apple) \u2192 Phone(x) \u2227 With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip)) \u2295 (Phone(unannouncedHuaweiPhone) \u2227 EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) \u2227 MadeBy(unannouncedHuaweiPhone, apple)) \u2192 \u00ac(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip) \u2227 StandaloneDesktop(unannouncedHuaweiPhone))", "conclusion": "Joe is a PhD student.", "conclusion-FOL": "Phone(unannouncedHuaweiPhone) \u2227 EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) \u2227 MadeByApple(unannouncedHuaweiPhone)", "label": "False", "example_id": 885}
{"story_id": 338, "premises": "No iPhones are standalone desktops. \nAll Apple-made cellphones are iPhones.  \nAll phones with A15 Bionic chips are Apple-made cell phones. \nAll phones equipped with four core-GPU made by Apple are phones with A15 Bionic chips. \nIf an unannounced Huawei phone is either a phone with A15 Bionic chips or equipped with four core-GPU made by Apple, then unannounced Huawei phone is neither a phone with A15 Bionic chips nor a standalone desktop.", "premises-FOL": "\u2200x (IPhone(x) \u2192 \u00acStandaloneDesktop(x))\n\u2200x (AppleMade(x) \u2227 Cellphone(x) \u2192 IPhone(x))\n\u2200x (Phone(x) \u2227 With(x, a15BionicChip) \u2192 AppleMade(x) \u2227 Cellphone(x))\n\u2200x (Phone(x) \u2227 EquippedWith(x, fourCoreGPU) \u2227 MadeBy(x, apple) \u2192 Phone(x) \u2227 With(x, a15BionicChip))\n(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip)) \u2295 (Phone(unannouncedHuaweiPhone) \u2227 EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) \u2227 MadeBy(unannouncedHuaweiPhone, apple)) \u2192 \u00ac(Phone(unannouncedHuaweiPhone) \u2227 With(unannouncedHuaweiPhone, a15BionicChip) \u2227 StandaloneDesktop(unannouncedHuaweiPhone))", "conclusion": "Joe is not a PhD student.", "conclusion-FOL": "\u00ac(Phone(unannouncedHuaweiPhone) \u2227 EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) \u2227 MadeByApple(unannouncedHuaweiPhone))", "label": "True", "example_id": 886}
{"story_id": 32, "premises": "Hugh Vanstone is one of the world's leading lighting designers. \nHugh Vanstone is from the UK.\nHugh Vanstone has lit more than 160 productions.\nHugh Vanstone attended a school where he is from. ", "premises-FOL": "WorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n\u2203x(GreaterThan(x, num160) \u2227 LitProductions(hughVanstone,x))\n\u2203x(Hometown(hughVanstone,x) \u2227 AttendedSchoolIn(hughVanstone,x))", "conclusion": "Hugh Vanstone is one of the world's leading lighting designers and is from the UK.", "conclusion-FOL": "WorldLeadingLightingDesigner(hughVanstone) \u2227 From(hughVanstone, unitedKingdom)", "label": "True", "example_id": 92}
{"story_id": 32, "premises": "Hugh Vanstone is one of the world's leading lighting designers. \nHugh Vanstone is from the UK.\nHugh Vanstone has lit more than 160 productions.\nHugh Vanstone attended a school where he is from. ", "premises-FOL": "WorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n\u2203x(GreaterThan(x, num160) \u2227 LitProductions(hughVanstone,x))\n\u2203x(Hometown(hughVanstone,x) \u2227 AttendedSchoolIn(hughVanstone,x))", "conclusion": "Hugh Vanstone has lit 170 productions.", "conclusion-FOL": "\u2203x(GreaterThan(x, num170) \u2227 LitProductions(hughVanstone,x))", "label": "Uncertain", "example_id": 93}
{"story_id": 32, "premises": "Hugh Vanstone is one of the world's leading lighting designers. \nHugh Vanstone is from the UK.\nHugh Vanstone has lit more than 160 productions.\nHugh Vanstone attended a school where he is from. ", "premises-FOL": "WorldLeadingLightingDesigner(hughVanstone)\nFrom(hughVanstone, unitedKingdom)\n\u2203x(GreaterThan(x, num160) \u2227 LitProductions(hughVanstone,x))\n\u2203x(Hometown(hughVanstone,x) \u2227 AttendedSchoolIn(hughVanstone,x))", "conclusion": "Hugh Vanstone attended a school in the United States.", "conclusion-FOL": "AttendedSchoolIn(hughVanstone, unitedStates)", "label": "Uncertain", "example_id": 94}
{"story_id": 155, "premises": "No man can run faster than Bolt. \nSuperman is not a man.", "premises-FOL": "\u2200x (Man(x) \u2192 \u00acRunFasterThan(xm bolt))\n\u00acMan(superman)", "conclusion": "Superman can run faster than Bolt.", "conclusion-FOL": "RunFasterThan(superman, bolt)", "label": "Uncertain", "example_id": 448}
{"story_id": 128, "premises": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"father of the analysis of algorithms.\"", "premises-FOL": "American(donaldErvinKnuth) \u2227 ComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "conclusion": "An American scientist has been called the \"father of the analysis of algorithms\".", "conclusion-FOL": "\u2203x (American(x) \u2227 ComputerScientist(x) \u2227 Called(x, fatherOfTheAnalysisOfAlgorithms))", "label": "True", "example_id": 379}
{"story_id": 128, "premises": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"father of the analysis of algorithms.\"", "premises-FOL": "American(donaldErvinKnuth) \u2227 ComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "conclusion": "A mathematician has been called the \"father of the analysis of algorithms\".", "conclusion-FOL": "\u2203x (Mathematician(x) \u2227 Called(x, fatherOfTheAnalysisOfAlgorithms))", "label": "True", "example_id": 380}
{"story_id": 128, "premises": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"father of the analysis of algorithms.\"", "premises-FOL": "American(donaldErvinKnuth) \u2227 ComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "conclusion": "Donald Knuth is a well-known figure in the field of artificial intelligence.", "conclusion-FOL": "WellKnownFigureIn(donaldErvinKnuth, artificialIntelligence)", "label": "Uncertain", "example_id": 381}
{"story_id": 121, "premises": "Neocrepidodera Corpulentas are flea beetles or moths, or both.\nNeocrepidodera Corpulentas are in the Chrysomelidae family.\nThere are no moths within the Chrysomelidae family.\nThere is a Neocrepidodera Corpulenta. ", "premises-FOL": "\u2200x (NeocrepidoderaCorpulenta(x) \u2192 (FleaBeetle(x) \u2228 Moth(x)))\n\u2200x (NeocrepidoderaCorpulenta(x) \u2192 In(x, chrysomelidaeFamily))\n\u2200x (In(x, chrysomelidaeFamily) \u2192 \u00acMoth(x))\n\u2203x (NeocrepidoderaCorpulenta(x))", "conclusion": "There is a flea beetle within the Chrysomelidae family.", "conclusion-FOL": "\u2203x (FleaBeetle(x) \u2227 In(x, chrysomelidaeFamily))", "label": "True", "example_id": 362}
{"story_id": 121, "premises": "Neocrepidodera Corpulentas are flea beetles or moths, or both.\nNeocrepidodera Corpulentas are in the Chrysomelidae family.\nThere are no moths within the Chrysomelidae family.\nThere is a Neocrepidodera Corpulenta. ", "premises-FOL": "\u2200x (NeocrepidoderaCorpulenta(x) \u2192 (FleaBeetle(x) \u2228 Moth(x)))\n\u2200x (NeocrepidoderaCorpulenta(x) \u2192 In(x, chrysomelidaeFamily))\n\u2200x (In(x, chrysomelidaeFamily) \u2192 \u00acMoth(x))\n\u2203x (NeocrepidoderaCorpulenta(x))", "conclusion": "There are no flea beetles within the Chrysomelidae family.", "conclusion-FOL": "\u2200x (FleaBeetle(x) \u2192 \u00acIn(x, chrysomelidaeFamily))", "label": "False", "example_id": 363}
{"story_id": 227, "premises": "Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931.\nCarrozzeria Colli is a company that specializes in using aluminum.\nThe first automobiles built by Carrozzeria Colli were racing cars.\nSome racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis.\nCarrozzeria Colli worked for airforces.\nCarrozzeria Colli made car bodies. ", "premises-FOL": "Milanese(carrozzeriaColli) \u2227 CoachBuilder(carrozzeriaColli) \u2227 Company(carrozzeriaColli) \u2227 EstablishedBy(carrozzeriaColli, giuseppeColli) \u2227 EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) \u2227 SpecializesIn(carrozzeriaColli, usingAluminum)\n\u2200x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobile(x) \u2192 RacingCar(x))\n\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 RacingCar(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))\n\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriaColli, x))\n\u2203(CarBody(x) \u2227 Made(x, carrozzeriaColli))", "conclusion": "Carrozzeria Colli made car bodies in 1931.", "conclusion-FOL": "\u2203x (CarBody(x) \u2227 Made(x, carrozzeriaColli) \u2227 MadeIn(x, 1931))", "label": "Uncertain", "example_id": 640}
{"story_id": 227, "premises": "Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931.\nCarrozzeria Colli is a company that specializes in using aluminum.\nThe first automobiles built by Carrozzeria Colli were racing cars.\nSome racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis.\nCarrozzeria Colli worked for airforces.\nCarrozzeria Colli made car bodies. ", "premises-FOL": "Milanese(carrozzeriaColli) \u2227 CoachBuilder(carrozzeriaColli) \u2227 Company(carrozzeriaColli) \u2227 EstablishedBy(carrozzeriaColli, giuseppeColli) \u2227 EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) \u2227 SpecializesIn(carrozzeriaColli, usingAluminum)\n\u2200x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobile(x) \u2192 RacingCar(x))\n\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 RacingCar(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))\n\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriaColli, x))\n\u2203(CarBody(x) \u2227 Made(x, carrozzeriaColli))", "conclusion": "Carrozzeria Colli built airplanes during World War II.", "conclusion-FOL": "\u2203x (Airplane(x) \u2227 Made(x, carrozzeriaColli) \u2227 MadeDuring(x, worldWarII))", "label": "Uncertain", "example_id": 641}
{"story_id": 227, "premises": "Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931.\nCarrozzeria Colli is a company that specializes in using aluminum.\nThe first automobiles built by Carrozzeria Colli were racing cars.\nSome racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis.\nCarrozzeria Colli worked for airforces.\nCarrozzeria Colli made car bodies. ", "premises-FOL": "Milanese(carrozzeriaColli) \u2227 CoachBuilder(carrozzeriaColli) \u2227 Company(carrozzeriaColli) \u2227 EstablishedBy(carrozzeriaColli, giuseppeColli) \u2227 EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) \u2227 SpecializesIn(carrozzeriaColli, usingAluminum)\n\u2200x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobile(x) \u2192 RacingCar(x))\n\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 RacingCar(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))\n\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriaColli, x))\n\u2203(CarBody(x) \u2227 Made(x, carrozzeriaColli))", "conclusion": "Giuseppe Colli established a company that made car bodies.", "conclusion-FOL": "\u2203x \u2203y (Company(x) \u2227 EstablishedBy(x, giuseppeColli) \u2227 CarBody(y) \u2227 Made(y, x))", "label": "True", "example_id": 642}
{"story_id": 227, "premises": "Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931.\nCarrozzeria Colli is a company that specializes in using aluminum.\nThe first automobiles built by Carrozzeria Colli were racing cars.\nSome racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis.\nCarrozzeria Colli worked for airforces.\nCarrozzeria Colli made car bodies. ", "premises-FOL": "Milanese(carrozzeriaColli) \u2227 CoachBuilder(carrozzeriaColli) \u2227 Company(carrozzeriaColli) \u2227 EstablishedBy(carrozzeriaColli, giuseppeColli) \u2227 EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) \u2227 SpecializesIn(carrozzeriaColli, usingAluminum)\n\u2200x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobile(x) \u2192 RacingCar(x))\n\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 RacingCar(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))\n\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriaColli, x))\n\u2203(CarBody(x) \u2227 Made(x, carrozzeriaColli))", "conclusion": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.", "conclusion-FOL": "\u2203x (Milanese(x) \u2227 CoachBuilder(x) \u2227 Company(x) \u2227 EstablishedBy(x, giuseppeColli) \u2227 SpecializesIn(x, usingAluminum))", "label": "True", "example_id": 643}
{"story_id": 227, "premises": "Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931.\nCarrozzeria Colli is a company that specializes in using aluminum.\nThe first automobiles built by Carrozzeria Colli were racing cars.\nSome racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis.\nCarrozzeria Colli worked for airforces.\nCarrozzeria Colli made car bodies. ", "premises-FOL": "Milanese(carrozzeriaColli) \u2227 CoachBuilder(carrozzeriaColli) \u2227 Company(carrozzeriaColli) \u2227 EstablishedBy(carrozzeriaColli, giuseppeColli) \u2227 EstablishedIn(carrozzeriaColli, 1931)\nCompany(carrozzeriaColli) \u2227 SpecializesIn(carrozzeriaColli, usingAluminum)\n\u2200x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobile(x) \u2192 RacingCar(x))\n\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 RacingCar(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))\n\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriaColli, x))\n\u2203(CarBody(x) \u2227 Made(x, carrozzeriaColli))", "conclusion": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chassis.", "conclusion-FOL": "\u2203x (BuiltBy(x, carrozzeriaColli) \u2227 FirstAutomobil(x) \u2227 Used(x, fiat1100mechanicals) \u2227 Used(x, chassis))", "label": "Uncertain", "example_id": 644}
{"story_id": 130, "premises": "John will go to the cinema if and only if Jack goes to the cinema today.\nJack will go to the cinema if and only if Iron Man is on and the weather is not bad today.\nSome days in March have bad weather.\nIron Man is on.\nIt's March now.", "premises-FOL": "(GoTo(john, theCinema) \u2227 GoTo(john, today)) \u2194 GoTo(jack, theCinema) \u2227 GoTo(jack, today)\n(GoTo(john, theCinema) \u2227 GoTo(john, today)) \u2194 (On(ironman) \u2227 \u00acBad(weather, today))\n\u2203x (Day(x) \u2227 March(x) \u2192 \u00acBad(weather, x))\nOn(ironman)\nDay(presentMoment) \u2227 March(presentMoment)", "conclusion": "John will go to the cinema.", "conclusion-FOL": "GoTo(john, theCinema) \u2227 GoTo(john, today)", "label": "Uncertain", "example_id": 386}
{"story_id": 130, "premises": "John will go to the cinema if and only if Jack goes to the cinema today.\nJack will go to the cinema if and only if Iron Man is on and the weather is not bad today.\nSome days in March have bad weather.\nIron Man is on.\nIt's March now.", "premises-FOL": "(GoTo(john, theCinema) \u2227 GoTo(john, today)) \u2194 GoTo(jack, theCinema) \u2227 GoTo(jack, today)\n(GoTo(john, theCinema) \u2227 GoTo(john, today)) \u2194 (On(ironman) \u2227 \u00acBad(weather, today))\n\u2203x (Day(x) \u2227 March(x) \u2192 \u00acBad(weather, x))\nOn(ironman)\nDay(presentMoment) \u2227 March(presentMoment)", "conclusion": "The weather is good today.", "conclusion-FOL": "\u00acBad(weather, today)", "label": "Uncertain", "example_id": 387}
{"story_id": 81, "premises": "Quiksilver sells sportswear, clothing, footwear, and accessories.\nFlannels are a type of clothing.\nJoe owns an item from Quiksilver.", "premises-FOL": "\u2200x (Sells(quiksilver, x) \u2192 (Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x)))\nClothing(flannel)\n\u2203x (Sells(quiksilver, x) \u2227 Owns(joe, x))", "conclusion": "Quiksilver sells beer.", "conclusion-FOL": "Sells(quiksilver, beer)", "label": "Uncertain", "example_id": 246}
{"story_id": 81, "premises": "Quiksilver sells sportswear, clothing, footwear, and accessories.\nFlannels are a type of clothing.\nJoe owns an item from Quiksilver.", "premises-FOL": "\u2200x (Sells(quiksilver, x) \u2192 (Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x)))\nClothing(flannel)\n\u2203x (Sells(quiksilver, x) \u2227 Owns(joe, x))", "conclusion": "Joe owns a flannel.", "conclusion-FOL": "Owns(joe, flannel)", "label": "Uncertain", "example_id": 247}
{"story_id": 81, "premises": "Quiksilver sells sportswear, clothing, footwear, and accessories.\nFlannels are a type of clothing.\nJoe owns an item from Quiksilver.", "premises-FOL": "\u2200x (Sells(quiksilver, x) \u2192 (Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x)))\nClothing(flannel)\n\u2203x (Sells(quiksilver, x) \u2227 Owns(joe, x))", "conclusion": "Joe owns at least one piece of sportswear, clothing, footwear, or accessory", "conclusion-FOL": "\u2203x (Owns(joe, x) \u2227 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))", "label": "True", "example_id": 248}
{"story_id": 308, "premises": "No video games released by Nintendo support the PS4 platform.\nAll video games in the Pokemon series are released by Nintendo. \nAll video games in the FIFA series support the PS4 platform. \nAll video games that allow users to simulate playing online soccer using licensed players are in the FIFA series.\nThe video game named \u201cBe Lionel\u201d is in the Pokemon series, or it allows users to simulate playing online soccer games using licensed players.", "premises-FOL": "\u2200x (VideoGame(x) \u2227 ReleasedBy(x, nintendo) \u2192 \u00acSupport(x, pS4))\n\u2200x (VideoGame(x) \u2227 In(x, pokemonSeries) \u2192 ReleasedBy(x, nintendo))\n\u2200x (VideoGame(x) \u2227 In(x, fIFASeries) \u2192 Support(x, pS4))\n\u2200x (VideoGame(x) \u2227 Simulate(x, onlineSoccer) \u2227 Use(x, licensedPlayer) \u2192 In(x, fIFASeries))\nVideoGame(beLionel) \u2227 In(beLionel, pokemonSeries) \u2228 (Simulate(beLionel, onlineSoccer) \u2227 Use(beLionel, licensedPlayer))", "conclusion": "The video game \"Be Lionel\" is in the pokemon series.", "conclusion-FOL": "VideoGame(beLionel) \u2227 PokemonSeries(beLionel)", "label": "Uncertain", "example_id": 760}
{"story_id": 308, "premises": "No video games released by Nintendo support the PS4 platform.\nAll video games in the Pokemon series are released by Nintendo. \nAll video games in the FIFA series support the PS4 platform. \nAll video games that allow users to simulate playing online soccer using licensed players are in the FIFA series.\nThe video game named \u201cBe Lionel\u201d is in the Pokemon series, or it allows users to simulate playing online soccer games using licensed players.", "premises-FOL": "\u2200x (VideoGame(x) \u2227 ReleasedBy(x, nintendo) \u2192 \u00acSupport(x, pS4))\n\u2200x (VideoGame(x) \u2227 In(x, pokemonSeries) \u2192 ReleasedBy(x, nintendo))\n\u2200x (VideoGame(x) \u2227 In(x, fIFASeries) \u2192 Support(x, pS4))\n\u2200x (VideoGame(x) \u2227 Simulate(x, onlineSoccer) \u2227 Use(x, licensedPlayer) \u2192 In(x, fIFASeries))\nVideoGame(beLionel) \u2227 In(beLionel, pokemonSeries) \u2228 (Simulate(beLionel, onlineSoccer) \u2227 Use(beLionel, licensedPlayer))", "conclusion": "The video game named \u201cBe Lionel\u201d either is in the FIFA series and supports the PS4 platform, or it neither is in the FIFA series nor supports the PS4 platform.", "conclusion-FOL": "VideoGame(beLionel) \u2227  \u00ac(FIFASeries(beLionel) \u2295 Support(beLionel, pS4))", "label": "True", "example_id": 761}
{"story_id": 308, "premises": "No video games released by Nintendo support the PS4 platform.\nAll video games in the Pokemon series are released by Nintendo. \nAll video games in the FIFA series support the PS4 platform. \nAll video games that allow users to simulate playing online soccer using licensed players are in the FIFA series.\nThe video game named \u201cBe Lionel\u201d is in the Pokemon series, or it allows users to simulate playing online soccer games using licensed players.", "premises-FOL": "\u2200x (VideoGame(x) \u2227 ReleasedBy(x, nintendo) \u2192 \u00acSupport(x, pS4))\n\u2200x (VideoGame(x) \u2227 In(x, pokemonSeries) \u2192 ReleasedBy(x, nintendo))\n\u2200x (VideoGame(x) \u2227 In(x, fIFASeries) \u2192 Support(x, pS4))\n\u2200x (VideoGame(x) \u2227 Simulate(x, onlineSoccer) \u2227 Use(x, licensedPlayer) \u2192 In(x, fIFASeries))\nVideoGame(beLionel) \u2227 In(beLionel, pokemonSeries) \u2228 (Simulate(beLionel, onlineSoccer) \u2227 Use(beLionel, licensedPlayer))", "conclusion": "The video game named \u201cBe Lionel\u201d is either in the FIFA series or supports the PS4 platform.", "conclusion-FOL": "VideoGame(beLionel) \u2227 FIFASeries(beLionel) \u2295 Support(beLionel, pS4)", "label": "False", "example_id": 762}
{"story_id": 308, "premises": "No video games released by Nintendo support the PS4 platform.\nAll video games in the Pokemon series are released by Nintendo. \nAll video games in the FIFA series support the PS4 platform. \nAll video games that allow users to simulate playing online soccer using licensed players are in the FIFA series.\nThe video game named \u201cBe Lionel\u201d is in the Pokemon series, or it allows users to simulate playing online soccer games using licensed players.", "premises-FOL": "\u2200x (VideoGame(x) \u2227 ReleasedBy(x, nintendo) \u2192 \u00acSupport(x, pS4))\n\u2200x (VideoGame(x) \u2227 In(x, pokemonSeries) \u2192 ReleasedBy(x, nintendo))\n\u2200x (VideoGame(x) \u2227 In(x, fIFASeries) \u2192 Support(x, pS4))\n\u2200x (VideoGame(x) \u2227 Simulate(x, onlineSoccer) \u2227 Use(x, licensedPlayer) \u2192 In(x, fIFASeries))\nVideoGame(beLionel) \u2227 In(beLionel, pokemonSeries) \u2228 (Simulate(beLionel, onlineSoccer) \u2227 Use(beLionel, licensedPlayer))", "conclusion": "The video game named \u201cBe Lionel\u201d  is not in the FIFA or Pokemon series.", "conclusion-FOL": "VideoGame(beLionel) \u2227 \u00ac(FIFASeries(beLionel) \u2228 Support(beLionel, pS4))", "label": "False", "example_id": 763}
{"story_id": 311, "premises": "No payment cards issued by Russian banks can be used with ApplePay.\nAll MIR payment cards are issued by Russian banks.\nSome international payment cards can be used with ApplePay.\nSocial payments in Russia can only be transferred to MIR payment cards.\nBank of America payment cards can be used with ApplePay.", "premises-FOL": "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))\n\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))\n\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))\n\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))\nPaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)", "conclusion": "Bank of America payment cards are international.", "conclusion-FOL": "PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica)", "label": "Uncertain", "example_id": 773}
{"story_id": 311, "premises": "No payment cards issued by Russian banks can be used with ApplePay.\nAll MIR payment cards are issued by Russian banks.\nSome international payment cards can be used with ApplePay.\nSocial payments in Russia can only be transferred to MIR payment cards.\nBank of America payment cards can be used with ApplePay.", "premises-FOL": "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))\n\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))\n\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))\n\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))\nPaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)", "conclusion": "Bank of America payment cards are international and can be used to transfer social payments in Russia.", "conclusion-FOL": "\u2200x (PaymentCard(bankOfAmerica) \u2227 International(bankOfAmerica) \u2227 SocialPayment(x) \u2227TransferredTo(x, bankOfAmerica))", "label": "False", "example_id": 774}
{"story_id": 311, "premises": "No payment cards issued by Russian banks can be used with ApplePay.\nAll MIR payment cards are issued by Russian banks.\nSome international payment cards can be used with ApplePay.\nSocial payments in Russia can only be transferred to MIR payment cards.\nBank of America payment cards can be used with ApplePay.", "premises-FOL": "\u2200x \u2200y (PaymentCard(x) \u2227 RussianBank(y) \u2227 IssuedBy(x, y) \u2192 \u00acUsedWith(x, applePay))\n\u2200x \u2200y (PaymentCard(x) \u2227 MIR(x) \u2192 RussianBank(y) \u2227 IssuedBy(x, y))\n\u2203x (PaymentCard(x) \u2227 International(x) \u2192 UsedWith(x, applePay))\n\u2200x \u2200y (SocialPayment(x) \u2227TransferredTo(x, y) \u2192 PaymentCard(y) \u2227 MIR(y))\nPaymentCard(bankOfAmerica) \u2227 UsedWith(bankOfAmerica, applePay)", "conclusion": "If Bank of America payment cards are international and can be used to transfer social payments in Russia, then they are international.", "conclusion-FOL": "\u2200x ((PaymentCard(bandOfAmerica) \u2227 International(bandOfAmerica) \u2227 SocialPayment(x) \u2227 TransferredTo(x, bandOfAmerica)) \u2192 International(bandOfAmerica))", "label": "True", "example_id": 775}
{"story_id": 52, "premises": "The Lumina APV is produced by Chevrolet. \nThe Astro is a van produced by Chevrolet. \nVehicles produced by Chevrolet in this batch are either cars or vans.", "premises-FOL": "ProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) \u2227 Van(astro)\n\u2200x (Vehicle(x) \u2227 ProducedBy(x, chevrolet) \u2227 InThisBatch(x) \u2192 (Car(x) \u2295 Van(x)))", "conclusion": "The Lumina APV is a van.", "conclusion-FOL": "Van(luminaAPV)", "label": "Uncertain", "example_id": 150}
{"story_id": 52, "premises": "The Lumina APV is produced by Chevrolet. \nThe Astro is a van produced by Chevrolet. \nVehicles produced by Chevrolet in this batch are either cars or vans.", "premises-FOL": "ProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) \u2227 Van(astro)\n\u2200x (Vehicle(x) \u2227 ProducedBy(x, chevrolet) \u2227 InThisBatch(x) \u2192 (Car(x) \u2295 Van(x)))", "conclusion": "The Lumina APV is either a car or a van.", "conclusion-FOL": "Car(luminaAPV) \u2295 Van(luminaAPV)", "label": "True", "example_id": 151}
{"story_id": 52, "premises": "The Lumina APV is produced by Chevrolet. \nThe Astro is a van produced by Chevrolet. \nVehicles produced by Chevrolet in this batch are either cars or vans.", "premises-FOL": "ProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) \u2227 Van(astro)\n\u2200x (Vehicle(x) \u2227 ProducedBy(x, chevrolet) \u2227 InThisBatch(x) \u2192 (Car(x) \u2295 Van(x)))", "conclusion": "The Astro is a van.", "conclusion-FOL": "Van(astro)", "label": "True", "example_id": 152}
{"story_id": 52, "premises": "The Lumina APV is produced by Chevrolet. \nThe Astro is a van produced by Chevrolet. \nVehicles produced by Chevrolet in this batch are either cars or vans.", "premises-FOL": "ProducedBy(luminaAPV, chevrolet)\nProducedBy(astro, chevrolet) \u2227 Van(astro)\n\u2200x (Vehicle(x) \u2227 ProducedBy(x, chevrolet) \u2227 InThisBatch(x) \u2192 (Car(x) \u2295 Van(x)))", "conclusion": "The Astro is a car.", "conclusion-FOL": "Car(astro)", "label": "False", "example_id": 153}
{"story_id": 405, "premises": "Everyone who works in the office is a commuter. \nPeople either work in the office or work from home.\nEveryone who works from home has a relaxed schedule.\nGeorge is either a commuter or has a home office setup. \nIf George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home.", "premises-FOL": "\u2200x (WorkIn(x, office) \u2192 Commuter(x))\n\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))\n\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))\nCommuter(george) \u2295 Have(george, homeOffice)\n(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)", "conclusion": "George is a person who works from home.", "conclusion-FOL": "WorkFrom(george, home)", "label": "Uncertain", "example_id": 1123}
{"story_id": 405, "premises": "Everyone who works in the office is a commuter. \nPeople either work in the office or work from home.\nEveryone who works from home has a relaxed schedule.\nGeorge is either a commuter or has a home office setup. \nIf George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home.", "premises-FOL": "\u2200x (WorkIn(x, office) \u2192 Commuter(x))\n\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))\n\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))\nCommuter(george) \u2295 Have(george, homeOffice)\n(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)", "conclusion": "If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule.", "conclusion-FOL": "\u00ac(WorkFrom(george, home) \u2227 WorkIn(george, office)) \u2192 \u00ac(Commuter(george) \u2228 Have(george, relaxedSchedule))", "label": "False", "example_id": 1124}
{"story_id": 405, "premises": "Everyone who works in the office is a commuter. \nPeople either work in the office or work from home.\nEveryone who works from home has a relaxed schedule.\nGeorge is either a commuter or has a home office setup. \nIf George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home.", "premises-FOL": "\u2200x (WorkIn(x, office) \u2192 Commuter(x))\n\u2200x (WorkIn(x, office) \u2295 WorkFrom(x, home))\n\u2200x (WorkFrom(x, home) \u2192 Have(x, relaxedSchedule))\nCommuter(george) \u2295 Have(george, homeOffice)\n(WorkFrom(george, home) \u2295 Have(george, homeOffice)) \u2192 \u00acWorkFrom(george, home) \u2227 Commuter(george)", "conclusion": "If George is either a person who has a home office setup and a person who works in the office, or neither a person who has a home office setup nor a person who works in the office, then George is either a person who works from home or a person who has a relaxed schedule.", "conclusion-FOL": "\u00ac(Have(george, homeOffice) \u2295 WorkIn(george, office)) \u2192 (WorkFrom(george, home) \u2295 Have(george, relaxedSchedule))", "label": "True", "example_id": 1125}
{"story_id": 28, "premises": "Jason Kramer is an American music supervisor.\nSome American radio personalities are also music supervisors. \nAnyone who hosts a show on a public radio station is a radio personality.\nJoe Rogan is a radio personality.\nJason Kramer hosted a show on a public radio station.", "premises-FOL": "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)\n\u2203x \u2203y (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x) \u2227 (\u00ac(x=y)) \u2227 American(y) \u2227 MusicSupervisor(y) \u2227 RadioPersonality(y))\n\u2200x \u2200y((HostShowOn(x, y) \u2227 PublicRadioStation(x)) \u2192 RadioPersonality(x))\nRadioPersonality(joeRogan)\n\u2203x(HostShowOn(jasonKramer, x) \u2227 PublicRadioStation(x))", "conclusion": "Joe Rogan is American.", "conclusion-FOL": "American(joeRogan)", "label": "Uncertain", "example_id": 80}
{"story_id": 28, "premises": "Jason Kramer is an American music supervisor.\nSome American radio personalities are also music supervisors. \nAnyone who hosts a show on a public radio station is a radio personality.\nJoe Rogan is a radio personality.\nJason Kramer hosted a show on a public radio station.", "premises-FOL": "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)\n\u2203x \u2203y (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x) \u2227 (\u00ac(x=y)) \u2227 American(y) \u2227 MusicSupervisor(y) \u2227 RadioPersonality(y))\n\u2200x \u2200y((HostShowOn(x, y) \u2227 PublicRadioStation(x)) \u2192 RadioPersonality(x))\nRadioPersonality(joeRogan)\n\u2203x(HostShowOn(jasonKramer, x) \u2227 PublicRadioStation(x))", "conclusion": "Jason Kramer is a music supervisor.", "conclusion-FOL": "MusicSupervisor(jasonKramer)", "label": "True", "example_id": 81}
{"story_id": 28, "premises": "Jason Kramer is an American music supervisor.\nSome American radio personalities are also music supervisors. \nAnyone who hosts a show on a public radio station is a radio personality.\nJoe Rogan is a radio personality.\nJason Kramer hosted a show on a public radio station.", "premises-FOL": "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)\n\u2203x \u2203y (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x) \u2227 (\u00ac(x=y)) \u2227 American(y) \u2227 MusicSupervisor(y) \u2227 RadioPersonality(y))\n\u2200x \u2200y((HostShowOn(x, y) \u2227 PublicRadioStation(x)) \u2192 RadioPersonality(x))\nRadioPersonality(joeRogan)\n\u2203x(HostShowOn(jasonKramer, x) \u2227 PublicRadioStation(x))", "conclusion": "Jason Kramer is a radio personality.", "conclusion-FOL": "RadioPersonality(jasonKramer)", "label": "True", "example_id": 82}
{"story_id": 430, "premises": "Herm\u00e8s bags are not made in Italy.\nAll Birkin bags are Herm\u00e8s bags. \nAll Ferraris are made in Italy. \nAll cars that carry a Ferrari V12 engine are Ferraris. \nAll cars that are made in Maranello carry a Ferrari V12 engine.\nA Lamborghini SUV is not both a Ferrari and made in Maranello. \nA Kelly bag is a Herm\u00e8s bag, or it is a car that carries a Ferrari V12 engine. ", "premises-FOL": "\u2200x ((Bag(x) \u2227 Herm\u00e8s(x)) \u2192 \u00acMadeIn(x, italy))\n\u2200x ((Bag(x) \u2227 Birkin(x)) \u2192 Herm\u00e8s(x))\n\u2200x (Ferrari(x) \u2192 MadeIn(x, italy))\n\u2200x ((Car(x) \u2227 Carry(x, ferrariV12Engine)) \u2192 Ferrrari(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Carry(x, ferrariV12Engine))\n\u00ac(Ferrari(lamborghiniSUV) \u2227 MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) \u2227 Herm\u00e8s(kelly)) \u2228 (Bag(kelly) \u2227 Car(kelly) \u2227 Carry(kelly, ferrariV12Engine))", "conclusion": "A Lamborghini SUV is made in Italy.", "conclusion-FOL": "MadeIn(lamborghiniSUV, italy)", "label": "Uncertain", "example_id": 1223}
{"story_id": 430, "premises": "Herm\u00e8s bags are not made in Italy.\nAll Birkin bags are Herm\u00e8s bags. \nAll Ferraris are made in Italy. \nAll cars that carry a Ferrari V12 engine are Ferraris. \nAll cars that are made in Maranello carry a Ferrari V12 engine.\nA Lamborghini SUV is not both a Ferrari and made in Maranello. \nA Kelly bag is a Herm\u00e8s bag, or it is a car that carries a Ferrari V12 engine. ", "premises-FOL": "\u2200x ((Bag(x) \u2227 Herm\u00e8s(x)) \u2192 \u00acMadeIn(x, italy))\n\u2200x ((Bag(x) \u2227 Birkin(x)) \u2192 Herm\u00e8s(x))\n\u2200x (Ferrari(x) \u2192 MadeIn(x, italy))\n\u2200x ((Car(x) \u2227 Carry(x, ferrariV12Engine)) \u2192 Ferrrari(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Carry(x, ferrariV12Engine))\n\u00ac(Ferrari(lamborghiniSUV) \u2227 MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) \u2227 Herm\u00e8s(kelly)) \u2228 (Bag(kelly) \u2227 Car(kelly) \u2227 Carry(kelly, ferrariV12Engine))", "conclusion": "A Lamborghini SUV is not made in Italy.", "conclusion-FOL": "\u00acMadeIn(lamborghiniSUV, italy)", "label": "Uncertain", "example_id": 1224}
{"story_id": 430, "premises": "Herm\u00e8s bags are not made in Italy.\nAll Birkin bags are Herm\u00e8s bags. \nAll Ferraris are made in Italy. \nAll cars that carry a Ferrari V12 engine are Ferraris. \nAll cars that are made in Maranello carry a Ferrari V12 engine.\nA Lamborghini SUV is not both a Ferrari and made in Maranello. \nA Kelly bag is a Herm\u00e8s bag, or it is a car that carries a Ferrari V12 engine. ", "premises-FOL": "\u2200x ((Bag(x) \u2227 Herm\u00e8s(x)) \u2192 \u00acMadeIn(x, italy))\n\u2200x ((Bag(x) \u2227 Birkin(x)) \u2192 Herm\u00e8s(x))\n\u2200x (Ferrari(x) \u2192 MadeIn(x, italy))\n\u2200x ((Car(x) \u2227 Carry(x, ferrariV12Engine)) \u2192 Ferrrari(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Carry(x, ferrariV12Engine))\n\u00ac(Ferrari(lamborghiniSUV) \u2227 MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) \u2227 Herm\u00e8s(kelly)) \u2228 (Bag(kelly) \u2227 Car(kelly) \u2227 Carry(kelly, ferrariV12Engine))", "conclusion": "A Kelly bag is a Birkin bag made in Maranello.", "conclusion-FOL": "Bag(kelly) \u2227 MadeIn(kelly, maranello) \u2227 Birkin(kelly)", "label": "False", "example_id": 1225}
{"story_id": 430, "premises": "Herm\u00e8s bags are not made in Italy.\nAll Birkin bags are Herm\u00e8s bags. \nAll Ferraris are made in Italy. \nAll cars that carry a Ferrari V12 engine are Ferraris. \nAll cars that are made in Maranello carry a Ferrari V12 engine.\nA Lamborghini SUV is not both a Ferrari and made in Maranello. \nA Kelly bag is a Herm\u00e8s bag, or it is a car that carries a Ferrari V12 engine. ", "premises-FOL": "\u2200x ((Bag(x) \u2227 Herm\u00e8s(x)) \u2192 \u00acMadeIn(x, italy))\n\u2200x ((Bag(x) \u2227 Birkin(x)) \u2192 Herm\u00e8s(x))\n\u2200x (Ferrari(x) \u2192 MadeIn(x, italy))\n\u2200x ((Car(x) \u2227 Carry(x, ferrariV12Engine)) \u2192 Ferrrari(x))\n\u2200x ((Car(x) \u2227 MadeIn(x, maranello)) \u2192 Carry(x, ferrariV12Engine))\n\u00ac(Ferrari(lamborghiniSUV) \u2227 MadeIn(lamborghiniSUV, maranello))\n(Bag(kelly) \u2227 Herm\u00e8s(kelly)) \u2228 (Bag(kelly) \u2227 Car(kelly) \u2227 Carry(kelly, ferrariV12Engine))", "conclusion": "A Kelly bag is not both made in Maranello and a Birkin bag.", "conclusion-FOL": "Bag(kelly) \u2227 \u00ac(MadeIn(kelly, maranello) \u2227 Birkin(kelly))", "label": "True", "example_id": 1226}
{"story_id": 209, "premises": "If someone lives in a place named Galicia, then they live in either Spain or Poland.\nSpain is in Europe.\nPoland is in Europe.\nRochelle lives in Europe.\nDominique does not live in Europe.\nAlfonso lives in a place named Galicia.", "premises-FOL": "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))\n\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))\n\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))\nLiveIn(rochelle, europe)\n\u00acLiveIn(dominique, europe)\n\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))", "conclusion": "Rochelle lives in a place namedGalicia.", "conclusion-FOL": "\u2203y (LiveIn(rochelle, y) \u2227 Place(y) \u2227 Named(y, galicia))", "label": "Uncertain", "example_id": 596}
{"story_id": 209, "premises": "If someone lives in a place named Galicia, then they live in either Spain or Poland.\nSpain is in Europe.\nPoland is in Europe.\nRochelle lives in Europe.\nDominique does not live in Europe.\nAlfonso lives in a place named Galicia.", "premises-FOL": "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))\n\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))\n\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))\nLiveIn(rochelle, europe)\n\u00acLiveIn(dominique, europe)\n\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))", "conclusion": "Dominique does not live in Spain.", "conclusion-FOL": "\u2200x (Live(dominique, x) \u2192 \u00acIn(x, spain))", "label": "True", "example_id": 597}
{"story_id": 209, "premises": "If someone lives in a place named Galicia, then they live in either Spain or Poland.\nSpain is in Europe.\nPoland is in Europe.\nRochelle lives in Europe.\nDominique does not live in Europe.\nAlfonso lives in a place named Galicia.", "premises-FOL": "\u2200x (\u2203y (LiveIn(x, y) \u2227 Place(y) \u2227 Named(y, galicia)) \u2192 LiveIn(x, spain) \u2295 LiveIn(x, poland))\n\u2200x (LiveIn(x, spain) \u2192 LiveIn(x, europe))\n\u2200x (LiveIn(x, poland) \u2192 LiveIn(x, europe))\nLiveIn(rochelle, europe)\n\u00acLiveIn(dominique, europe)\n\u2203y (LiveIn(alfonso, y) \u2227 Place(y) \u2227 Named(y, galicia))", "conclusion": "Alfonso lives in Europe.", "conclusion-FOL": "\u2200x (Live(alfonso, x) \u2192 In(x, europe))", "label": "True", "example_id": 598}
{"story_id": 106, "premises": "Ralph Hammerthaler was born in Wasserburg am Inn.\nWasserburg am Inn is in Germany.\nGermany is in Europe.\nRalph Hammerthaler is a German writer.\nRalph Hammerthaler was born in 1965. ", "premises-FOL": "BornIn(ralphHammerthaler, wasserburgamInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler) \u2227 German(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)", "conclusion": "Ralph Hammerthaler is a writer born in Asia.", "conclusion-FOL": "Writer(ralphHammerthaler) \u2227 BornIn(ralphHammerthaler, asia)", "label": "Uncertain", "example_id": 321}
{"story_id": 106, "premises": "Ralph Hammerthaler was born in Wasserburg am Inn.\nWasserburg am Inn is in Germany.\nGermany is in Europe.\nRalph Hammerthaler is a German writer.\nRalph Hammerthaler was born in 1965. ", "premises-FOL": "BornIn(ralphHammerthaler, wasserburgamInn)\nLocatedIn(wasserbAmInn, germany)\nLocatedIn(germany, europe)\nWriter(ralphHammerthaler) \u2227 German(ralphHammerthaler)\nBornIn1965(ralphHammerthaler)", "conclusion": "Ralph Hammerthaler lives in Germany.", "conclusion-FOL": "LivesIn(ralphHammerthaler, germany)", "label": "Uncertain", "example_id": 322}
{"story_id": 415, "premises": "All books written by Neil Gaiman have sold more than one thousand copies.\nSome books that have won Hugo Awards are written by Neil Gaiman.\nTomas has read all books written by Tolkien. \nEither Tomas has read Hamlet, or it has sold more than one thousand copies.\nHamlet has either sold more than one thousand copies or it is written by Neil Gaiman.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))\n\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))\n\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))\nReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))\n\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)", "conclusion": "Hamlet has won a Hugo Award.", "conclusion-FOL": "Win(hamlet, hugoAward)", "label": "Uncertain", "example_id": 1166}
{"story_id": 415, "premises": "All books written by Neil Gaiman have sold more than one thousand copies.\nSome books that have won Hugo Awards are written by Neil Gaiman.\nTomas has read all books written by Tolkien. \nEither Tomas has read Hamlet, or it has sold more than one thousand copies.\nHamlet has either sold more than one thousand copies or it is written by Neil Gaiman.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))\n\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))\n\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))\nReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))\n\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)", "conclusion": "Hamlet has won a Hugo Award and is written by Tolkien.", "conclusion-FOL": "Win(hamlet, hugoAward) \u2227 WrittenBy(hamlet, tolkien)", "label": "False", "example_id": 1167}
{"story_id": 415, "premises": "All books written by Neil Gaiman have sold more than one thousand copies.\nSome books that have won Hugo Awards are written by Neil Gaiman.\nTomas has read all books written by Tolkien. \nEither Tomas has read Hamlet, or it has sold more than one thousand copies.\nHamlet has either sold more than one thousand copies or it is written by Neil Gaiman.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, neilGaiman)) \u2192 \u2203y (MoreThan(y, num1000) \u2227 SoldCopies(x, y)))\n\u2203x \u2203y (Book(x) \u2227 Win(x, hugoAward) \u2227 WrittenBy(x, neilGaiman) \u2227 (\u00ac(x=y)) \u2227 Book(y) \u2227 Win(y, hugoAward) \u2227 WrittenBy(y, neilGaiman))\n\u2200x ((Book(x) \u2227 WrittenBy(x, tolkien)) \u2192 ReadBy(x, tomas))\nReadBy(hamlet, tomas) \u2295 (\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)))\n\u2203y (MoreThan(y, num1000) \u2227 SoldCopies(hamlet, y)) \u2295 WrittenBy(hamlet, neilGaiman)", "conclusion": "If Hamlet has either won a Hugo Award and is written by Tolkien, or neither has won a Hugo Award nor is written by Tolkien, then Hamlet has neither won a Hugo Award nor is written by Neil Gaiman.", "conclusion-FOL": "\u00ac(Win(hamlet, hugoAward) \u2295 WrittenBy(hamlet, tolkien)) \u2192 (\u00acWin(hamlet, hugoAward) \u2227 (\u00acWrittenBy(hamlet, neilGaiman)))", "label": "True", "example_id": 1168}
{"story_id": 479, "premises": "Grass is not food\nAll meadows are grass.\nAll edible things are food. \nAll fruits are edible.\nAll lemons are fruit.\nGrapes are not both edible and lemons.\nBananas are grasses or fruits. ", "premises-FOL": "\u2200x (Grass(x) \u2192 \u00acFood(x))\n\u2200x (Meadow(x) \u2192 Grass(x))\n\u2200x (Edible(x) \u2192 Food(x))\n\u2200x (Fruit(x) \u2192 Edible(x))\n\u2200x (Lemon(x) \u2192 Fruit(x))\n\u00ac(Edible(grape) \u2227 Lemon(grape))\nGrass(banana) \u2228 Fruit(banana)", "conclusion": "Grapes are food.", "conclusion-FOL": "Food(grape)", "label": "Uncertain", "example_id": 1393}
{"story_id": 479, "premises": "Grass is not food\nAll meadows are grass.\nAll edible things are food. \nAll fruits are edible.\nAll lemons are fruit.\nGrapes are not both edible and lemons.\nBananas are grasses or fruits. ", "premises-FOL": "\u2200x (Grass(x) \u2192 \u00acFood(x))\n\u2200x (Meadow(x) \u2192 Grass(x))\n\u2200x (Edible(x) \u2192 Food(x))\n\u2200x (Fruit(x) \u2192 Edible(x))\n\u2200x (Lemon(x) \u2192 Fruit(x))\n\u00ac(Edible(grape) \u2227 Lemon(grape))\nGrass(banana) \u2228 Fruit(banana)", "conclusion": "Grapes are not a food.", "conclusion-FOL": "\u00acFood(grape)", "label": "Uncertain", "example_id": 1394}
{"story_id": 479, "premises": "Grass is not food\nAll meadows are grass.\nAll edible things are food. \nAll fruits are edible.\nAll lemons are fruit.\nGrapes are not both edible and lemons.\nBananas are grasses or fruits. ", "premises-FOL": "\u2200x (Grass(x) \u2192 \u00acFood(x))\n\u2200x (Meadow(x) \u2192 Grass(x))\n\u2200x (Edible(x) \u2192 Food(x))\n\u2200x (Fruit(x) \u2192 Edible(x))\n\u2200x (Lemon(x) \u2192 Fruit(x))\n\u00ac(Edible(grape) \u2227 Lemon(grape))\nGrass(banana) \u2228 Fruit(banana)", "conclusion": "Bananas are both lemons and meadows.", "conclusion-FOL": "Lemon(banana) \u2227 Meadow(banana)", "label": "False", "example_id": 1395}
{"story_id": 479, "premises": "Grass is not food\nAll meadows are grass.\nAll edible things are food. \nAll fruits are edible.\nAll lemons are fruit.\nGrapes are not both edible and lemons.\nBananas are grasses or fruits. ", "premises-FOL": "\u2200x (Grass(x) \u2192 \u00acFood(x))\n\u2200x (Meadow(x) \u2192 Grass(x))\n\u2200x (Edible(x) \u2192 Food(x))\n\u2200x (Fruit(x) \u2192 Edible(x))\n\u2200x (Lemon(x) \u2192 Fruit(x))\n\u00ac(Edible(grape) \u2227 Lemon(grape))\nGrass(banana) \u2228 Fruit(banana)", "conclusion": "Bananas are not both a lemon and a meadow.", "conclusion-FOL": "\u00ac(Lemon(banana) \u2227 Meadow(banana))", "label": "True", "example_id": 1396}
{"story_id": 21, "premises": "The Golden State Warriors are a team from San Francisco.\nThe Golden State Warriors won the NBA finals.\nAll teams attending the NBA finals have won many games.\nBoston Celtics are a team that lost the NBA finals.\nIf a team wins the NBA finals, then they will have more income.\nIf a team wins or loses at the NBA finals, then they are attending the finals.", "premises-FOL": "Team(goldenStateWarriors) \u2227 From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n\u2200x ((Team(x) \u2227 Attending(x, nbaFinals)) \u2192 WonManyGames(x))\nTeam(bostonCeltics) \u2227 Lost(bostonCeltics, nbaFinals)\n\u2200x ((Team(x) \u2227 Won(x, nbaFinals)) \u2192 MoreIncome(x))\n\u2200x ((Won(x, nbaFinals) \u2228 Lost(x, nbaFinals)) \u2192 Attending(x, nbaFinals))", "conclusion": "The Boston Celtics are from San Francisco.", "conclusion-FOL": "From(bostonCeltics, sanFrancisco)", "label": "Uncertain", "example_id": 60}
{"story_id": 21, "premises": "The Golden State Warriors are a team from San Francisco.\nThe Golden State Warriors won the NBA finals.\nAll teams attending the NBA finals have won many games.\nBoston Celtics are a team that lost the NBA finals.\nIf a team wins the NBA finals, then they will have more income.\nIf a team wins or loses at the NBA finals, then they are attending the finals.", "premises-FOL": "Team(goldenStateWarriors) \u2227 From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n\u2200x ((Team(x) \u2227 Attending(x, nbaFinals)) \u2192 WonManyGames(x))\nTeam(bostonCeltics) \u2227 Lost(bostonCeltics, nbaFinals)\n\u2200x ((Team(x) \u2227 Won(x, nbaFinals)) \u2192 MoreIncome(x))\n\u2200x ((Won(x, nbaFinals) \u2228 Lost(x, nbaFinals)) \u2192 Attending(x, nbaFinals))", "conclusion": "The Boston Celtics have more than 30 years of experience.", "conclusion-FOL": "HasMoreThanThirtyYearsOfHistory(bostonCeltics)", "label": "True", "example_id": 61}
{"story_id": 21, "premises": "The Golden State Warriors are a team from San Francisco.\nThe Golden State Warriors won the NBA finals.\nAll teams attending the NBA finals have won many games.\nBoston Celtics are a team that lost the NBA finals.\nIf a team wins the NBA finals, then they will have more income.\nIf a team wins or loses at the NBA finals, then they are attending the finals.", "premises-FOL": "Team(goldenStateWarriors) \u2227 From(goldenStateWarriors, sanFrancisco)\nWon(goldenStateWarriors, nbaFinals)\n\u2200x ((Team(x) \u2227 Attending(x, nbaFinals)) \u2192 WonManyGames(x))\nTeam(bostonCeltics) \u2227 Lost(bostonCeltics, nbaFinals)\n\u2200x ((Team(x) \u2227 Won(x, nbaFinals)) \u2192 MoreIncome(x))\n\u2200x ((Won(x, nbaFinals) \u2228 Lost(x, nbaFinals)) \u2192 Attending(x, nbaFinals))", "conclusion": "The Golden State Warriors will have more income from gate receipts.", "conclusion-FOL": "MoreIncome(goldenStateWarriors)", "label": "True", "example_id": 62}
{"story_id": 218, "premises": "Maya would only play the violin if her fingers could never be injured. \nVolleyball players can injure their ankles, fingers, or shoulder.\nMaya is a volleyball player.", "premises-FOL": "Play(maya, violin) \u2192 \u00acCanInjure(maya, fingers)\n\u2200x (VolleyballPlayer(x) \u2192 (CanInjure(ankles) \u2227 CanInjure(fingers) \u2227 CanInjure(shoulder)))\nVolleyballPlayer(maya)", "conclusion": "Maya will not play the violin.", "conclusion-FOL": "\u00acPlay(maya, violin)", "label": "True", "example_id": 620}
{"story_id": 428, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices with the company logo belong to the company. \nEach device either has the company logo or belongs to employees. \nAll of the devices belonging to employees can be connected to the company's wifi. \nAll of the devices connected to Google Home are controlled by managers. \nAll of the devices that connect to the company's wifi are easy to operate. \nAll of the devices that are easy to operate were produced after a new CTO is appointed. \nModelXX was not produced after a new CTO was appointed.", "premises-FOL": "\u2200x ((Devices(x) \u2227 BelongTo(x, company)) \u2192 ConnectTo(x, googleHome))\n\u2200x ((Devices(x) \u2227 With(x, companyLogo)) \u2192 BelongTo(x, company))\n\u2200x ((Devices(x) \u2192 (With(x, companyLogo) \u2295 BelongTo(x, employee)))\n\u2200x ((Devices(x) \u2227 BelongTo(x, employee)) \u2192 CanBeConnectedTo(x, wifi))\n\u2200x ((Devices(x) \u2227 ConnectTo(x, googleHome)) \u2192 ControlledBy(x, manager))\n\u2200x ((Devices(x) \u2227 CanBeConnectedTo(x, wifi)) \u2192 EasyToOperate(x))\n\u2200x ((Devices(x) \u2227 EasyToOperate(x)) \u2192 ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) \u2227 (\u00acProducedAfterNewCTOAppointed(modelXX, company))", "conclusion": "ModelXX is controlled by managers.", "conclusion-FOL": "ControlledBy(x, manager)", "label": "True", "example_id": 1215}
{"story_id": 428, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices with the company logo belong to the company. \nEach device either has the company logo or belongs to employees. \nAll of the devices belonging to employees can be connected to the company's wifi. \nAll of the devices connected to Google Home are controlled by managers. \nAll of the devices that connect to the company's wifi are easy to operate. \nAll of the devices that are easy to operate were produced after a new CTO is appointed. \nModelXX was not produced after a new CTO was appointed.", "premises-FOL": "\u2200x ((Devices(x) \u2227 BelongTo(x, company)) \u2192 ConnectTo(x, googleHome))\n\u2200x ((Devices(x) \u2227 With(x, companyLogo)) \u2192 BelongTo(x, company))\n\u2200x ((Devices(x) \u2192 (With(x, companyLogo) \u2295 BelongTo(x, employee)))\n\u2200x ((Devices(x) \u2227 BelongTo(x, employee)) \u2192 CanBeConnectedTo(x, wifi))\n\u2200x ((Devices(x) \u2227 ConnectTo(x, googleHome)) \u2192 ControlledBy(x, manager))\n\u2200x ((Devices(x) \u2227 CanBeConnectedTo(x, wifi)) \u2192 EasyToOperate(x))\n\u2200x ((Devices(x) \u2227 EasyToOperate(x)) \u2192 ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) \u2227 (\u00acProducedAfterNewCTOAppointed(modelXX, company))", "conclusion": "ModelXX is either produced after a new CTO was appointed or it is controlled by managers.", "conclusion-FOL": "ProducedAfterNewCTOAppointed(modelXX, theCompany) \u2295 ControlledBy(x, manager)", "label": "True", "example_id": 1216}
{"story_id": 428, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices with the company logo belong to the company. \nEach device either has the company logo or belongs to employees. \nAll of the devices belonging to employees can be connected to the company's wifi. \nAll of the devices connected to Google Home are controlled by managers. \nAll of the devices that connect to the company's wifi are easy to operate. \nAll of the devices that are easy to operate were produced after a new CTO is appointed. \nModelXX was not produced after a new CTO was appointed.", "premises-FOL": "\u2200x ((Devices(x) \u2227 BelongTo(x, company)) \u2192 ConnectTo(x, googleHome))\n\u2200x ((Devices(x) \u2227 With(x, companyLogo)) \u2192 BelongTo(x, company))\n\u2200x ((Devices(x) \u2192 (With(x, companyLogo) \u2295 BelongTo(x, employee)))\n\u2200x ((Devices(x) \u2227 BelongTo(x, employee)) \u2192 CanBeConnectedTo(x, wifi))\n\u2200x ((Devices(x) \u2227 ConnectTo(x, googleHome)) \u2192 ControlledBy(x, manager))\n\u2200x ((Devices(x) \u2227 CanBeConnectedTo(x, wifi)) \u2192 EasyToOperate(x))\n\u2200x ((Devices(x) \u2227 EasyToOperate(x)) \u2192 ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) \u2227 (\u00acProducedAfterNewCTOAppointed(modelXX, company))", "conclusion": "ModelXX is not with the company logo, and managers do not control it.", "conclusion-FOL": "\u00acWith(modelXX, companyLogo) \u2227 (\u00acControlledBy(x, manager))", "label": "False", "example_id": 1217}
{"story_id": 428, "premises": "All devices belonging to the company are connected to Google Home. \nAll devices with the company logo belong to the company. \nEach device either has the company logo or belongs to employees. \nAll of the devices belonging to employees can be connected to the company's wifi. \nAll of the devices connected to Google Home are controlled by managers. \nAll of the devices that connect to the company's wifi are easy to operate. \nAll of the devices that are easy to operate were produced after a new CTO is appointed. \nModelXX was not produced after a new CTO was appointed.", "premises-FOL": "\u2200x ((Devices(x) \u2227 BelongTo(x, company)) \u2192 ConnectTo(x, googleHome))\n\u2200x ((Devices(x) \u2227 With(x, companyLogo)) \u2192 BelongTo(x, company))\n\u2200x ((Devices(x) \u2192 (With(x, companyLogo) \u2295 BelongTo(x, employee)))\n\u2200x ((Devices(x) \u2227 BelongTo(x, employee)) \u2192 CanBeConnectedTo(x, wifi))\n\u2200x ((Devices(x) \u2227 ConnectTo(x, googleHome)) \u2192 ControlledBy(x, manager))\n\u2200x ((Devices(x) \u2227 CanBeConnectedTo(x, wifi)) \u2192 EasyToOperate(x))\n\u2200x ((Devices(x) \u2227 EasyToOperate(x)) \u2192 ProducedAfterNewCTOAppointed(x, company))\nDevices(modelXX) \u2227 (\u00acProducedAfterNewCTOAppointed(modelXX, company))", "conclusion": "ModelXX is either with the company logo or controlled by managers.", "conclusion-FOL": "With(modelXX, companyLogo) \u2295 ControlledBy(x, manager)", "label": "False", "example_id": 1218}
{"story_id": 266, "premises": "All CD players are delicate mechanisms.\nNo delicate mechanisms are suitable toys for children.", "premises-FOL": "\u2200x (CDPlayer(x) \u2192 DelicateMechanism(x))\n\u2200x (DelicateMechanism(x) \u2192 \u00ac(Toy(x) \u2227 SuitableFor(x, children)))", "conclusion": "Some CD players are suitable toys for children.", "conclusion-FOL": "\u2203x \u2203y (CDPlayer(x) \u2227 CDPlayer(y) \u2227 Toy(x) \u2227 Toy(y) \u2227 SuitableFor(x, children) \u2227 SuitableFor(y, children) \u2227 \u00ac(x=y))", "label": "Uncertain", "example_id": 710}
{"story_id": 347, "premises": "All mammals are living beings.\nAll elephants are mammals.\nAll baby elephants are elephants.\nSome baby elephants are sleepy.\nIf Jumbo is a living being, then Jumbo is not both an elephant and a mammal.\nIf Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal.", "premises-FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) \n\u2200x (Elephant(x) \u2192 Mammal(x))\n\u2200x (BabyElephant(x) \u2192 Elephant(x))\n\u2203x (BabyElephant(x) \u2227 Sleepy(x))\nLivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))\nSleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)", "conclusion": "Jumbo is sleepy.", "conclusion-FOL": "Sleepy(jumbo)", "label": "False", "example_id": 916}
{"story_id": 347, "premises": "All mammals are living beings.\nAll elephants are mammals.\nAll baby elephants are elephants.\nSome baby elephants are sleepy.\nIf Jumbo is a living being, then Jumbo is not both an elephant and a mammal.\nIf Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal.", "premises-FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) \n\u2200x (Elephant(x) \u2192 Mammal(x))\n\u2200x (BabyElephant(x) \u2192 Elephant(x))\n\u2203x (BabyElephant(x) \u2227 Sleepy(x))\nLivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))\nSleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)", "conclusion": "Jumbo is not sleepy.", "conclusion-FOL": "\u00acSleepy(jumbo)", "label": "True", "example_id": 917}
{"story_id": 347, "premises": "All mammals are living beings.\nAll elephants are mammals.\nAll baby elephants are elephants.\nSome baby elephants are sleepy.\nIf Jumbo is a living being, then Jumbo is not both an elephant and a mammal.\nIf Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal.", "premises-FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) \n\u2200x (Elephant(x) \u2192 Mammal(x))\n\u2200x (BabyElephant(x) \u2192 Elephant(x))\n\u2203x (BabyElephant(x) \u2227 Sleepy(x))\nLivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))\nSleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)", "conclusion": "Jumbo is a living being.", "conclusion-FOL": "LivingBeing(jumbo)", "label": "Uncertain", "example_id": 918}
{"story_id": 347, "premises": "All mammals are living beings.\nAll elephants are mammals.\nAll baby elephants are elephants.\nSome baby elephants are sleepy.\nIf Jumbo is a living being, then Jumbo is not both an elephant and a mammal.\nIf Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal.", "premises-FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) \n\u2200x (Elephant(x) \u2192 Mammal(x))\n\u2200x (BabyElephant(x) \u2192 Elephant(x))\n\u2203x (BabyElephant(x) \u2227 Sleepy(x))\nLivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))\nSleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)", "conclusion": "Jumbo is neither sleepy nor a baby elephant.", "conclusion-FOL": "\u00acSleepy(jumbo) \u2227 \u00acBabyElephant(jumbo))", "label": "True", "example_id": 919}
{"story_id": 347, "premises": "All mammals are living beings.\nAll elephants are mammals.\nAll baby elephants are elephants.\nSome baby elephants are sleepy.\nIf Jumbo is a living being, then Jumbo is not both an elephant and a mammal.\nIf Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal.", "premises-FOL": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) \n\u2200x (Elephant(x) \u2192 Mammal(x))\n\u2200x (BabyElephant(x) \u2192 Elephant(x))\n\u2203x (BabyElephant(x) \u2227 Sleepy(x))\nLivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2227 Mammal(jumbo))\nSleepy(jumbo) \u2192 BabyElephant(jumbo) \u2295 Mammal(jumbo)", "conclusion": "Jumbo is not sleepy or an elephant.", "conclusion-FOL": "\u00ac(Sleepy(jumbo) \u2295 Elephant(jumbo))", "label": "True", "example_id": 920}
{"story_id": 447, "premises": "No planet in the solar system relies on nuclear fusion to generate light.\nAll stars in the solar system rely on nuclear fusion to generate light. \nAll celestial bodies in the solar systems that have greater than 0.08 solar masses are stars. \nIf a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity, then it is a planet.\nIf Europa is a celestial body in the solar system that has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity or relies on nuclear fusion to generate light, then Europa is a celestial body in the solar system. ", "premises-FOL": "\u2200x (Planet(x) \u2227 In(x, solarSystem) \u2192 \u00acRelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (Star(x) \u2227 In(x, solarSystem) \u2192 RelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 GreaterThan(x, solarMass, 0point08) \u2192 Star(x))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(x, gravity) \u2192 Planet(x))\n(CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(europa, gravity)) \u2228 RelyOnToGenerate(europa, nuclearFusion, light) \u2192 CelestialBody(europa) \u2227 In(europa, solarSystem)", "conclusion": "Europa is a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity.", "conclusion-FOL": "CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(europa, gravity)", "label": "Uncertain", "example_id": 1286}
{"story_id": 447, "premises": "No planet in the solar system relies on nuclear fusion to generate light.\nAll stars in the solar system rely on nuclear fusion to generate light. \nAll celestial bodies in the solar systems that have greater than 0.08 solar masses are stars. \nIf a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity, then it is a planet.\nIf Europa is a celestial body in the solar system that has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity or relies on nuclear fusion to generate light, then Europa is a celestial body in the solar system. ", "premises-FOL": "\u2200x (Planet(x) \u2227 In(x, solarSystem) \u2192 \u00acRelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (Star(x) \u2227 In(x, solarSystem) \u2192 RelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 GreaterThan(x, solarMass, 0point08) \u2192 Star(x))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(x, gravity) \u2192 Planet(x))\n(CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(europa, gravity)) \u2228 RelyOnToGenerate(europa, nuclearFusion, light) \u2192 CelestialBody(europa) \u2227 In(europa, solarSystem)", "conclusion": "Europa is a celestial body in one of the solar systems that have greater than 0.08 solar masses.", "conclusion-FOL": "CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 GreaterThan(europa, solarMass, 0.08)", "label": "False", "example_id": 1287}
{"story_id": 447, "premises": "No planet in the solar system relies on nuclear fusion to generate light.\nAll stars in the solar system rely on nuclear fusion to generate light. \nAll celestial bodies in the solar systems that have greater than 0.08 solar masses are stars. \nIf a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity, then it is a planet.\nIf Europa is a celestial body in the solar system that has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity or relies on nuclear fusion to generate light, then Europa is a celestial body in the solar system. ", "premises-FOL": "\u2200x (Planet(x) \u2227 In(x, solarSystem) \u2192 \u00acRelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (Star(x) \u2227 In(x, solarSystem) \u2192 RelyOnToGenerate(x, nuclearFusion, light))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 GreaterThan(x, solarMass, 0point08) \u2192 Star(x))\n\u2200x (CelestialBody(x) \u2227 In(x, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(x, gravity) \u2192 Planet(x))\n(CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 (\u2203y (OrbitOf(y, x) \u2227 Clear(x, y) \u2227 DebrisFree(y))) \u2227 NearlySphericalShape(europa, gravity)) \u2228 RelyOnToGenerate(europa, nuclearFusion, light) \u2192 CelestialBody(europa) \u2227 In(europa, solarSystem)", "conclusion": "Europa is not a celestial body in one of the solar systems that have greater than 0.08 solar masses.", "conclusion-FOL": "\u00ac(CelestialBody(europa) \u2227 In(europa, solarSystem) \u2227 GreaterThan(europa, solarMass, 0.08))", "label": "True", "example_id": 1288}
{"story_id": 353, "premises": "If Max listens to music, he either listens to classical music or rap.\nAll the classical songs that Max listens to are from the 12th century. \nIf Max is listening to a rap song, then the song is by Kanye West. \nAll songs by Kanye West are full of lyrics. \nAll songs that are full of lyrics need to be written with words\nIt is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.\nMax listens to \"As it was\" by Harry Styles.", "premises-FOL": "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))\n\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))\n\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))\n\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))\n\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))\n\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)", "conclusion": "\u201cAs it was\u201d by Harry Styles needs to be written with words.", "conclusion-FOL": "NeedToBeWrittenWith(asItWasByHarryStyles, words)", "label": "True", "example_id": 936}
{"story_id": 353, "premises": "If Max listens to music, he either listens to classical music or rap.\nAll the classical songs that Max listens to are from the 12th century. \nIf Max is listening to a rap song, then the song is by Kanye West. \nAll songs by Kanye West are full of lyrics. \nAll songs that are full of lyrics need to be written with words\nIt is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.\nMax listens to \"As it was\" by Harry Styles.", "premises-FOL": "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))\n\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))\n\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))\n\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))\n\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))\n\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)", "conclusion": "\"As it was\u201d by Harry Styles is a song from the 12th century.", "conclusion-FOL": "Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury)", "label": "Uncertain", "example_id": 937}
{"story_id": 353, "premises": "If Max listens to music, he either listens to classical music or rap.\nAll the classical songs that Max listens to are from the 12th century. \nIf Max is listening to a rap song, then the song is by Kanye West. \nAll songs by Kanye West are full of lyrics. \nAll songs that are full of lyrics need to be written with words\nIt is not true that \u201cAs it was\u201d by Harry Styles is classical music that Max listens to and is from the 12th century.\nMax listens to \"As it was\" by Harry Styles.", "premises-FOL": "\u2200x (MaxListenTo(x) \u2192 (ClassicalMusic(x) \u2295 Rap(x)))\n\u2200x (MaxListenTo(x) \u2227 ClassicalMusic(x) \u2192 Song(x) \u2227 From(x, 12thCentury))\n\u2200x (MaxListenTo(x) \u2227 Rap(x) \u2192 Song(x) \u2227 By(x, kanyeWest))\n\u2200x (Song(x) \u2227 By(x, kanyeWest) \u2192 Song(x) \u2227 FullOfLyrics(x))\n\u2200x (Song(x) \u2227 FullOfLyrics(x) \u2192 NeedToBeWrittenWith(x, words))\n\u00ac(ClassicalMusic(asItWasByHarryStyles) \u2227 Song(asItWasByHarryStyles) \u2227 From(asItWasByHarryStyles, 12thCentury))\nMaxListenTo(asItWasByHarryStyles)", "conclusion": "\"As it was\u201d by Harry Styles is not both a song from Kanye West and needed to be written with words.", "conclusion-FOL": "\u00ac(Song(asItWasByHarryStyles) \u2227 By(asItWasByHarryStyles, kanyeWest) \u2227 NeedToBeWrittenWith(asItWasByHarryStyles, words))", "label": "False", "example_id": 938}
{"story_id": 39, "premises": "\"Your Woman\" is a song by the British one-person band White Town.\n\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.\nIf a song peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.", "premises-FOL": "Produce(whiteTown, yourWoman) \u2227 OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n\u2200x ((\u2203y(Peak(x, y))) \u2192 Popular(x))\nPeak(yourWoman, iceland) \u2227 Peak(yourWoman, israel) \u2227 Peak(yourWoman, spain)", "conclusion": "\"Your Woman\" was extremely popular.", "conclusion-FOL": "Popular(yourWoman)", "label": "True", "example_id": 113}
{"story_id": 39, "premises": "\"Your Woman\" is a song by the British one-person band White Town.\n\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.\nIf a song peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.", "premises-FOL": "Produce(whiteTown, yourWoman) \u2227 OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n\u2200x ((\u2203y(Peak(x, y))) \u2192 Popular(x))\nPeak(yourWoman, iceland) \u2227 Peak(yourWoman, israel) \u2227 Peak(yourWoman, spain)", "conclusion": "White Town did not produce any popular songs.", "conclusion-FOL": "\u2200x (Produce(whiteTown, x) \u2192 \u00acPopular(x))", "label": "False", "example_id": 114}
{"story_id": 39, "premises": "\"Your Woman\" is a song by the British one-person band White Town.\n\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.\nIf a song peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.", "premises-FOL": "Produce(whiteTown, yourWoman) \u2227 OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n\u2200x ((\u2203y(Peak(x, y))) \u2192 Popular(x))\nPeak(yourWoman, iceland) \u2227 Peak(yourWoman, israel) \u2227 Peak(yourWoman, spain)", "conclusion": "White Town was a successful band.", "conclusion-FOL": "Successful(whiteTown)", "label": "Uncertain", "example_id": 115}
{"story_id": 374, "premises": "\nAll functions that represent straight lines on the coordinate plane are linear functions. \nNo linear functions are non-convex functions.\nA function is either a non-convex fuction or a convex function.\nAll quasi-convex functions are real-valued functions.\nAll convex functions are quasi-convex functions. \nThe maximum of quasiconvex functions is a function.\nThe maximum of quasiconvex functions is a function that represents straight lines on the coordinate plane or it is a convex function or it is not a non-convex function.", "premises-FOL": "\u2200x (Function(x) \u2227 RepresentOn(x, straightLine, coordinatePlane) \u2192 LinearFunction(x))\n\u2200x (LinearFunction(x) \u2192 \u00acNonConvexFunction(x))\n\u2200x (Function(x) \u2192 NonConvexFunction(x) \u2295 ConvexFunction(x))\n\u2200x (QuasiConvexFunction(x) \u2192 RealValuedFunction(x))\n\u2200x (ConvexFunction(x) \u2192 QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) \u2227 RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) \u2228 ConvexFunction(maximumOfQuasiConvexFunction) \u2228 \u00acNonConvexFunction(maximumOfQuasiConvexFunction)", "conclusion": "The maximum of quasiconvex functions is a function that represent straight lines on the coordinate plane.", "conclusion-FOL": "Function(maximumOfQuasiConvexFunction) \u2227 RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)", "label": "Uncertain", "example_id": 996}
{"story_id": 374, "premises": "\nAll functions that represent straight lines on the coordinate plane are linear functions. \nNo linear functions are non-convex functions.\nA function is either a non-convex fuction or a convex function.\nAll quasi-convex functions are real-valued functions.\nAll convex functions are quasi-convex functions. \nThe maximum of quasiconvex functions is a function.\nThe maximum of quasiconvex functions is a function that represents straight lines on the coordinate plane or it is a convex function or it is not a non-convex function.", "premises-FOL": "\u2200x (Function(x) \u2227 RepresentOn(x, straightLine, coordinatePlane) \u2192 LinearFunction(x))\n\u2200x (LinearFunction(x) \u2192 \u00acNonConvexFunction(x))\n\u2200x (Function(x) \u2192 NonConvexFunction(x) \u2295 ConvexFunction(x))\n\u2200x (QuasiConvexFunction(x) \u2192 RealValuedFunction(x))\n\u2200x (ConvexFunction(x) \u2192 QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) \u2227 RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) \u2228 ConvexFunction(maximumOfQuasiConvexFunction) \u2228 \u00acNonConvexFunction(maximumOfQuasiConvexFunction)", "conclusion": "The maximum of quasiconvex functions is not a real-valued function.", "conclusion-FOL": "\u00acRealValuedFunction(maximumOfQuasiConvexFunction)", "label": "False", "example_id": 997}
{"story_id": 374, "premises": "\nAll functions that represent straight lines on the coordinate plane are linear functions. \nNo linear functions are non-convex functions.\nA function is either a non-convex fuction or a convex function.\nAll quasi-convex functions are real-valued functions.\nAll convex functions are quasi-convex functions. \nThe maximum of quasiconvex functions is a function.\nThe maximum of quasiconvex functions is a function that represents straight lines on the coordinate plane or it is a convex function or it is not a non-convex function.", "premises-FOL": "\u2200x (Function(x) \u2227 RepresentOn(x, straightLine, coordinatePlane) \u2192 LinearFunction(x))\n\u2200x (LinearFunction(x) \u2192 \u00acNonConvexFunction(x))\n\u2200x (Function(x) \u2192 NonConvexFunction(x) \u2295 ConvexFunction(x))\n\u2200x (QuasiConvexFunction(x) \u2192 RealValuedFunction(x))\n\u2200x (ConvexFunction(x) \u2192 QuasiConvexFunction(x))\nFunction(maximumOfQuasiConvexFunction)\n(Function(maximumOfQuasiConvexFunction) \u2227 RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) \u2228 ConvexFunction(maximumOfQuasiConvexFunction) \u2228 \u00acNonConvexFunction(maximumOfQuasiConvexFunction)", "conclusion": "The maximum of quasiconvex functions is a quasi-convex function or it is not a real-valued function.", "conclusion-FOL": "QuasiConvexFunction(maximumOfQuasiConvexFunction) \u2228 \u00acRealValuedFunction(maximumOfQuasiConvexFunction)", "label": "True", "example_id": 998}
{"story_id": 188, "premises": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of goals in one UCL final during both regular and extra time, they need to play the penalty shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one goal in the 2016 UCL final during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero goals in the 2016 UCL final during the extra time.", "premises-FOL": "\u2200w \u2200x \u2200y \u2200z (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 NumberOfGoalScored(x, z) \u2227 NumberOfGoalScored(y, w) \u2227 y=w \u2227 During(regularTime) \u2192 PlayExtra(x, y))\n\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)", "conclusion": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in the 2016 UCL final.", "conclusion-FOL": "PlayPenalty(realMadrid, atleticoMadrid)", "label": "True", "example_id": 540}
{"story_id": 188, "premises": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of goals in one UCL final during both regular and extra time, they need to play the penalty shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one goal in the 2016 UCL final during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero goals in the 2016 UCL final during the extra time.", "premises-FOL": "\u2200w \u2200x \u2200y \u2200z (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 NumberOfGoalScored(x, z) \u2227 NumberOfGoalScored(y, w) \u2227 y=w \u2227 During(regularTime) \u2192 PlayExtra(x, y))\n\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)", "conclusion": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in the 2016 UCL final.", "conclusion-FOL": "\u00acPlayPenalty(realMadrid, atleticoMadrid)", "label": "False", "example_id": 541}
{"story_id": 13, "premises": "System 7 is a UK-based electronic dance music band.\nSteve Hillage and Miquette Giraudy formed System 7.\nSteve Hillage and Miquette Giraudy are former members of the band Gong.\nElectric dance music bands are bands.\nSystem 7 has released several club singles.\nClub singles are not singles.", "premises-FOL": "BasedIn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) \u2227 Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)\n\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))\n\u2203x (ClubSingle(x) \u2227 Release(system7, x))\n\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))", "conclusion": "System 7 was formed by former members of Gong.", "conclusion-FOL": "\u2203x (Form(x, system7) \u2227 FormerMemberOf(x, gong))", "label": "True", "example_id": 35}
{"story_id": 13, "premises": "System 7 is a UK-based electronic dance music band.\nSteve Hillage and Miquette Giraudy formed System 7.\nSteve Hillage and Miquette Giraudy are former members of the band Gong.\nElectric dance music bands are bands.\nSystem 7 has released several club singles.\nClub singles are not singles.", "premises-FOL": "BasedIn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) \u2227 Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)\n\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))\n\u2203x (ClubSingle(x) \u2227 Release(system7, x))\n\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))", "conclusion": "System 7 has released several singles.", "conclusion-FOL": "\u2203x (Single(x) \u2227 Release(system7, x))", "label": "Uncertain", "example_id": 36}
{"story_id": 13, "premises": "System 7 is a UK-based electronic dance music band.\nSteve Hillage and Miquette Giraudy formed System 7.\nSteve Hillage and Miquette Giraudy are former members of the band Gong.\nElectric dance music bands are bands.\nSystem 7 has released several club singles.\nClub singles are not singles.", "premises-FOL": "BasedIn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)\nForm(stevehillage, system7) \u2227 Form(miquettegiraudy, system7)\nFormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)\n\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))\n\u2203x (ClubSingle(x) \u2227 Release(system7, x))\n\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))", "conclusion": "System 7 is not a band.", "conclusion-FOL": "\u00acBand(system7)", "label": "False", "example_id": 37}
{"story_id": 189, "premises": "A summarization model is always faithful if it uses content from the input documents.\nExtractive models are summarization models.\nAn extractive model can only use content from the input documents.", "premises-FOL": "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))\n\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))\n\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))", "conclusion": "Extractive models are always faithful.", "conclusion-FOL": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Faithful(x))", "label": "True", "example_id": 542}
{"story_id": 189, "premises": "A summarization model is always faithful if it uses content from the input documents.\nExtractive models are summarization models.\nAn extractive model can only use content from the input documents.", "premises-FOL": "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))\n\u2200x (Model(x) \u2227 Extractive(x) \u2192 Model(x) \u2227 Summarization(x))\n\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))", "conclusion": "Extractive models are not always faithful.", "conclusion-FOL": "\u2203x (Model(x) \u2227 Extractive(x) \u2227 \u00acFaithful(x))", "label": "False", "example_id": 543}
{"story_id": 370, "premises": "If Robin's friends practice coding questions, then they are not studying to go to medical school to become a doctor.\nIf Robin's friends want to work in the software engineering industry, then they practice coding questions.\nIf Robin's friends enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.\nIf Robin's friends grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.\nIf Robin's friends study hard, then they grew up with parents who worked as doctors.\nMark is Robin's friend.\nIf Mark neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Mark is either a person who studies hard or grew up with parents who worked as doctors.", "premises-FOL": "\u2200x (RobinsFriends(x) \u2227 Practice(x, codingQuestion) \u2192 \u00acStudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 WantToWorkIn(x, softwareEngineeringIndustry) \u2192 PracticeCodingQuestions(x))\n\u2200x (RobinsFriends(x) \u2227 Enjoy(x, healthcareField) \u2227 WantToHelp(x, peopleWithMedicalIssue) \u2192 StudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 EnjoyHealthcareFields(x) \u2227 WantToHelp(x, peopleWithMedicalIssue))\n\u2200x (RobinsFriends(x) \u2227 StudyHard(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))\nRobinsFriends(mark)\n\u00ac((Enjoy(x, healthcareField) \u2227 WantToHelp(mark, peopleWithMedicalIssues)) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 StudyHard(mark) \u2228 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))", "conclusion": "Mark is Robin's friend and he is a person who studies hard.", "conclusion-FOL": "RobinsFriends(mark) \u2227 StudyHard(mark)", "label": "Uncertain", "example_id": 984}
{"story_id": 370, "premises": "If Robin's friends practice coding questions, then they are not studying to go to medical school to become a doctor.\nIf Robin's friends want to work in the software engineering industry, then they practice coding questions.\nIf Robin's friends enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.\nIf Robin's friends grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.\nIf Robin's friends study hard, then they grew up with parents who worked as doctors.\nMark is Robin's friend.\nIf Mark neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Mark is either a person who studies hard or grew up with parents who worked as doctors.", "premises-FOL": "\u2200x (RobinsFriends(x) \u2227 Practice(x, codingQuestion) \u2192 \u00acStudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 WantToWorkIn(x, softwareEngineeringIndustry) \u2192 PracticeCodingQuestions(x))\n\u2200x (RobinsFriends(x) \u2227 Enjoy(x, healthcareField) \u2227 WantToHelp(x, peopleWithMedicalIssue) \u2192 StudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 EnjoyHealthcareFields(x) \u2227 WantToHelp(x, peopleWithMedicalIssue))\n\u2200x (RobinsFriends(x) \u2227 StudyHard(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))\nRobinsFriends(mark)\n\u00ac((Enjoy(x, healthcareField) \u2227 WantToHelp(mark, peopleWithMedicalIssues)) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 StudyHard(mark) \u2228 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))", "conclusion": "Mark is Robin's friend and he practices coding questions and wants to work in the software engineering industry.", "conclusion-FOL": "RobinsFriends(mark) \u2227 Practice(mark, codingQuestion) \u2227 WantToWorkIn(mark, softwareEngineeringIndustry)", "label": "False", "example_id": 985}
{"story_id": 370, "premises": "If Robin's friends practice coding questions, then they are not studying to go to medical school to become a doctor.\nIf Robin's friends want to work in the software engineering industry, then they practice coding questions.\nIf Robin's friends enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.\nIf Robin's friends grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.\nIf Robin's friends study hard, then they grew up with parents who worked as doctors.\nMark is Robin's friend.\nIf Mark neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Mark is either a person who studies hard or grew up with parents who worked as doctors.", "premises-FOL": "\u2200x (RobinsFriends(x) \u2227 Practice(x, codingQuestion) \u2192 \u00acStudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 WantToWorkIn(x, softwareEngineeringIndustry) \u2192 PracticeCodingQuestions(x))\n\u2200x (RobinsFriends(x) \u2227 Enjoy(x, healthcareField) \u2227 WantToHelp(x, peopleWithMedicalIssue) \u2192 StudyingToGoToToBecome(x, medicalSchool, doctor))\n\u2200x (RobinsFriends(x) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 EnjoyHealthcareFields(x) \u2227 WantToHelp(x, peopleWithMedicalIssue))\n\u2200x (RobinsFriends(x) \u2227 StudyHard(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))\nRobinsFriends(mark)\n\u00ac((Enjoy(x, healthcareField) \u2227 WantToHelp(mark, peopleWithMedicalIssues)) \u2227 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z))) \u2192 StudyHard(mark) \u2228 (\u2203y \u2203z (\u00ac(y=z) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z) \u2227 ParentOf(y, x) \u2227 ParentOf(z, x) \u2227 Doctor(y) \u2227 Doctor(z)))", "conclusion": "Mark is Robin's friend and he neither practices coding questions nor works to work in the software engineering industry.", "conclusion-FOL": "RobinsFriends(mark) \u2227 \u00ac(Practice(mark, codingQuestion) \u2228 WantToWorkIn(mark, softwareEngineeringIndustry))", "label": "True", "example_id": 986}
{"story_id": 383, "premises": "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.\nPeople who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.\nIf people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.\nIf people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.\nThomas works at Jess's company.\nIf Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.\nThomas values quality manufacturing and luxury items or he is not miserly.", "premises-FOL": "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))\n\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))\n\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))\n\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))", "conclusion": "Thomas frivolously spends a lot of money.", "conclusion-FOL": "SpendFrivolously(thomas, aLotOfMoney)", "label": "False", "example_id": 1023}
{"story_id": 383, "premises": "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.\nPeople who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.\nIf people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.\nIf people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.\nThomas works at Jess's company.\nIf Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.\nThomas values quality manufacturing and luxury items or he is not miserly.", "premises-FOL": "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))\n\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))\n\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))\n\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))", "conclusion": "Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently.", "conclusion-FOL": "Enjoy(thomas, shopping, materialisticItem) \u2295 GoToSpaFrequently(thomas)", "label": "True", "example_id": 1024}
{"story_id": 383, "premises": "People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income.\nPeople who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money.\nIf people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items.\nIf people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.\nThomas works at Jess's company.\nIf Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items.\nThomas values quality manufacturing and luxury items or he is not miserly.", "premises-FOL": "\u2200x (WorkAt(x, jesssCompany) \u2227 GoToSpafrequently(x) \u2192 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)))\n\u2200x (WorkAt(x, jesssCompany) \u2192 Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome)\u2295 SpendFrivolously(x, aLotOfMoney))\n\u2200x (WorkAt(x, jesssCompany) \u2227 SpendFrivolously(x, aLotOfMoney) \u2192 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem))\n\u2200x (WorkAt(x, jesssCompany) \u2227 Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem) \u2192 Enjoy(x, shopping, materialisticItem))\nWorkAt(thomas, jesssCompany)\n\u00ac(Miserly(thomas) \u2227 NeedToSave(thomas, aLargePortionOfIncome)) \u2192 \u00ac((Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)))\n(Value(thomas, qualityManufacturing) \u2227 Value(thomas, luxuryItem)) \u2228 \u00ac(Miserly(x) \u2227 NeedToSave(x, aLargePortionOfIncome))", "conclusion": "If Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently, then Thomas neither values quality manufacturing and luxury items nor goes to the spa frequently.", "conclusion-FOL": "Enjoy(thomas, shopping, materialisticItem) \u2295 GoToSpaFrequently(thomas) \u2192 \u00ac((Value(x, qualityManufacturing) \u2227 Value(x, luxuryItem)) \u2228 GoToSpaFrequently(thomas))", "label": "False", "example_id": 1025}
{"story_id": 220, "premises": "The indie pop band Phoenix has released six albums. \nPhoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. \nA certified gold album or single is one which sold over half a million copies. \n\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"\nOver 400,000 copies of \"1901\" have been sold. ", "premises-FOL": "AlbumsReleased(phoenix, 6)\nAlbum(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, 500,000)\n\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, 500,000) \u2192 CertifiedGold(x))\nSingle(1901) \u2227 From(1901, wolfgangamadeusphoenix) \u2227 By(1901, phoenix)\nSoldOver(l1901, 400,000)", "conclusion": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.", "conclusion-FOL": "CertifiedGold(wolfgangamAdeusPhoenix)", "label": "True", "example_id": 624}
{"story_id": 220, "premises": "The indie pop band Phoenix has released six albums. \nPhoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. \nA certified gold album or single is one which sold over half a million copies. \n\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"\nOver 400,000 copies of \"1901\" have been sold. ", "premises-FOL": "AlbumsReleased(phoenix, 6)\nAlbum(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, 500,000)\n\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, 500,000) \u2192 CertifiedGold(x))\nSingle(1901) \u2227 From(1901, wolfgangamadeusphoenix) \u2227 By(1901, phoenix)\nSoldOver(l1901, 400,000)", "conclusion": "The single \"1901\" is a certified gold single.", "conclusion-FOL": "CertifiedGold(1901)", "label": "Uncertain", "example_id": 625}
{"story_id": 5, "premises": "Peter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.", "premises-FOL": "Superhero(peterParker) \u2295 Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) \u2192 WakesUp(theHulk)\nWakesUp(theHulk) \u2192 Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) \u2192 Breaks(thor, bridge)\n\u2200x (God(x) \u2192 \u00acDestroyer(x))\nSuperhero(peter) \u2192 Wears(peter, uniform)\n\u2200x ((Destroyer(x) \u2227 Breaks(x,bridge)) \u2192 \u00acCivilian(peter))\nHappy(thor) \u2192 Angry(theHulk)", "conclusion": "If the Hulk does not wake up, then Thor is not happy.", "conclusion-FOL": "\u00acWakesUp(theHulk) \u2192 \u00acHappy(thor)", "label": "True", "example_id": 11}
{"story_id": 5, "premises": "Peter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.", "premises-FOL": "Superhero(peterParker) \u2295 Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) \u2192 WakesUp(theHulk)\nWakesUp(theHulk) \u2192 Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) \u2192 Breaks(thor, bridge)\n\u2200x (God(x) \u2192 \u00acDestroyer(x))\nSuperhero(peter) \u2192 Wears(peter, uniform)\n\u2200x ((Destroyer(x) \u2227 Breaks(x,bridge)) \u2192 \u00acCivilian(peter))\nHappy(thor) \u2192 Angry(theHulk)", "conclusion": "If Thor is happy, then Peter Parker wears a uniform.", "conclusion-FOL": "Happy(thor) \u2192 Wears(peterParker, uniform)", "label": "True", "example_id": 12}
{"story_id": 5, "premises": "Peter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.", "premises-FOL": "Superhero(peterParker) \u2295 Civilian(peterParker)\nDestroyer(theHulk)\nAngry(theHulk) \u2192 WakesUp(theHulk)\nWakesUp(theHulk) \u2192 Breaks(theHulk, bridge)\nGod(thor)\nHappy(thor) \u2192 Breaks(thor, bridge)\n\u2200x (God(x) \u2192 \u00acDestroyer(x))\nSuperhero(peter) \u2192 Wears(peter, uniform)\n\u2200x ((Destroyer(x) \u2227 Breaks(x,bridge)) \u2192 \u00acCivilian(peter))\nHappy(thor) \u2192 Angry(theHulk)", "conclusion": "If Thor is not happy, then no bridge will be broken.", "conclusion-FOL": "\u00acHappy(thor) \u2192 \u00acBreaks(thor, bridge)", "label": "Uncertain", "example_id": 13}
{"story_id": 85, "premises": "Diethylcarbamazine is a medication discovered in the year 1947.\nDiethylcarbamazine can be used to treat river blindness.\nThe only preferred treatment for river blindness is ivermectin.\nDiethylcarbamazine is not ivermectin.", "premises-FOL": "Medication(diethylcarbamazine) \u2227 DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n\u00ac(Is(diethylcarbamazine, ivermectin))", "conclusion": "Diethylcarbamazine is not preferred for the treatment of river blindness.", "conclusion-FOL": "\u00ac(PreferredTreatmentFor(riverBlindness, diethylcarbamazine))", "label": "True", "example_id": 258}
{"story_id": 85, "premises": "Diethylcarbamazine is a medication discovered in the year 1947.\nDiethylcarbamazine can be used to treat river blindness.\nThe only preferred treatment for river blindness is ivermectin.\nDiethylcarbamazine is not ivermectin.", "premises-FOL": "Medication(diethylcarbamazine) \u2227 DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n\u00ac(Is(diethylcarbamazine, ivermectin))", "conclusion": "Diethylcarbamazine was often used to treat river blindness.", "conclusion-FOL": "Treats(diethylcarbamazine, riverBlindness)", "label": "Uncertain", "example_id": 259}
{"story_id": 85, "premises": "Diethylcarbamazine is a medication discovered in the year 1947.\nDiethylcarbamazine can be used to treat river blindness.\nThe only preferred treatment for river blindness is ivermectin.\nDiethylcarbamazine is not ivermectin.", "premises-FOL": "Medication(diethylcarbamazine) \u2227 DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n\u00ac(Is(diethylcarbamazine, ivermectin))", "conclusion": "Diethylcarbamazine is used in the treatment of filariasis.", "conclusion-FOL": "Treats(diethylcarbamazine, filariasis)", "label": "Uncertain", "example_id": 260}
{"story_id": 392, "premises": "All prime numbers are natural numbers.\nAll integers are real numbers. \nAll real numbers are complex numbers. \nOne is a prime number or a natural number or both.\nIf one is not a complex number, then one is a prime number and an integer.", "premises-FOL": "\u2200x (PrimeNumber(x) \u2192 NaturalNumber(x)) \n\u2200x (Integer(x) \u2192 RealNumber(x))\n\u2200x (RealNumber(x) \u2192 ComplexNumber(x)) \nPrimeNumber(one) \u2228 NaturalNumber(one)\n\u00acComplexNumber(one) \u2192 (PrimeNumber(one) \u2227 Integer(one))", "conclusion": "One is a real number.", "conclusion-FOL": "RealNumber(one)", "label": "Uncertain", "example_id": 1057}
{"story_id": 392, "premises": "All prime numbers are natural numbers.\nAll integers are real numbers. \nAll real numbers are complex numbers. \nOne is a prime number or a natural number or both.\nIf one is not a complex number, then one is a prime number and an integer.", "premises-FOL": "\u2200x (PrimeNumber(x) \u2192 NaturalNumber(x)) \n\u2200x (Integer(x) \u2192 RealNumber(x))\n\u2200x (RealNumber(x) \u2192 ComplexNumber(x)) \nPrimeNumber(one) \u2228 NaturalNumber(one)\n\u00acComplexNumber(one) \u2192 (PrimeNumber(one) \u2227 Integer(one))", "conclusion": "One is a prime number and a natural number.", "conclusion-FOL": "PrimeNumber(one) \u2227 NaturalNumber(one)", "label": "True", "example_id": 1058}
{"story_id": 392, "premises": "All prime numbers are natural numbers.\nAll integers are real numbers. \nAll real numbers are complex numbers. \nOne is a prime number or a natural number or both.\nIf one is not a complex number, then one is a prime number and an integer.", "premises-FOL": "\u2200x (PrimeNumber(x) \u2192 NaturalNumber(x)) \n\u2200x (Integer(x) \u2192 RealNumber(x))\n\u2200x (RealNumber(x) \u2192 ComplexNumber(x)) \nPrimeNumber(one) \u2228 NaturalNumber(one)\n\u00acComplexNumber(one) \u2192 (PrimeNumber(one) \u2227 Integer(one))", "conclusion": "One is either a prime number or a natural number.", "conclusion-FOL": "PrimeNumber(one) \u2295  NaturalNumber(one)", "label": "False", "example_id": 1059}
{"story_id": 387, "premises": "If some diseases require a medical diagnosis, then lab tests or imaging is required. \nAll rare diseases require a medical diagnosis.\nIf a disease is mild, then no lab tests or imaging is required. \nAll blood cancers are rare diseases.\nAll types of leukemia are diseases and blood cancers. \nBladder cancer is a disease and is blood cancer or Leukemia.", "premises-FOL": "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) \n\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))\n\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) \n\u2200x (BloodCancer(x) \u2192 RareDiseases(x))\n\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))\nDisease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))", "conclusion": "Bladder cancer is a mild disease.", "conclusion-FOL": "Mild(bladderCancer)", "label": "False", "example_id": 1035}
{"story_id": 387, "premises": "If some diseases require a medical diagnosis, then lab tests or imaging is required. \nAll rare diseases require a medical diagnosis.\nIf a disease is mild, then no lab tests or imaging is required. \nAll blood cancers are rare diseases.\nAll types of leukemia are diseases and blood cancers. \nBladder cancer is a disease and is blood cancer or Leukemia.", "premises-FOL": "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) \n\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))\n\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) \n\u2200x (BloodCancer(x) \u2192 RareDiseases(x))\n\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))\nDisease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))", "conclusion": "Bladder cancer is Leukemia.", "conclusion-FOL": "Leukemia(bladderCancer)", "label": "Uncertain", "example_id": 1036}
{"story_id": 387, "premises": "If some diseases require a medical diagnosis, then lab tests or imaging is required. \nAll rare diseases require a medical diagnosis.\nIf a disease is mild, then no lab tests or imaging is required. \nAll blood cancers are rare diseases.\nAll types of leukemia are diseases and blood cancers. \nBladder cancer is a disease and is blood cancer or Leukemia.", "premises-FOL": "\u2200x (Disease(x) \u2227 Require(x, medicalDiagnosis) \u2192 RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x)) \n\u2200x (RareDisease(x) \u2192 Require(x, medicalDiagnosis))\n\u2200x (Disease(x) \u2227 Mild(x) \u2192 \u00ac(RequiredFor(labTest, x) \u2228 RequiredFor(imaging, x))) \n\u2200x (BloodCancer(x) \u2192 RareDiseases(x))\n\u2200x (Disease(x) \u2227 Leukemia(x) \u2192 BloodCancer(x))\nDisease(bladderCancer) \u2227 (BloodCancer(bladderCancer) \u2228 Leukemia(bladderCancer))", "conclusion": "Bladder cancer is either a rare disease or a mild disease.", "conclusion-FOL": "RareDisease(bladderCancer) \u2295 Mild(bladderCancer)", "label": "True", "example_id": 1037}
{"story_id": 390, "premises": "There are no elements with atomic number between 61-63 that are not scarce in China.\nNon-rare earth elements are not scarce in China.\nAll elements are either non-rare earth elements or rare earth elements. \nAll rare earth elements can be used for industry.\nAll rare earth elements are essential for exploring future directions of electronics.\nLithium is either a non-rare earth element and essential for exploring future directions of electronics, or is not a non-rare earth element and is not essential for exploring future directions of electronics.", "premises-FOL": "\u2200x ((Element(x) \u2227 \u2203y(Between(y, num61, num63) \u2227 AtomicNumber(x, y))) \u2192 ScarceIn(x, china))\n\u2200x (\u00acRareEarthElement(x) \u2192 \u00acScarceIn(x, china)) \n\u2200x (\u00acRareEarthElement(x) \u2295 RareEarthElement(x)) \n\u2200x (RareEarthElement(x) \u2192 UsedIn(x, industry)) \n\u2200x (RareEarthElement(x) \u2192 EssentialFor(x, electronics))\n\u00ac(\u00acRareEarthElement(lithium) \u2295 EssentialFor(lithium, electronics))", "conclusion": "Lithium is a rare earth element.", "conclusion-FOL": "RareEarthElement(lithium)", "label": "Uncertain", "example_id": 1044}
{"story_id": 390, "premises": "There are no elements with atomic number between 61-63 that are not scarce in China.\nNon-rare earth elements are not scarce in China.\nAll elements are either non-rare earth elements or rare earth elements. \nAll rare earth elements can be used for industry.\nAll rare earth elements are essential for exploring future directions of electronics.\nLithium is either a non-rare earth element and essential for exploring future directions of electronics, or is not a non-rare earth element and is not essential for exploring future directions of electronics.", "premises-FOL": "\u2200x ((Element(x) \u2227 \u2203y(Between(y, num61, num63) \u2227 AtomicNumber(x, y))) \u2192 ScarceIn(x, china))\n\u2200x (\u00acRareEarthElement(x) \u2192 \u00acScarceIn(x, china)) \n\u2200x (\u00acRareEarthElement(x) \u2295 RareEarthElement(x)) \n\u2200x (RareEarthElement(x) \u2192 UsedIn(x, industry)) \n\u2200x (RareEarthElement(x) \u2192 EssentialFor(x, electronics))\n\u00ac(\u00acRareEarthElement(lithium) \u2295 EssentialFor(lithium, electronics))", "conclusion": "Lithium is an element with atomic number between 61-63 and is used for batteries.", "conclusion-FOL": "Element(x) \u2227 \u2203y(Between(y, num61, num63) \u2227 AtomicNumber(x, y)) \u2227 UsedFor(lithium, batteries)", "label": "False", "example_id": 1045}
{"story_id": 390, "premises": "There are no elements with atomic number between 61-63 that are not scarce in China.\nNon-rare earth elements are not scarce in China.\nAll elements are either non-rare earth elements or rare earth elements. \nAll rare earth elements can be used for industry.\nAll rare earth elements are essential for exploring future directions of electronics.\nLithium is either a non-rare earth element and essential for exploring future directions of electronics, or is not a non-rare earth element and is not essential for exploring future directions of electronics.", "premises-FOL": "\u2200x ((Element(x) \u2227 \u2203y(Between(y, num61, num63) \u2227 AtomicNumber(x, y))) \u2192 ScarceIn(x, china))\n\u2200x (\u00acRareEarthElement(x) \u2192 \u00acScarceIn(x, china)) \n\u2200x (\u00acRareEarthElement(x) \u2295 RareEarthElement(x)) \n\u2200x (RareEarthElement(x) \u2192 UsedIn(x, industry)) \n\u2200x (RareEarthElement(x) \u2192 EssentialFor(x, electronics))\n\u00ac(\u00acRareEarthElement(lithium) \u2295 EssentialFor(lithium, electronics))", "conclusion": "If Lithium is not essential for exploring future directions of electronics or an element with atomic number between 61-63, then Lithium is not a non-rare earth element or usable in industry.", "conclusion-FOL": "\u00ac(EssentialFor(lithium, electronics) \u2295 (\u2203y(Between(y, num61, num63) \u2227 AtomicNumber(lithium, y)))) \u2192 \u00ac(\u00acRareEarthMetals(lithium) \u2228 UsedIn(lithium, industry))", "label": "True", "example_id": 1046}
{"story_id": 332, "premises": "If people don't often clean their homes, then they do not have tidy houses.\nIf people don't prioritize cleaning, then they do not often clean their homes.\nIf people hire a maid or cleaning service, then they have tidy houses.\nIf people don't care about cleanliness, then they do not prioritize cleaning.\nEither Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home.", "premises-FOL": "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))\n\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))\n\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))\n\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))\n\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))", "conclusion": "Jack doesn't care about cleanliness.", "conclusion-FOL": "\u00ac(CareAbout(jack, cleanliness))", "label": "False", "example_id": 858}
{"story_id": 332, "premises": "If people don't often clean their homes, then they do not have tidy houses.\nIf people don't prioritize cleaning, then they do not often clean their homes.\nIf people hire a maid or cleaning service, then they have tidy houses.\nIf people don't care about cleanliness, then they do not prioritize cleaning.\nEither Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home.", "premises-FOL": "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))\n\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))\n\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))\n\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))\n\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))", "conclusion": "Jack does care about cleanliness.", "conclusion-FOL": "CareAbout(jack, cleanliness)", "label": "True", "example_id": 859}
{"story_id": 332, "premises": "If people don't often clean their homes, then they do not have tidy houses.\nIf people don't prioritize cleaning, then they do not often clean their homes.\nIf people hire a maid or cleaning service, then they have tidy houses.\nIf people don't care about cleanliness, then they do not prioritize cleaning.\nEither Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home.", "premises-FOL": "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))\n\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))\n\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))\n\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))\n\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))", "conclusion": "Jack has a tidy house.", "conclusion-FOL": "Have(jack, tidyHouse)", "label": "Uncertain", "example_id": 860}
{"story_id": 332, "premises": "If people don't often clean their homes, then they do not have tidy houses.\nIf people don't prioritize cleaning, then they do not often clean their homes.\nIf people hire a maid or cleaning service, then they have tidy houses.\nIf people don't care about cleanliness, then they do not prioritize cleaning.\nEither Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home.", "premises-FOL": "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))\n\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))\n\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))\n\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))\n\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))", "conclusion": "Jack neither lives in the suburbs nor is too busy to clean.", "conclusion-FOL": "\u00ac(\u00acCareAbout(jack, cleanliness) \u2228 \u00acCleanOften(jack, home)", "label": "True", "example_id": 861}
{"story_id": 332, "premises": "If people don't often clean their homes, then they do not have tidy houses.\nIf people don't prioritize cleaning, then they do not often clean their homes.\nIf people hire a maid or cleaning service, then they have tidy houses.\nIf people don't care about cleanliness, then they do not prioritize cleaning.\nEither Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home.", "premises-FOL": "\u2200x (\u00acCleanOften(x, home) \u2192 \u00acHave(x, tidyHouse))\n\u2200x (\u00acPrioritize(x, cleaning) \u2192 \u00acCleanOften(x, home))\n\u2200x (Hire(x, maid) \u2228 Hire(x, cleaningService) \u2192 Have(x, tidyHouse))\n\u2200x (\u00acCareAbout(x, cleanliness) \u2192 \u00acPrioritize(x, cleaning))\n\u00ac(Hire(x, maid) \u2228 Hire(x, cleaningService)) \u2295 \u00acCleanOften(jack, home))", "conclusion": "Jack is overburdened and lives in the suburbs.", "conclusion-FOL": "\u00acPrioritize(jack, cleaning) \u2228 \u00acCareAbout(jack, cleanliness)", "label": "False", "example_id": 862}
{"story_id": 278, "premises": "The bottle not falling is either standing upright or toppled over. \nThe bottle not falling is not standing upright.", "premises-FOL": "\u00acFalling(bottle) \u2192 (Upright(bottle) \u2295 ToppledOver(bottle))\n\u00acFalling(bottle) \u2192 \u00acUpright(bottle)", "conclusion": "The bottle not falling is toppled over.", "conclusion-FOL": "\u00acFalling(bottle) \u2192 ToppleOver(bottle)", "label": "True", "example_id": 722}
{"story_id": 359, "premises": "Everyone who chooses what they want to do with their time has flexible schedules.\nEveryone with a lot of free time chooses what they want to do with their time.\nPeople either have a lot of free time or they invest in a career in which they are willing to spend the rest of their lives.\nIf people invest in a career in which they are willing to spend the rest of their lives, then they are hardworking individuals with high ambitions and goals for the future.  \nIf people are hardworking individuals with high ambitions and goals for the future, then they are not short sighted.\nJohn is not either a hardworking individual with high ambitions and goals for the future or has a flexible schedule.", "premises-FOL": "\u2200x (ChooseWhatToDoWith(x, time) \u2192 FlexibleSchedule(x))\n\u2200x (Have(x, lotsOfFreetime) \u2192 ChooseWhatToDoWith(x, time))\n\u2200x (Have(x, lotsOfFreetime) \u2295 (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y))))\n\u2200x (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y)) \u2192 Hardworking(x))\n\u2200x (Hardworking(x) \u2227 HaveFor(x, highAmbition, future) \u2227 HaveFor(x, goal, future) \u2192 \u00acShortSighted(x))\n\u00ac((Hardworking(john) \u2227 HaveFor(john, highAmbition, future) \u2227 HaveFor(john, goal, future)) \u2295 FlexibleSchedule(john))", "conclusion": "John is short sighted.", "conclusion-FOL": "Organized(john)", "label": "False", "example_id": 952}
{"story_id": 359, "premises": "Everyone who chooses what they want to do with their time has flexible schedules.\nEveryone with a lot of free time chooses what they want to do with their time.\nPeople either have a lot of free time or they invest in a career in which they are willing to spend the rest of their lives.\nIf people invest in a career in which they are willing to spend the rest of their lives, then they are hardworking individuals with high ambitions and goals for the future.  \nIf people are hardworking individuals with high ambitions and goals for the future, then they are not short sighted.\nJohn is not either a hardworking individual with high ambitions and goals for the future or has a flexible schedule.", "premises-FOL": "\u2200x (ChooseWhatToDoWith(x, time) \u2192 FlexibleSchedule(x))\n\u2200x (Have(x, lotsOfFreetime) \u2192 ChooseWhatToDoWith(x, time))\n\u2200x (Have(x, lotsOfFreetime) \u2295 (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y))))\n\u2200x (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y)) \u2192 Hardworking(x))\n\u2200x (Hardworking(x) \u2227 HaveFor(x, highAmbition, future) \u2227 HaveFor(x, goal, future) \u2192 \u00acShortSighted(x))\n\u00ac((Hardworking(john) \u2227 HaveFor(john, highAmbition, future) \u2227 HaveFor(john, goal, future)) \u2295 FlexibleSchedule(john))", "conclusion": "John chooses what he want to do with his time.", "conclusion-FOL": "ChooseWhatToDoWith(john, time)", "label": "Uncertain", "example_id": 953}
{"story_id": 359, "premises": "Everyone who chooses what they want to do with their time has flexible schedules.\nEveryone with a lot of free time chooses what they want to do with their time.\nPeople either have a lot of free time or they invest in a career in which they are willing to spend the rest of their lives.\nIf people invest in a career in which they are willing to spend the rest of their lives, then they are hardworking individuals with high ambitions and goals for the future.  \nIf people are hardworking individuals with high ambitions and goals for the future, then they are not short sighted.\nJohn is not either a hardworking individual with high ambitions and goals for the future or has a flexible schedule.", "premises-FOL": "\u2200x (ChooseWhatToDoWith(x, time) \u2192 FlexibleSchedule(x))\n\u2200x (Have(x, lotsOfFreetime) \u2192 ChooseWhatToDoWith(x, time))\n\u2200x (Have(x, lotsOfFreetime) \u2295 (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y))))\n\u2200x (\u2203y (InvestIn(x, y) \u2227 Career(y) \u2227 WillingToSpendIn(restOfLife, y)) \u2192 Hardworking(x))\n\u2200x (Hardworking(x) \u2227 HaveFor(x, highAmbition, future) \u2227 HaveFor(x, goal, future) \u2192 \u00acShortSighted(x))\n\u00ac((Hardworking(john) \u2227 HaveFor(john, highAmbition, future) \u2227 HaveFor(john, goal, future)) \u2295 FlexibleSchedule(john))", "conclusion": "John is either a hardworking individual with high ambitions and goals for the future or is short sighted.", "conclusion-FOL": "(Hardworking(john) \u2227 HaveFor(john, highAmbition, future) \u2227 HaveFor(john, goal, future)) \u2295 ShortSighted(john)", "label": "True", "example_id": 954}
{"story_id": 78, "premises": "Ableton has an office in Germany.\nAbleton has an office in the USA.\nUSA and Germany are different countries.\nAny company that has offices in different countries is a multinational company.\nAbleton makes music software.", "premises-FOL": "OfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n\u00acSameCountry(germany, unitedStates)\n\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 (\u00acSameCountry(y, z)) \u2192 MultinationalCompany(x))\nMakesMusicSoftware(ableton)", "conclusion": "Ableton is a multinational company.", "conclusion-FOL": "MultinationalCompany(ableton)", "label": "True", "example_id": 237}
{"story_id": 78, "premises": "Ableton has an office in Germany.\nAbleton has an office in the USA.\nUSA and Germany are different countries.\nAny company that has offices in different countries is a multinational company.\nAbleton makes music software.", "premises-FOL": "OfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n\u00acSameCountry(germany, unitedStates)\n\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 (\u00acSameCountry(y, z)) \u2192 MultinationalCompany(x))\nMakesMusicSoftware(ableton)", "conclusion": "Ableton makes AI software.", "conclusion-FOL": "MakesAISoftware(ableton)", "label": "Uncertain", "example_id": 238}
{"story_id": 78, "premises": "Ableton has an office in Germany.\nAbleton has an office in the USA.\nUSA and Germany are different countries.\nAny company that has offices in different countries is a multinational company.\nAbleton makes music software.", "premises-FOL": "OfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n\u00acSameCountry(germany, unitedStates)\n\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 (\u00acSameCountry(y, z)) \u2192 MultinationalCompany(x))\nMakesMusicSoftware(ableton)", "conclusion": "Ableton does not have an office in Germany.", "conclusion-FOL": "\u00acOfficeIn(ableton, germany)", "label": "False", "example_id": 239}
{"story_id": 450, "premises": "Those who can fly over a vast distance glide in the air. \nFlightless birds cannot fly over a vast distance. \nPenguins are flightless birds. \nNonflying birds in Antarctica are penguins. \nFido is a penguin, or flies over a vast distance. ", "premises-FOL": "\u2200x (FlyOver(x, vastDistance) \u2192 GlideInAir(x))\n\u2200x (Flightless(x) \u2227 Bird(x) \u2192 \u00acFlyOver(x, vastDistance))\n\u2200x (Penguin(x) \u2192 Flightless(x) \u2227 Bird(x))\n\u2200x (NonFlying(x) \u2227 Bird(x) \u2227 In(x, antarctica) \u2192 Penguin(x))\nPenguin(fido) \u2228 FlyOver(fido, vastDistance)", "conclusion": "Fido is a flightless bird", "conclusion-FOL": "Flightless(fido) \u2227 Bird(fido)", "label": "Uncertain", "example_id": 1295}
{"story_id": 450, "premises": "Those who can fly over a vast distance glide in the air. \nFlightless birds cannot fly over a vast distance. \nPenguins are flightless birds. \nNonflying birds in Antarctica are penguins. \nFido is a penguin, or flies over a vast distance. ", "premises-FOL": "\u2200x (FlyOver(x, vastDistance) \u2192 GlideInAir(x))\n\u2200x (Flightless(x) \u2227 Bird(x) \u2192 \u00acFlyOver(x, vastDistance))\n\u2200x (Penguin(x) \u2192 Flightless(x) \u2227 Bird(x))\n\u2200x (NonFlying(x) \u2227 Bird(x) \u2227 In(x, antarctica) \u2192 Penguin(x))\nPenguin(fido) \u2228 FlyOver(fido, vastDistance)", "conclusion": "Fido is not a nonflying bird in Antarctica, and he cannot glid in the air.", "conclusion-FOL": "\u00ac(NonFlying(fido) \u2227 Bird(fido) \u2227 In(fido, antarctica)) \u2227 \u00acGlideInAir(fido)", "label": "False", "example_id": 1296}
{"story_id": 450, "premises": "Those who can fly over a vast distance glide in the air. \nFlightless birds cannot fly over a vast distance. \nPenguins are flightless birds. \nNonflying birds in Antarctica are penguins. \nFido is a penguin, or flies over a vast distance. ", "premises-FOL": "\u2200x (FlyOver(x, vastDistance) \u2192 GlideInAir(x))\n\u2200x (Flightless(x) \u2227 Bird(x) \u2192 \u00acFlyOver(x, vastDistance))\n\u2200x (Penguin(x) \u2192 Flightless(x) \u2227 Bird(x))\n\u2200x (NonFlying(x) \u2227 Bird(x) \u2227 In(x, antarctica) \u2192 Penguin(x))\nPenguin(fido) \u2228 FlyOver(fido, vastDistance)", "conclusion": "If Fido either can fly over a vast distance or cannot fly over a vast distance, then Fido is a nonflying bird in Antartica.", "conclusion-FOL": "(FlyOver(fido, vastDistance) \u2295 \u00acFlyOver(fido, vastDistance)) \u2192 (NonFlying(fido) \u2227 Bird(fido) \u2227 In(fido, antarctica))", "label": "True", "example_id": 1297}
{"story_id": 469, "premises": "All members of the university faculty are professors.\nAll principal investigators are members of the university faculty.\nNo professor is also an undergraduate student.\nAnyone pursuing a bachelor's degree is an undergraduate student.\nLeon is not pursuing a bachelor's degree, and he is not a principal investigator.\nIf Leon is not pursuing a bachelor's degree, then he is a professor.", "premises-FOL": "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))\n\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))\n\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))\n\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))\n\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))\n\u00acPursuing(leon, bachelor) \u2192 Professor(leon)", "conclusion": "Leon is a member of university faculty.", "conclusion-FOL": "MemberOf(leon, universityFaculty)", "label": "Uncertain", "example_id": 1354}
{"story_id": 469, "premises": "All members of the university faculty are professors.\nAll principal investigators are members of the university faculty.\nNo professor is also an undergraduate student.\nAnyone pursuing a bachelor's degree is an undergraduate student.\nLeon is not pursuing a bachelor's degree, and he is not a principal investigator.\nIf Leon is not pursuing a bachelor's degree, then he is a professor.", "premises-FOL": "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))\n\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))\n\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))\n\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))\n\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))\n\u00acPursuing(leon, bachelor) \u2192 Professor(leon)", "conclusion": "Leon is neither an undergraduate student nor a principal investigator.", "conclusion-FOL": "\u00acUndergraduateStudent(leon) \u2227 \u00acPrincipalInvestigator(leon)", "label": "True", "example_id": 1355}
{"story_id": 469, "premises": "All members of the university faculty are professors.\nAll principal investigators are members of the university faculty.\nNo professor is also an undergraduate student.\nAnyone pursuing a bachelor's degree is an undergraduate student.\nLeon is not pursuing a bachelor's degree, and he is not a principal investigator.\nIf Leon is not pursuing a bachelor's degree, then he is a professor.", "premises-FOL": "\u2200x (MemberOf(x, universityFaculty) \u2192 Professor(x))\n\u2200x (PrincipalInvestigator(x) \u2192 MemberOf(x, universityFaculty))\n\u2200x (Professor(x) \u2192 \u00acUndergraduateStudent(x))\n\u2200x (Pursuing(x, bachelor) \u2192 UndergraduateStudent(x))\n\u00ac(Pursuing(leon, bachelor) \u2295 PrincipalInvestigator(leon))\n\u00acPursuing(leon, bachelor) \u2192 Professor(leon)", "conclusion": "If leon is not a principal investigator, then Leon is an undergraduate student.", "conclusion-FOL": "\u00acPrincipalInvestigator(leon) \u2192 UndergraduateStudent(leon)", "label": "False", "example_id": 1356}
{"story_id": 114, "premises": "A cutman is responsible for preventing and treating physical damage to a fighter.\nCutmen appear in boxing matches, kickboxing matches, or mixed martial arts matches bout. \nCutmen handle swelling, nosebleeds and lacerations. \nJack is a cutman.", "premises-FOL": "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamageToAFighter) \u2227 Treat(x, physicalDamageToAFighter))\n\u2200x (Cutman(x) \u2192 AppearIn(x, boxingMatch) \u2228 AppearIn(x, kickboxingMatch) \u2228 AppearIn(x, mixedMartialArtsMatchBout))\n\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleed) \u2227 Handle(x, laceration))\nCutman(jack)", "conclusion": "No cutmen appear in boxing matches.", "conclusion-FOL": "\u00ac(\u2203x (Cutman(x) \u2227 AppearIn(x, boxingMatch)))", "label": "Uncertain", "example_id": 344}
{"story_id": 114, "premises": "A cutman is responsible for preventing and treating physical damage to a fighter.\nCutmen appear in boxing matches, kickboxing matches, or mixed martial arts matches bout. \nCutmen handle swelling, nosebleeds and lacerations. \nJack is a cutman.", "premises-FOL": "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamageToAFighter) \u2227 Treat(x, physicalDamageToAFighter))\n\u2200x (Cutman(x) \u2192 AppearIn(x, boxingMatch) \u2228 AppearIn(x, kickboxingMatch) \u2228 AppearIn(x, mixedMartialArtsMatchBout))\n\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleed) \u2227 Handle(x, laceration))\nCutman(jack)", "conclusion": "If someone is not a cutman, then they cannot handle nosebleeds.", "conclusion-FOL": "\u2200x (\u00acCutman(x) \u2192 \u00acHandle(x, nosebleed))", "label": "Uncertain", "example_id": 345}
{"story_id": 114, "premises": "A cutman is responsible for preventing and treating physical damage to a fighter.\nCutmen appear in boxing matches, kickboxing matches, or mixed martial arts matches bout. \nCutmen handle swelling, nosebleeds and lacerations. \nJack is a cutman.", "premises-FOL": "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamageToAFighter) \u2227 Treat(x, physicalDamageToAFighter))\n\u2200x (Cutman(x) \u2192 AppearIn(x, boxingMatch) \u2228 AppearIn(x, kickboxingMatch) \u2228 AppearIn(x, mixedMartialArtsMatchBout))\n\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleed) \u2227 Handle(x, laceration))\nCutman(jack)", "conclusion": "Jack is responsible for treating physical damage to a fighter.", "conclusion-FOL": "Treat(jack, physicalDamageToAFighter)", "label": "True", "example_id": 346}
{"story_id": 170, "premises": "The Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a portrait painted by Leonardo da Vinci.\nLeonardo da Vinci was a scientist and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.", "premises-FOL": "Painting(monaLisa) \u2227 TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)\nScientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)\n\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))", "conclusion": "A world's best-known artwork is painted by a scientist.", "conclusion-FOL": "\u2203x \u2203y (Painting(x) \u2227 TheWorldsBestKnown(x) \u2227 PaintedBy(x, y) \u2227 Scientist(y))", "label": "True", "example_id": 488}
{"story_id": 170, "premises": "The Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a portrait painted by Leonardo da Vinci.\nLeonardo da Vinci was a scientist and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.", "premises-FOL": "Painting(monaLisa) \u2227 TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)\nScientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)\n\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))", "conclusion": "Leonardo da Vinci has artworks in the landscape genre.", "conclusion-FOL": "\u2203x (PaintedBy(x, leonardodaVinci) \u2227 Landscape(x))", "label": "Uncertain", "example_id": 489}
{"story_id": 170, "premises": "The Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a portrait painted by Leonardo da Vinci.\nLeonardo da Vinci was a scientist and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.", "premises-FOL": "Painting(monaLisa) \u2227 TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)\nScientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)\n\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))", "conclusion": "No world's best-known artworks are portraits.", "conclusion-FOL": "\u2200x (WorldsBestKnown(x)  \u2192 \u00acPortrait(x))", "label": "False", "example_id": 490}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "Nadal is a Grand Slam umpire.", "conclusion-FOL": "GrandSlamUmpire(nadal)", "label": "False", "example_id": 887}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "Nadal is not a Grand Slam umpire.", "conclusion-FOL": "\u00acGrandSlamUmpire(nadal)", "label": "True", "example_id": 888}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "Nadal is a Grand Slam champion.", "conclusion-FOL": "GrandSlamChampion(nadal)", "label": "Uncertain", "example_id": 889}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.", "conclusion-FOL": "\u00ac(GrandSlamUmpire(nadal) \u2228 ProfessionalTennisUmpire(nadal))", "label": "True", "example_id": 890}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.", "conclusion-FOL": "ProfessionalTennisUmpire(nadal) \u2192 GrandSlamUmpire(nadal)", "label": "True", "example_id": 891}
{"story_id": 339, "premises": "No professional tennis umpires are professional tennis players.\nIf you are a World Tour player, then you are a professional tennis player.\nAll Grand Slam champions are World Tour players.\nAll Grand Slam umpires are professional tennis umpires.\nNadal is a World Tour player or a Grand Slam champion", "premises-FOL": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))\n\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))\n\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))\n\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))\nWorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "conclusion": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.", "conclusion-FOL": "GrandSlamUmpire(nadal) \u2228 ProfessionalTennisPlayer(nadal) \u2192 GrandSlamUmpire(nadal)", "label": "False", "example_id": 892}
{"story_id": 123, "premises": "Businesses are either sanctioned or unsanctioned.\nSanctioned businesses are limited.\nUnsanctioned businesses are free.\nThe Crude Oil Data Exchange is a business that isn't free.", "premises-FOL": "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))\n\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))\n\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))\nBuisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)", "conclusion": "Crude Oil Data Exchange is sanctioned.", "conclusion-FOL": "Sanctioned(crudeOilDataExchange)", "label": "True", "example_id": 367}
{"story_id": 123, "premises": "Businesses are either sanctioned or unsanctioned.\nSanctioned businesses are limited.\nUnsanctioned businesses are free.\nThe Crude Oil Data Exchange is a business that isn't free.", "premises-FOL": "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))\n\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))\n\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))\nBuisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)", "conclusion": "Crude Oil Data Exchange is unsanctioned.", "conclusion-FOL": "\u00acSanctioned(crudeOilDataExchange)", "label": "False", "example_id": 368}
{"story_id": 123, "premises": "Businesses are either sanctioned or unsanctioned.\nSanctioned businesses are limited.\nUnsanctioned businesses are free.\nThe Crude Oil Data Exchange is a business that isn't free.", "premises-FOL": "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))\n\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))\n\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))\nBuisness(crudeOilDataExchange) \u2227 \u00acFree(crudeOilDataExchange)", "conclusion": "Crude Oil Data Exchange is limited.", "conclusion-FOL": "Limited(crudeOilDataExchange)", "label": "True", "example_id": 369}
{"story_id": 301, "premises": "When something is depressing, it is sad.\nThe end of a relationship is depressing. ", "premises-FOL": "\u2200x (Depressing(x) \u2192 Sad(x))\nDepressing(v)", "conclusion": "The end of a relationship is invigorating", "conclusion-FOL": "Invigorating(v)", "label": "Uncertain", "example_id": 745}
{"story_id": 103, "premises": "Palstaves are a type of early bronze axe.\nPalstaves are found in northern, western, and southwestern Europe and are cast in molds.\nJohn Evans is an archeologist who popularized the term \"palstave.\"\nPaalstabs are not a type of axe but rather a digging shovel.", "premises-FOL": "EarlyBronzeAge(palstave) \u2227 Axe(palstave)\nFoundIn(palstave, northernEurope) \u2228 FoundIn(palstave, westernEurope) \u2228 FoundIn(palstave, southWesternEurope)) \u2227 CastIn(palstave, molds)\nArcheologist(johnEvans) \u2227 Popularize(johnEvans, termPalstave)\n\u00acAxe(paalstab) \u2227 DiggingShovel(paalstab)", "conclusion": "John Evans Popularized the term paalstab.", "conclusion-FOL": "Popularized(johnEvans, termPalstave)", "label": "Uncertain", "example_id": 313}
{"story_id": 103, "premises": "Palstaves are a type of early bronze axe.\nPalstaves are found in northern, western, and southwestern Europe and are cast in molds.\nJohn Evans is an archeologist who popularized the term \"palstave.\"\nPaalstabs are not a type of axe but rather a digging shovel.", "premises-FOL": "EarlyBronzeAge(palstave) \u2227 Axe(palstave)\nFoundIn(palstave, northernEurope) \u2228 FoundIn(palstave, westernEurope) \u2228 FoundIn(palstave, southWesternEurope)) \u2227 CastIn(palstave, molds)\nArcheologist(johnEvans) \u2227 Popularize(johnEvans, termPalstave)\n\u00acAxe(paalstab) \u2227 DiggingShovel(paalstab)", "conclusion": "There is an axe that is found in Western Europe.", "conclusion-FOL": "\u2203x (Axe(x) \u2227 FoundIn(x, westernEurope))", "label": "Uncertain", "example_id": 314}
{"story_id": 103, "premises": "Palstaves are a type of early bronze axe.\nPalstaves are found in northern, western, and southwestern Europe and are cast in molds.\nJohn Evans is an archeologist who popularized the term \"palstave.\"\nPaalstabs are not a type of axe but rather a digging shovel.", "premises-FOL": "EarlyBronzeAge(palstave) \u2227 Axe(palstave)\nFoundIn(palstave, northernEurope) \u2228 FoundIn(palstave, westernEurope) \u2228 FoundIn(palstave, southWesternEurope)) \u2227 CastIn(palstave, molds)\nArcheologist(johnEvans) \u2227 Popularize(johnEvans, termPalstave)\n\u00acAxe(paalstab) \u2227 DiggingShovel(paalstab)", "conclusion": "Archeologists haven't popularized anything.", "conclusion-FOL": "\u2200x \u2200y (Archeologist(x) \u2192 \u00acPopularize(x, y))", "label": "False", "example_id": 315}
{"story_id": 90, "premises": "Koei Tecmo is a Japanese video game and anime holding company.\nHolding companies hold several companies.\nTecmo was disbanded in Japan, while Koei survived but was renamed.\nVideo game holding companies are holding companies.", "premises-FOL": "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) \n\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))\nDisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)\n\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))", "conclusion": "Koei Tecmo holds another company.", "conclusion-FOL": "\u2203x (Company(x) \u2227 Holds(koeitecmo, x))", "label": "True", "example_id": 273}
{"story_id": 90, "premises": "Koei Tecmo is a Japanese video game and anime holding company.\nHolding companies hold several companies.\nTecmo was disbanded in Japan, while Koei survived but was renamed.\nVideo game holding companies are holding companies.", "premises-FOL": "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) \n\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))\nDisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)\n\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))", "conclusion": "Tecmo holds another company.", "conclusion-FOL": "\u2203x (Company(x) \u2227 Holds(tecmo, x))", "label": "Uncertain", "example_id": 274}
{"story_id": 90, "premises": "Koei Tecmo is a Japanese video game and anime holding company.\nHolding companies hold several companies.\nTecmo was disbanded in Japan, while Koei survived but was renamed.\nVideo game holding companies are holding companies.", "premises-FOL": "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo) \u2227 HoldingCompany(x) \n\u2200x (HoldingCompany(x) \u2192 \u2203y(Company(y) \u2227 Holds(x, y)))\nDisbandsIn(tecmo, japan) \u2227 Survives(koei) \u2227 Renames(koei)\n\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))", "conclusion": "Koei Tecmo holds anime.", "conclusion-FOL": "AnimeHoldingCompany(koeitecmo)", "label": "Uncertain", "example_id": 275}
{"story_id": 199, "premises": "The PlayStation EyeToy is a camera accessory for the PlayStation 2 system. \nThe PlayStation Eye is a camera accessory for the PlayStation 3 system.\nThe PlayStation Camera is a camera accessory for the PlayStation 4 and the PlayStation 5 systems.\nCamera accessories for a system are compatible with that system.\nPlaystation 2, 3,4, and 5 are all different.\nOnly the PlayStation Camera camera system is compatible with different systems.", "premises-FOL": "System(playStation2) \u2227 CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) \u2227 CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) \u2227 System(playStation5) \u2227 CameraAccessoryFor(playStationCamera, playStation4) \u2227 CameraAccessoryFor(playStationCamera, playStation5)\n\u2200x \u2200y (CameraAccessoryFor(x, y) \u2227 System(y) \u2192 CompatibleWith(x, y))\n\u00ac(playStation2=playStation3) \u2227 \u00ac(playStation2=playStation4) \u2227 \u00ac(playStation2=playStation5) \u2227 \u00ac(playStation3=playStation4) \u2227 \u00ac(playStation3=playStation5) \u2227 \u00ac(playStation4=playStation5)\n\u2200x \u2203y \u2203z (System(y) \u2227 System(z) \u2227 \u00ac(y=z) \u2227 CompatibleWith(x, y) \u2227 CompatibleWith(x, z) \u2192 x=playstationCamera)", "conclusion": "The Playstation Eye is compatible with the PlayStation 2 and the PlayStation 3.", "conclusion-FOL": "Compatible(playStationEye, playStation2) \u2227 Compatible(playStationEye, playStation3)", "label": "False", "example_id": 566}
{"story_id": 199, "premises": "The PlayStation EyeToy is a camera accessory for the PlayStation 2 system. \nThe PlayStation Eye is a camera accessory for the PlayStation 3 system.\nThe PlayStation Camera is a camera accessory for the PlayStation 4 and the PlayStation 5 systems.\nCamera accessories for a system are compatible with that system.\nPlaystation 2, 3,4, and 5 are all different.\nOnly the PlayStation Camera camera system is compatible with different systems.", "premises-FOL": "System(playStation2) \u2227 CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) \u2227 CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) \u2227 System(playStation5) \u2227 CameraAccessoryFor(playStationCamera, playStation4) \u2227 CameraAccessoryFor(playStationCamera, playStation5)\n\u2200x \u2200y (CameraAccessoryFor(x, y) \u2227 System(y) \u2192 CompatibleWith(x, y))\n\u00ac(playStation2=playStation3) \u2227 \u00ac(playStation2=playStation4) \u2227 \u00ac(playStation2=playStation5) \u2227 \u00ac(playStation3=playStation4) \u2227 \u00ac(playStation3=playStation5) \u2227 \u00ac(playStation4=playStation5)\n\u2200x \u2203y \u2203z (System(y) \u2227 System(z) \u2227 \u00ac(y=z) \u2227 CompatibleWith(x, y) \u2227 CompatibleWith(x, z) \u2192 x=playstationCamera)", "conclusion": "The Playstation EyeToy is compatible with the PlayStation 2.", "conclusion-FOL": "Compatible(playStationEyeToy, playStation2)", "label": "True", "example_id": 567}
{"story_id": 199, "premises": "The PlayStation EyeToy is a camera accessory for the PlayStation 2 system. \nThe PlayStation Eye is a camera accessory for the PlayStation 3 system.\nThe PlayStation Camera is a camera accessory for the PlayStation 4 and the PlayStation 5 systems.\nCamera accessories for a system are compatible with that system.\nPlaystation 2, 3,4, and 5 are all different.\nOnly the PlayStation Camera camera system is compatible with different systems.", "premises-FOL": "System(playStation2) \u2227 CameraAccessoryFor(playStationEyeToy, playStation2)\nSystem(playStation3) \u2227 CameraAccessoryFor(playStationEye, playStation3)  \nSystem(playStation4) \u2227 System(playStation5) \u2227 CameraAccessoryFor(playStationCamera, playStation4) \u2227 CameraAccessoryFor(playStationCamera, playStation5)\n\u2200x \u2200y (CameraAccessoryFor(x, y) \u2227 System(y) \u2192 CompatibleWith(x, y))\n\u00ac(playStation2=playStation3) \u2227 \u00ac(playStation2=playStation4) \u2227 \u00ac(playStation2=playStation5) \u2227 \u00ac(playStation3=playStation4) \u2227 \u00ac(playStation3=playStation5) \u2227 \u00ac(playStation4=playStation5)\n\u2200x \u2203y \u2203z (System(y) \u2227 System(z) \u2227 \u00ac(y=z) \u2227 CompatibleWith(x, y) \u2227 CompatibleWith(x, z) \u2192 x=playstationCamera)", "conclusion": "The Playstation Camera can be used for all Playstation consoles.", "conclusion-FOL": "Compatible(playStationCamera, playStation2) \u2227 Compatible(playStationCamera, playStation3) \u2227 Compatible(playStationCamera, playStation4) \u2227 Compatible(playStationCamera, playStation5)", "label": "Uncertain", "example_id": 568}
{"story_id": 274, "premises": "Adam Buska is a European football player.\nIf a European plays football, they play what Americans call soccer.", "premises-FOL": "FootballPlayer(adamBuska) \u2227 European(adamBuska)\n\u2200x (FootballPlayer(x) \u2227 European(x) \u2192 \u2203y (Call(american, y, soccer) \u2227 Play(x, y)))", "conclusion": "Adam Buska plays what Americans call soccer.", "conclusion-FOL": "\u2203y (Call(american, y, soccer) \u2227 Play(adamBuska, y))", "label": "True", "example_id": 718}
{"story_id": 411, "premises": "If a game is one of the top-3 best selling video-games, then it is multiplatform.\nIf a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.\nSome games that support Windows are developed by Nintendo.\nAll multiplatform games can be played on a wide range of devices.\nPokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices.", "premises-FOL": "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))\n\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))\n\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))\n\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))\n\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))", "conclusion": "Pokemon Diamond version supports Windows.", "conclusion-FOL": "Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)", "label": "Uncertain", "example_id": 1152}
{"story_id": 411, "premises": "If a game is one of the top-3 best selling video-games, then it is multiplatform.\nIf a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.\nSome games that support Windows are developed by Nintendo.\nAll multiplatform games can be played on a wide range of devices.\nPokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices.", "premises-FOL": "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))\n\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))\n\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))\n\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))\n\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))", "conclusion": "Pokemon Diamond version supports Windows and has sold more than 100 million copies.", "conclusion-FOL": "(Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)) \u2227 (Game(PokemonDiamond) \u2227 SoldMoreThan100MillionCopies(PokemonDiamond))", "label": "False", "example_id": 1153}
{"story_id": 411, "premises": "If a game is one of the top-3 best selling video-games, then it is multiplatform.\nIf a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games.\nSome games that support Windows are developed by Nintendo.\nAll multiplatform games can be played on a wide range of devices.\nPokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices.", "premises-FOL": "\u2200x (ATop3BestSellingVideoGame(x) \u2192 Multiplatform(x))\n\u2200x (SoldMoreThan100MillionCopies(x) \u2192 ATop3BestSellingVideoGame(x))\n\u2203x ((SupportsWindows(x) \u2227 AGameDevelopedByNintendo(x)))\n\u2200x (Multiplatform(x) \u2192 CanBePlayedOnAWideRangeOfDevices(x))\n\u00ac(DevelopedByNintendo(PokemonDiamond) \u2228 CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))", "conclusion": "If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games.", "conclusion-FOL": "((Game(PokemonDiamond) \u2227 SupportsWindows(PokemonDiamond)) \u2295 ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) \u2192 (Multiplatform(PokemonDiamond) \u2227 (Game(PokemonDiamond) \u2227 ATop3BestSellingVideoGame(PokemonDiamond))) \u2295 (\u00acMultiplatform(PokemonDiamond) \u2227 \u00ac(Game(PokemonDiamond) \u2227 ATop3BestSellingVideoGame(PokemonDiamond)))", "label": "True", "example_id": 1154}
{"story_id": 206, "premises": "China is one of the BRICS, and its economy is emerging.\nIf someone is from China, then they are from a country of BRICS.\nIndia is one of the BRICS, and its economy is emerging.\nIf someone is from India, then they are in a country of BRICS.\nAll people from China are Chinese people.\nAll people from India are Indian people.\nThere is a person from India.", "premises-FOL": "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))\n\u2200x (From(x, china) \u2192 From(x, bric))\nBRIC(india) \u2227 Emerging(indiaEconomy)\n\u2200x (From(x, india) \u2192 From(x, bric))\n\u2200x (From(x, china) \u2192 Chinese(x))\n\u2200x (From(x, india) \u2192 Indian(x))\n\u2203x (From(x, india))", "conclusion": "No people from BRICS are Indian people.", "conclusion-FOL": "\u2200x (From(x, countryOfBRICS) \u2192 \u00acIndianPeople(x))", "label": "False", "example_id": 589}
{"story_id": 206, "premises": "China is one of the BRICS, and its economy is emerging.\nIf someone is from China, then they are from a country of BRICS.\nIndia is one of the BRICS, and its economy is emerging.\nIf someone is from India, then they are in a country of BRICS.\nAll people from China are Chinese people.\nAll people from India are Indian people.\nThere is a person from India.", "premises-FOL": "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))\n\u2200x (From(x, china) \u2192 From(x, bric))\nBRIC(india) \u2227 Emerging(indiaEconomy)\n\u2200x (From(x, india) \u2192 From(x, bric))\n\u2200x (From(x, china) \u2192 Chinese(x))\n\u2200x (From(x, india) \u2192 Indian(x))\n\u2203x (From(x, india))", "conclusion": "India's economy is not emerging.", "conclusion-FOL": "EmergingEconomy(india)", "label": "False", "example_id": 590}
{"story_id": 206, "premises": "China is one of the BRICS, and its economy is emerging.\nIf someone is from China, then they are from a country of BRICS.\nIndia is one of the BRICS, and its economy is emerging.\nIf someone is from India, then they are in a country of BRICS.\nAll people from China are Chinese people.\nAll people from India are Indian people.\nThere is a person from India.", "premises-FOL": "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))\n\u2200x (From(x, china) \u2192 From(x, bric))\nBRIC(india) \u2227 Emerging(indiaEconomy)\n\u2200x (From(x, india) \u2192 From(x, bric))\n\u2200x (From(x, china) \u2192 Chinese(x))\n\u2200x (From(x, india) \u2192 Indian(x))\n\u2203x (From(x, india))", "conclusion": "There is an Indian people from BRICS.", "conclusion-FOL": "\u2203x (IndianPeople(x) \u2227 From(x, countryOfBRICS))", "label": "True", "example_id": 591}
{"story_id": 87, "premises": "Daveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.", "premises-FOL": "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)\n\u2203x \u2203y(PlaysIn(daveedDiggs, x, hamilton) \u2227 (\u00ac(x=y)) \u2227 PlaysIn(daveedDiggs, y, hamilton)) \u2227 OnBroadway(hamilton) \u2227 Musical(hamilton)\n\u2203x \u2203y(Actor(x) \u2227 PlaysIn(x, y, hamilton) \u2227 Wins(x, bestActorAward))\n\u2203x (Actor(x) \u2227 PlaysIn(x, thomasJefferson, hamilton) \u2227 Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n\u2200x ((Musical(x) \u2227 OnBroadway(x)) \u2192 \u00acFilm(x))", "conclusion": "Hamilton is a film.", "conclusion-FOL": "Film(hamilton)", "label": "False", "example_id": 264}
{"story_id": 87, "premises": "Daveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.", "premises-FOL": "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)\n\u2203x \u2203y(PlaysIn(daveedDiggs, x, hamilton) \u2227 (\u00ac(x=y)) \u2227 PlaysIn(daveedDiggs, y, hamilton)) \u2227 OnBroadway(hamilton) \u2227 Musical(hamilton)\n\u2203x \u2203y(Actor(x) \u2227 PlaysIn(x, y, hamilton) \u2227 Wins(x, bestActorAward))\n\u2203x (Actor(x) \u2227 PlaysIn(x, thomasJefferson, hamilton) \u2227 Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n\u2200x ((Musical(x) \u2227 OnBroadway(x)) \u2192 \u00acFilm(x))", "conclusion": "Daveed Diggs won the best actor award.", "conclusion-FOL": "Wins(daveedDiggs, bestActorAward)", "label": "True", "example_id": 265}
{"story_id": 87, "premises": "Daveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.", "premises-FOL": "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)\n\u2203x \u2203y(PlaysIn(daveedDiggs, x, hamilton) \u2227 (\u00ac(x=y)) \u2227 PlaysIn(daveedDiggs, y, hamilton)) \u2227 OnBroadway(hamilton) \u2227 Musical(hamilton)\n\u2203x \u2203y(Actor(x) \u2227 PlaysIn(x, y, hamilton) \u2227 Wins(x, bestActorAward))\n\u2203x (Actor(x) \u2227 PlaysIn(x, thomasJefferson, hamilton) \u2227 Wins(x, bestActorAward))\nPlays(daveedDiggs, thomasJefferson)\n\u2200x ((Musical(x) \u2227 OnBroadway(x)) \u2192 \u00acFilm(x))", "conclusion": "Hamilton won two awards.", "conclusion-FOL": "\u2203x \u2203y(Wins(hamilton, x) \u2227 (\u00ac(x=y)) \u2227 Wins(hamilton, y))", "label": "Uncertain", "example_id": 266}
{"story_id": 221, "premises": "Ernest Pohl was a Polish football player. \nA football player in the Polish First Division has scored over 180 goals. \nErnest Pohl scored more than 180 goals in the Polish First Division. \nG\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. \nErnest Pohl is from Ruda \u015al\u0105ska. ", "premises-FOL": "Polish(ernestPohl) \u2227 FootballPlayer(ernestPohl)\n\u2203x (FootballPlayer(x) \u2227 In(x, polishFirstDivision) \u2227 ScoredOver(x, 180Goals))\nIn(ernestPohl, polishFirstDivision) \u2227 ScoredOver(ernestPohl, 180Goals)\n\u2203x \u2203y (GornikZabrzes(x) \u2227 Stadium(x) \u2227 NamedAfter(x, y) \u2227 SoccerPlayer(y) \u2227 From(y, ruda\u015al\u0105ska))\nFrom(ernestPohl, ruda\u015al\u0105ska))", "conclusion": "Ernest Pohl has not scored more than 180 goals.", "conclusion-FOL": "\u00acScoredOver(ernestPohl, 180Goals)", "label": "False", "example_id": 626}
{"story_id": 221, "premises": "Ernest Pohl was a Polish football player. \nA football player in the Polish First Division has scored over 180 goals. \nErnest Pohl scored more than 180 goals in the Polish First Division. \nG\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. \nErnest Pohl is from Ruda \u015al\u0105ska. ", "premises-FOL": "Polish(ernestPohl) \u2227 FootballPlayer(ernestPohl)\n\u2203x (FootballPlayer(x) \u2227 In(x, polishFirstDivision) \u2227 ScoredOver(x, 180Goals))\nIn(ernestPohl, polishFirstDivision) \u2227 ScoredOver(ernestPohl, 180Goals)\n\u2203x \u2203y (GornikZabrzes(x) \u2227 Stadium(x) \u2227 NamedAfter(x, y) \u2227 SoccerPlayer(y) \u2227 From(y, ruda\u015al\u0105ska))\nFrom(ernestPohl, ruda\u015al\u0105ska))", "conclusion": "G\u00f3rnik Zabrze's stadium was named after Ernest Pohl.", "conclusion-FOL": "\u2200x (GornikZabrzes(x) \u2227 Stadium(x) \u2192 NamedAfter(x, ernestPohl))", "label": "Uncertain", "example_id": 627}
{"story_id": 142, "premises": "Ann J. Land was a member of the Philadelphia City Council and the Democratic Party.\nAnn J. Land ran unopposed for the Philadelphia City Council in 1980.\nPeople who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.\nMichael Nutter was a political challenger.\nAnn J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "premises-FOL": "MemberOf(annJLand, philadelphiaCityCouncil) \u2227 MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n\u2200x \u2200y (RunUnopposedFor(x, philadelphiaCityCouncil, y) \u2192 ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) \u2227 RunFor(annJLand, philadelphiaCityCouncil, year1987)", "conclusion": "Ann J. Land was elected to the Philadelphia City Council in 1980.", "conclusion-FOL": "ElectedTo(ann, philadelphiaCityCouncil, year1980)", "label": "True", "example_id": 416}
{"story_id": 142, "premises": "Ann J. Land was a member of the Philadelphia City Council and the Democratic Party.\nAnn J. Land ran unopposed for the Philadelphia City Council in 1980.\nPeople who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.\nMichael Nutter was a political challenger.\nAnn J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "premises-FOL": "MemberOf(annJLand, philadelphiaCityCouncil) \u2227 MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n\u2200x \u2200y (RunUnopposedFor(x, philadelphiaCityCouncil, y) \u2192 ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) \u2227 RunFor(annJLand, philadelphiaCityCouncil, year1987)", "conclusion": "Ann J. Land was elected to the Philadelphia City Council in 1987.", "conclusion-FOL": "ElectedTo(ann, philadelphiaCityCouncil, year1987)", "label": "Uncertain", "example_id": 417}
{"story_id": 142, "premises": "Ann J. Land was a member of the Philadelphia City Council and the Democratic Party.\nAnn J. Land ran unopposed for the Philadelphia City Council in 1980.\nPeople who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.\nMichael Nutter was a political challenger.\nAnn J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "premises-FOL": "MemberOf(annJLand, philadelphiaCityCouncil) \u2227 MemberOf(annJLand, democraticParty)\nRunUnopposedFor(ann, philadelphiaCityCouncil, year1980)\n\u2200x \u2200y (RunUnopposedFor(x, philadelphiaCityCouncil, y) \u2192 ElectedTo(x, philadelphiaCityCouncil, y))\nPoliticalChallenger(michaelNutter)\nDefeat(annJLand, michaelNutter) \u2227 RunFor(annJLand, philadelphiaCityCouncil, year1987)", "conclusion": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.", "conclusion-FOL": "\u2203x (MemberOf(x, democraticParty) \u2227 ElectedTo(x, philadelphiaCouncil, year1980))", "label": "True", "example_id": 418}
{"story_id": 111, "premises": "Aberdeen won the cup in the 2013 final.\nRangers won the cup in the 2014 final.\nAberdeen and Rangers are different teams.\nDifferent teams cannot win the cup in the same year's final.", "premises-FOL": "WonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n\u00ac(aberdeen=rangers)\n\u2200x \u2200y \u2200z \u2200w (\u00ac(x=y) \u2227 WonCup(x, z) \u2227 WonCup(y, w) \u2192 \u00ac(z=w))", "conclusion": "Rangers won the cup in 2015.", "conclusion-FOL": "WonCup(rangers, year2015Final)", "label": "Uncertain", "example_id": 336}
{"story_id": 111, "premises": "Aberdeen won the cup in the 2013 final.\nRangers won the cup in the 2014 final.\nAberdeen and Rangers are different teams.\nDifferent teams cannot win the cup in the same year's final.", "premises-FOL": "WonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n\u00ac(aberdeen=rangers)\n\u2200x \u2200y \u2200z \u2200w (\u00ac(x=y) \u2227 WonCup(x, z) \u2227 WonCup(y, w) \u2192 \u00ac(z=w))", "conclusion": "Rangers won the cup in 2013.", "conclusion-FOL": "WonCup(rangers, year2013Final)", "label": "False", "example_id": 337}
{"story_id": 111, "premises": "Aberdeen won the cup in the 2013 final.\nRangers won the cup in the 2014 final.\nAberdeen and Rangers are different teams.\nDifferent teams cannot win the cup in the same year's final.", "premises-FOL": "WonCup(aberdeen, year2013Final)\nWonCup(rangers, year2014Final)\n\u00ac(aberdeen=rangers)\n\u2200x \u2200y \u2200z \u2200w (\u00ac(x=y) \u2227 WonCup(x, z) \u2227 WonCup(y, w) \u2192 \u00ac(z=w))", "conclusion": "Aberdeen has once won a cup.", "conclusion-FOL": "\u2203x (WonCup(aberdeen, x))", "label": "True", "example_id": 338}
{"story_id": 329, "premises": "All young working professionals who have regular 9-5 jobs have stable jobs.\nSome people living in Manhattan are young professionals with regular 9-5 jobs.\nAll people who have stable jobs are people who work regularly.\nPeople who work regularly do not frequently disobey their bosses.\nMary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly.", "premises-FOL": "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))\n\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))\n\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))\n\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))\n\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))", "conclusion": "Mary lives in Manhattan.", "conclusion-FOL": "LiveIn(mary, manhattan)", "label": "Uncertain", "example_id": 843}
{"story_id": 329, "premises": "All young working professionals who have regular 9-5 jobs have stable jobs.\nSome people living in Manhattan are young professionals with regular 9-5 jobs.\nAll people who have stable jobs are people who work regularly.\nPeople who work regularly do not frequently disobey their bosses.\nMary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly.", "premises-FOL": "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))\n\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))\n\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))\n\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))\n\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))", "conclusion": "Mary lives in Manhattan and is a young working professional who has a regular 9-5 job.", "conclusion-FOL": "LiveIn(mary, manhattan) \u2227 YoungWorkingProfessional(mary) \u2227 Have(mary, regular9-5Job)", "label": "False", "example_id": 844}
{"story_id": 329, "premises": "All young working professionals who have regular 9-5 jobs have stable jobs.\nSome people living in Manhattan are young professionals with regular 9-5 jobs.\nAll people who have stable jobs are people who work regularly.\nPeople who work regularly do not frequently disobey their bosses.\nMary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly.", "premises-FOL": "\u2200x (YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job) \u2192 Have(x, stableJob))\n\u2203x (LiveIn(x, manhattan) \u2227 YoungWorkingProfessional(x) \u2227 Have(x, regular9To5Job))\n\u2200x (Have(x, stableJob) \u2192 WorkRegularly(x))\n\u2200x (WorkRegularly(x) \u2192 \u00acDisobeyFrequently(x, boss))\n\u00ac(DisobeyFrequently(mary, boss) \u2295 WorkRegularly(mary))", "conclusion": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.", "conclusion-FOL": "YoungWorkingProfessional(mary) \u2227 Have(mary, regular9-5Job) \u2192 \u00acLiveIn(mary, manhattan)", "label": "True", "example_id": 845}
{"story_id": 397, "premises": "All brain study designs are either block designs or event-related designs. \nAll event-related brain study designs are brain image acquisition.\nAll brain image acquisition in brain study designs is preceded by data processing.\nNothing in brain study designs preceded by data processing analyzes data.\nPicture memory is a type of brain study design that is not either event-related or analyzing data.", "premises-FOL": "\u2200x (BrainStudy(x) \u2192 (BlockDesign(x) \u2295 Event-relatedDesign(x)))\n\u2200x ((BrainStudy(x) \u2227 EventRelatedDesign(x)) \u2192 BrainImageAcquisition(x))\n\u2200x ((BrainStudy(x) \u2227 BrainImageAcquisition(x)) \u2192 PrecededBy(x, dataProcessing))\n\u2200x ((BrainStudy(x) \u2227 PrecededBy(x, dataProcessing)) \u2192 \u00acAnalyze(x, data))\nBrainStudy(pictureMemory) \u2227 (\u00ac(EventRelatedDesign(pictureMemory) \u2295 AnalyzingData(pictureMemory)))", "conclusion": "Picture memory is preceded by data processing.", "conclusion-FOL": "PrecededBy(pictureMemory, dataProcessing)", "label": "Uncertain", "example_id": 1080}
{"story_id": 397, "premises": "All brain study designs are either block designs or event-related designs. \nAll event-related brain study designs are brain image acquisition.\nAll brain image acquisition in brain study designs is preceded by data processing.\nNothing in brain study designs preceded by data processing analyzes data.\nPicture memory is a type of brain study design that is not either event-related or analyzing data.", "premises-FOL": "\u2200x (BrainStudy(x) \u2192 (BlockDesign(x) \u2295 Event-relatedDesign(x)))\n\u2200x ((BrainStudy(x) \u2227 EventRelatedDesign(x)) \u2192 BrainImageAcquisition(x))\n\u2200x ((BrainStudy(x) \u2227 BrainImageAcquisition(x)) \u2192 PrecededBy(x, dataProcessing))\n\u2200x ((BrainStudy(x) \u2227 PrecededBy(x, dataProcessing)) \u2192 \u00acAnalyze(x, data))\nBrainStudy(pictureMemory) \u2227 (\u00ac(EventRelatedDesign(pictureMemory) \u2295 AnalyzingData(pictureMemory)))", "conclusion": "Picture memory is a block design.", "conclusion-FOL": "BlockDesign(pictureMemory)", "label": "True", "example_id": 1081}
{"story_id": 397, "premises": "All brain study designs are either block designs or event-related designs. \nAll event-related brain study designs are brain image acquisition.\nAll brain image acquisition in brain study designs is preceded by data processing.\nNothing in brain study designs preceded by data processing analyzes data.\nPicture memory is a type of brain study design that is not either event-related or analyzing data.", "premises-FOL": "\u2200x (BrainStudy(x) \u2192 (BlockDesign(x) \u2295 Event-relatedDesign(x)))\n\u2200x ((BrainStudy(x) \u2227 EventRelatedDesign(x)) \u2192 BrainImageAcquisition(x))\n\u2200x ((BrainStudy(x) \u2227 BrainImageAcquisition(x)) \u2192 PrecededBy(x, dataProcessing))\n\u2200x ((BrainStudy(x) \u2227 PrecededBy(x, dataProcessing)) \u2192 \u00acAnalyze(x, data))\nBrainStudy(pictureMemory) \u2227 (\u00ac(EventRelatedDesign(pictureMemory) \u2295 AnalyzingData(pictureMemory)))", "conclusion": "Picture memory is either a block design or analyzing data.", "conclusion-FOL": "BlockDesign(pictureMemory) \u2295 Analyze(pictureMemory, data)", "label": "True", "example_id": 1082}
{"story_id": 397, "premises": "All brain study designs are either block designs or event-related designs. \nAll event-related brain study designs are brain image acquisition.\nAll brain image acquisition in brain study designs is preceded by data processing.\nNothing in brain study designs preceded by data processing analyzes data.\nPicture memory is a type of brain study design that is not either event-related or analyzing data.", "premises-FOL": "\u2200x (BrainStudy(x) \u2192 (BlockDesign(x) \u2295 Event-relatedDesign(x)))\n\u2200x ((BrainStudy(x) \u2227 EventRelatedDesign(x)) \u2192 BrainImageAcquisition(x))\n\u2200x ((BrainStudy(x) \u2227 BrainImageAcquisition(x)) \u2192 PrecededBy(x, dataProcessing))\n\u2200x ((BrainStudy(x) \u2227 PrecededBy(x, dataProcessing)) \u2192 \u00acAnalyze(x, data))\nBrainStudy(pictureMemory) \u2227 (\u00ac(EventRelatedDesign(pictureMemory) \u2295 AnalyzingData(pictureMemory)))", "conclusion": "If picture memory is not analyzing data, then picture memory is a block design and analyzing data.", "conclusion-FOL": "\u00acAnalyze(pictureMemory, data) \u2192 (BlockDesign(pictureMemory) \u2227 Analyze(pictureMemory, data))", "label": "False", "example_id": 1083}
{"story_id": 277, "premises": "The USS Lyon was a US Navy ship involved in WWII.\nAll ships involved in WWII are currently decommissioned or in a museum.", "premises-FOL": "USNavyShip(theUSSLyon) \u2227 InvolvedIn(theUSSLyon, wWII)\n\u2200x (InvolvedIn(x, wWII) \u2192 (CurrentlyDecommissioned(x) \u2228 In(x, museum)))", "conclusion": "The USS Lyon is currently decommissioned.", "conclusion-FOL": "CurrentlyDecommissioned(theUSSLyon)", "label": "Uncertain", "example_id": 721}
{"story_id": 349, "premises": "All disposables are designed to be used only once.\nSome items used in Tom's house are eco-friendly.\nEvery item used in Tom's house is either disposable or reusable. \nIf something is made from metal, then it is not made from plastic. \nAll reusable items used in Tom's house are made from metal.\nThe chopsticks used in Tom's house are either made from metals and plastics, or that they are neither made from metals nor plastics.", "premises-FOL": "\u2200x (Disposable(x) \u2192 DesignedToBeOnlyUsedOnce(x))\n\u2203x (EcoFriendly(x))\n\u2200x (UsedIn(x, tomsHouse) \u2192 Disposable(x) \u2295 Reusable(x))\n\u2200x (MadeFrom(x, metal) \u2192 \u00acMadeFrom(x, plastic))\n\u2200x (Reusable(x) \u2192 MadeFrom(x, metal))\n\u00ac(MadeFrom(chopsticksUsedInTomsHouse, metal) \u2295 MadeFrom(chopsticksUsedInTomsHouse, plastic))", "conclusion": "The chopsticks used in Tom's house are eco-friendly.", "conclusion-FOL": "EcoFriendly(chopsticks)", "label": "Uncertain", "example_id": 924}
{"story_id": 349, "premises": "All disposables are designed to be used only once.\nSome items used in Tom's house are eco-friendly.\nEvery item used in Tom's house is either disposable or reusable. \nIf something is made from metal, then it is not made from plastic. \nAll reusable items used in Tom's house are made from metal.\nThe chopsticks used in Tom's house are either made from metals and plastics, or that they are neither made from metals nor plastics.", "premises-FOL": "\u2200x (Disposable(x) \u2192 DesignedToBeOnlyUsedOnce(x))\n\u2203x (EcoFriendly(x))\n\u2200x (UsedIn(x, tomsHouse) \u2192 Disposable(x) \u2295 Reusable(x))\n\u2200x (MadeFrom(x, metal) \u2192 \u00acMadeFrom(x, plastic))\n\u2200x (Reusable(x) \u2192 MadeFrom(x, metal))\n\u00ac(MadeFrom(chopsticksUsedInTomsHouse, metal) \u2295 MadeFrom(chopsticksUsedInTomsHouse, plastic))", "conclusion": "The chopsticks used in Tom's house are eco-friendly or designed to be used only once.", "conclusion-FOL": "EcoFriendly(chopsticks) \u2228 DesignedToBeOnlyUsedOnce(chopsticks)", "label": "True", "example_id": 925}
{"story_id": 349, "premises": "All disposables are designed to be used only once.\nSome items used in Tom's house are eco-friendly.\nEvery item used in Tom's house is either disposable or reusable. \nIf something is made from metal, then it is not made from plastic. \nAll reusable items used in Tom's house are made from metal.\nThe chopsticks used in Tom's house are either made from metals and plastics, or that they are neither made from metals nor plastics.", "premises-FOL": "\u2200x (Disposable(x) \u2192 DesignedToBeOnlyUsedOnce(x))\n\u2203x (EcoFriendly(x))\n\u2200x (UsedIn(x, tomsHouse) \u2192 Disposable(x) \u2295 Reusable(x))\n\u2200x (MadeFrom(x, metal) \u2192 \u00acMadeFrom(x, plastic))\n\u2200x (Reusable(x) \u2192 MadeFrom(x, metal))\n\u00ac(MadeFrom(chopsticksUsedInTomsHouse, metal) \u2295 MadeFrom(chopsticksUsedInTomsHouse, plastic))", "conclusion": "If chopsticks used in Tom's house are made from plastic or designed to be used only once, then they are made from plastic and are eco-friendly.", "conclusion-FOL": "MadeFrom(chopsticks, plastic) \u2228 DesignedBeOnlyUsedOnce(chopsticks) \u2192 MadeFrom(chopsticks, plastic) \u2227 EcoFriendly(chopsticks)", "label": "False", "example_id": 926}
{"story_id": 445, "premises": "Anything lazy is unproductive.\nNo one unproductive is energetic.\nIf something is a sloth, then it is lazy.\nSome animals are sloths.\nSid is neither an energetic person nor a sloth.", "premises-FOL": "\u2200x (Lazy(x) \u2192 Unproductive(x))\n\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))\n\u2200x (Sloth(x) \u2192 Lazy(x))\n\u2203x (Animal(x) \u2227 Sloth(x))\n\u00acEnergetic(sid) \u2227 \u00acSloth(sid))", "conclusion": "Sid is an animal.", "conclusion-FOL": "Animal(sid)", "label": "Uncertain", "example_id": 1280}
{"story_id": 445, "premises": "Anything lazy is unproductive.\nNo one unproductive is energetic.\nIf something is a sloth, then it is lazy.\nSome animals are sloths.\nSid is neither an energetic person nor a sloth.", "premises-FOL": "\u2200x (Lazy(x) \u2192 Unproductive(x))\n\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))\n\u2200x (Sloth(x) \u2192 Lazy(x))\n\u2203x (Animal(x) \u2227 Sloth(x))\n\u00acEnergetic(sid) \u2227 \u00acSloth(sid))", "conclusion": "Sid is an energetic person and an animal.", "conclusion-FOL": "Energetic(sid) \u2227 Animal(sid)", "label": "False", "example_id": 1281}
{"story_id": 445, "premises": "Anything lazy is unproductive.\nNo one unproductive is energetic.\nIf something is a sloth, then it is lazy.\nSome animals are sloths.\nSid is neither an energetic person nor a sloth.", "premises-FOL": "\u2200x (Lazy(x) \u2192 Unproductive(x))\n\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))\n\u2200x (Sloth(x) \u2192 Lazy(x))\n\u2203x (Animal(x) \u2227 Sloth(x))\n\u00acEnergetic(sid) \u2227 \u00acSloth(sid))", "conclusion": "If Sid is either an animal or unproductive, then Sid is not an energetic person.", "conclusion-FOL": "Animal(sid) \u2295 Unproductive(sid)) \u2192 \u00acEnergetic(sid)", "label": "True", "example_id": 1282}
{"story_id": 187, "premises": "European soccer clubs can attend UCL, UEL, and UECL.\nA soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.\nA soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.\nManchester United and Machester City are both European soccer clubs.\nManchester United is eligible to attend UEL next season.\nManchester City is eligible to attend UCL next season.", "premises-FOL": "\u2200x (EuropeanSoccerClub(x) \u2192 Attend(x, ucl) \u2228 Attend(x, uel) \u2228 Attend(x, uecl))\n\u2200x \u2200y (EuropeanSoccerClub(x) \u2227 EuropeanSoccerClub(y) \u2227 Attend(x, ucl) \u2227 Attend(y, uel) \u2192 HigherRank(x, y))\n\u2200x \u2200y (EuropeanSoccerClub(x) \u2227 EuropeanSoccerClub(y) \u2227 Attend(x, uel) \u2227 Attend(y, uecl) \u2192 HigherRank(x, y))\nEuropeanSoccerClub(manchesterUnited) \u2227 EuropeanSoccerClub(manchesterCity)\nAttend(manchesterunited, uel)\nAttend(manchestercity, ucl)", "conclusion": "Manchester City has a higher ranking than Manchester United.", "conclusion-FOL": "HigherRank(manchesterCity, manchesterUnited)", "label": "True", "example_id": 539}
{"story_id": 65, "premises": "If a person coaches a football club, the person is a football coach.\nIf a person has a position in a club in a year, and the club is in NFL in the same year, the person plays in NFL.\nMinnesota Vikings is a football club.\nDennis Green coached Minnesota Vikings.\nCris Carter had 13 touchdown receptions.\nMinnesota Vikings were in the National Football League in 1997.\nJohn Randle was Minnesota Vikings defensive tackle in 1997.", "premises-FOL": "\u2200x \u2200y ((Coach(x, y) \u2227 FootballClub(y)) \u2192 FootballCoach(x))\n\u2200w \u2200x \u2200y \u2200z ((PlayPositionFor(x, w, y, z) \u2227 InNFL(y, z)) \u2192 PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)", "conclusion": "Dennis Green is a football coach.", "conclusion-FOL": "FootballCoach(dennisGreen)", "label": "True", "example_id": 192}
{"story_id": 65, "premises": "If a person coaches a football club, the person is a football coach.\nIf a person has a position in a club in a year, and the club is in NFL in the same year, the person plays in NFL.\nMinnesota Vikings is a football club.\nDennis Green coached Minnesota Vikings.\nCris Carter had 13 touchdown receptions.\nMinnesota Vikings were in the National Football League in 1997.\nJohn Randle was Minnesota Vikings defensive tackle in 1997.", "premises-FOL": "\u2200x \u2200y ((Coach(x, y) \u2227 FootballClub(y)) \u2192 FootballCoach(x))\n\u2200w \u2200x \u2200y \u2200z ((PlayPositionFor(x, w, y, z) \u2227 InNFL(y, z)) \u2192 PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)", "conclusion": "John Randle didn't play in the National Football League.", "conclusion-FOL": "\u00acPlayInNFL(johnRandle)", "label": "False", "example_id": 193}
{"story_id": 65, "premises": "If a person coaches a football club, the person is a football coach.\nIf a person has a position in a club in a year, and the club is in NFL in the same year, the person plays in NFL.\nMinnesota Vikings is a football club.\nDennis Green coached Minnesota Vikings.\nCris Carter had 13 touchdown receptions.\nMinnesota Vikings were in the National Football League in 1997.\nJohn Randle was Minnesota Vikings defensive tackle in 1997.", "premises-FOL": "\u2200x \u2200y ((Coach(x, y) \u2227 FootballClub(y)) \u2192 FootballCoach(x))\n\u2200w \u2200x \u2200y \u2200z ((PlayPositionFor(x, w, y, z) \u2227 InNFL(y, z)) \u2192 PlayInNFL(x))\nFootballClub(minnesotaVikings)\nCoach(dennisGreen, minnesotaVikings)\nReceiveTD(crisCarter, num13)\nInNFL(minnesotaVikings, yr1997)\nPlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)", "conclusion": "Cris Carter played for Minnesota Vikings.", "conclusion-FOL": "PlayPositionFor(crisCarter, wr, minnesotaVikings, year1997)", "label": "Uncertain", "example_id": 194}
{"story_id": 462, "premises": "All classrooms in William L. Harkness Hall that are used for lectures are booked during the day. \nNone of the classrooms in William L. Harkness Hall are private study spots.\nAll classrooms in William L. Harkness Hall are used for lectures or used for office hours.\nIf a classroom in William L. Harkness Hall is booked in the evening, then it is not freely usable at night.\nIf a classroom in William L. Harkness Hall is used for office hours, then it is booked in the evening.\nRoom 116 is a classroom in William L. Harkness Hall that is either both used for lecture and used for office hours or not used for either.", "premises-FOL": "\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, lecture) \u2192 BookedDuring(x, day))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 \u00acPrivateStudySpot(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 (UsedFor(x, lecture) \u2228 UsedFor(x, officeHours)))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 BookedIn(x, evening) \u2192 \u00acFreelyUsableAtNight(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, officeHours) \u2192 BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) \u2227 \u00ac(UsedFor(116, lecture) \u2295 UsedFor(116, officeHours))", "conclusion": "Room 116 is a private study spot.", "conclusion-FOL": "PrivateStudySpot(room116)", "label": "False", "example_id": 1333}
{"story_id": 462, "premises": "All classrooms in William L. Harkness Hall that are used for lectures are booked during the day. \nNone of the classrooms in William L. Harkness Hall are private study spots.\nAll classrooms in William L. Harkness Hall are used for lectures or used for office hours.\nIf a classroom in William L. Harkness Hall is booked in the evening, then it is not freely usable at night.\nIf a classroom in William L. Harkness Hall is used for office hours, then it is booked in the evening.\nRoom 116 is a classroom in William L. Harkness Hall that is either both used for lecture and used for office hours or not used for either.", "premises-FOL": "\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, lecture) \u2192 BookedDuring(x, day))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 \u00acPrivateStudySpot(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 (UsedFor(x, lecture) \u2228 UsedFor(x, officeHours)))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 BookedIn(x, evening) \u2192 \u00acFreelyUsableAtNight(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, officeHours) \u2192 BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) \u2227 \u00ac(UsedFor(116, lecture) \u2295 UsedFor(116, officeHours))", "conclusion": "If Room 116 is either both booked during the day and freely usable at night, or neither, then it is either used for office hours or for private study spots.", "conclusion-FOL": "\u00ac(BookedDuring(room116, day) \u2295 FreelyUsableAtNight(room116) \u2192 (UsedFor(room116, officeHour) \u2295 PrivateStudySpot(room116))", "label": "True", "example_id": 1334}
{"story_id": 462, "premises": "All classrooms in William L. Harkness Hall that are used for lectures are booked during the day. \nNone of the classrooms in William L. Harkness Hall are private study spots.\nAll classrooms in William L. Harkness Hall are used for lectures or used for office hours.\nIf a classroom in William L. Harkness Hall is booked in the evening, then it is not freely usable at night.\nIf a classroom in William L. Harkness Hall is used for office hours, then it is booked in the evening.\nRoom 116 is a classroom in William L. Harkness Hall that is either both used for lecture and used for office hours or not used for either.", "premises-FOL": "\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, lecture) \u2192 BookedDuring(x, day))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 \u00acPrivateStudySpot(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 (UsedFor(x, lecture) \u2228 UsedFor(x, officeHours)))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 BookedIn(x, evening) \u2192 \u00acFreelyUsableAtNight(x))\n\u2200x (ClassroomIn(x, williamLHarknessHall) \u2227 UsedFor(x, officeHours) \u2192 BookedIn(x, evening))\nClassroomIn(116, williamLHarknessHall) \u2227 \u00ac(UsedFor(116, lecture) \u2295 UsedFor(116, officeHours))", "conclusion": "If Room 116 is not both a private study spot and freely useable at night, then it is either used for lectures or booked during the day.", "conclusion-FOL": "\u00ac(PrivateStudySpot(room116) \u2227 FreelyUsableAtNight(room116)) \u2192 (UsedFor(room116, lecture) \u2228 BookedIn(room116, evening))", "label": "False", "example_id": 1335}
{"story_id": 99, "premises": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.\nBaku is northwest of Shafaq-Asiman.\nIf place A is northwest of place B, then place B is southeast of place A.", "premises-FOL": "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))", "conclusion": "Baku is southeast of Shafaq-Asiman.", "conclusion-FOL": "SoutheastOf(baku, shafaq-asiman)", "label": "Uncertain", "example_id": 298}
{"story_id": 99, "premises": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.\nBaku is northwest of Shafaq-Asiman.\nIf place A is northwest of place B, then place B is southeast of place A.", "premises-FOL": "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))", "conclusion": "A large complex is southeast of Baku.", "conclusion-FOL": "\u2203x (LargeComplex(x) \u2227 SoutheastOf(x, baku))", "label": "True", "example_id": 299}
{"story_id": 99, "premises": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.\nBaku is northwest of Shafaq-Asiman.\nIf place A is northwest of place B, then place B is southeast of place A.", "premises-FOL": "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)\nNorthwestOf(baku, shafaq-asiman)\n\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))", "conclusion": "Baku is not northwest of offshore geological structures.", "conclusion-FOL": "\u2200x (GeologicalStructures(x) \u2227 Offshore(x) \u2192 \u00acNorthwestOf(baku, x))", "label": "False", "example_id": 300}
{"story_id": 71, "premises": "Herodicus was a Greek physician, dietician, sophist, and gymnast.\nHerodicus was born in the city of Selymbria.\nSelymbria is a colony of the city-state Megara.\nOne of the tutors of Hippocrates was Herodicus.\nMassages were recommended by Herodicus.\nSome of the theories of Herodicus are considered to be the foundation of sports medicine.", "premises-FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)\nBorn(herodicus, selymbia) \u2227 City(selymbia)\nColony(selymbia, megara) \u2227 CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))", "conclusion": "Herodicus tutored Hippocrates.", "conclusion-FOL": "Tutor(herodicus, hippocrates)", "label": "True", "example_id": 213}
{"story_id": 71, "premises": "Herodicus was a Greek physician, dietician, sophist, and gymnast.\nHerodicus was born in the city of Selymbria.\nSelymbria is a colony of the city-state Megara.\nOne of the tutors of Hippocrates was Herodicus.\nMassages were recommended by Herodicus.\nSome of the theories of Herodicus are considered to be the foundation of sports medicine.", "premises-FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)\nBorn(herodicus, selymbia) \u2227 City(selymbia)\nColony(selymbia, megara) \u2227 CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))", "conclusion": "Herodicus was tutored by Hippocrates.", "conclusion-FOL": "Tutor(hippocrates, herodicus)", "label": "Uncertain", "example_id": 214}
{"story_id": 71, "premises": "Herodicus was a Greek physician, dietician, sophist, and gymnast.\nHerodicus was born in the city of Selymbria.\nSelymbria is a colony of the city-state Megara.\nOne of the tutors of Hippocrates was Herodicus.\nMassages were recommended by Herodicus.\nSome of the theories of Herodicus are considered to be the foundation of sports medicine.", "premises-FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)\nBorn(herodicus, selymbia) \u2227 City(selymbia)\nColony(selymbia, megara) \u2227 CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))", "conclusion": "Herodicus was born in a city-state.", "conclusion-FOL": "\u2203x (Born(herodicus, x) \u2227 CityState(x))", "label": "Uncertain", "example_id": 215}
{"story_id": 71, "premises": "Herodicus was a Greek physician, dietician, sophist, and gymnast.\nHerodicus was born in the city of Selymbria.\nSelymbria is a colony of the city-state Megara.\nOne of the tutors of Hippocrates was Herodicus.\nMassages were recommended by Herodicus.\nSome of the theories of Herodicus are considered to be the foundation of sports medicine.", "premises-FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)\nBorn(herodicus, selymbia) \u2227 City(selymbia)\nColony(selymbia, megara) \u2227 CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))", "conclusion": "Herodicus did not recommend massages.", "conclusion-FOL": "\u00acRecommend(herodicus, massages)", "label": "False", "example_id": 216}
{"story_id": 71, "premises": "Herodicus was a Greek physician, dietician, sophist, and gymnast.\nHerodicus was born in the city of Selymbria.\nSelymbria is a colony of the city-state Megara.\nOne of the tutors of Hippocrates was Herodicus.\nMassages were recommended by Herodicus.\nSome of the theories of Herodicus are considered to be the foundation of sports medicine.", "premises-FOL": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 Gymnast(herodicus)\nBorn(herodicus, selymbia) \u2227 City(selymbia)\nColony(selymbia, megara) \u2227 CityState(megara)\nTutor(herodicus, hippocrates)\nRecommend(herodicus, massages)\n\u2203x \u2203y (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine) \u2227 (\u00ac(x=y)) \u2227 Theory(y) \u2227 From(y, herodicus) \u2227 FoundationOf(y, sportsMedicine))", "conclusion": "Herodicus was born in a colony of a city-state.", "conclusion-FOL": "\u2203x \u2203y (Born(herodicus, x) \u2227 Colony(x, y) \u2227 CityState(y))", "label": "True", "example_id": 217}
{"story_id": 438, "premises": "None of the kids in our family love the opera.\nAll of the adults in our family love the opera.\nIf someone in our family is a scientist, then they are an adult.\nSome students in our family are kids.\nBilly is a kid in our family.", "premises-FOL": "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))\n\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))\n\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))\n\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))\nKid(billy) \u2227 In(billy, ourFamily) ", "conclusion": "Billy is a student.", "conclusion-FOL": "Student(billy)", "label": "Uncertain", "example_id": 1258}
{"story_id": 438, "premises": "None of the kids in our family love the opera.\nAll of the adults in our family love the opera.\nIf someone in our family is a scientist, then they are an adult.\nSome students in our family are kids.\nBilly is a kid in our family.", "premises-FOL": "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))\n\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))\n\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))\n\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))\nKid(billy) \u2227 In(billy, ourFamily) ", "conclusion": "Billy is a student and a scientist.", "conclusion-FOL": "Student(billy)  \u2227 Scientist(billy)", "label": "False", "example_id": 1259}
{"story_id": 438, "premises": "None of the kids in our family love the opera.\nAll of the adults in our family love the opera.\nIf someone in our family is a scientist, then they are an adult.\nSome students in our family are kids.\nBilly is a kid in our family.", "premises-FOL": "\u2200x ((Kid(x) \u2227 In(x, ourFamily)) \u2192 \u00acLove(x, opera))\n\u2200x ((Adult(x) \u2227 In(x, ourFamily)) \u2192 Love(x, opera))\n\u2200x ((Scientist(x) \u2227 In(x, ourFamily)) \u2192 Adult(x))\n\u2203x (Student(x) \u2227 In(x, ourFamily) \u2227 Kid(x))\nKid(billy) \u2227 In(billy, ourFamily) ", "conclusion": "If Billy is a student or a scientist, then Billy is a student and a kid.", "conclusion-FOL": "(Student(billy) \u2228 Scientist(billy)) \u2192 (Student(billy) \u2227 Kid(billy))", "label": "True", "example_id": 1260}
{"story_id": 69, "premises": "Brian Winter is a Scottish football referee.\nAfter being injured, Brian Winter retired in 2012.\nBrian Winter was appointed as a referee observer after his retirement.\nSome football referees become referee observers.\nThe son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "premises-FOL": "Scottish(brianWinter) \u2227 FootballReferee(brianWinter)\nRetired(brianWinter) \u2227 RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))\nSonOf(andyWinter, brianWinter) \u2227 FootballPlayer(andyWinter) \u2227 PlaysFor(andyWinter, hamiltonAcademical)", "conclusion": "There is a son of a referee observer that plays football.", "conclusion-FOL": "\u2203x \u2203y(SonOf(x, y) \u2227 RefereeObserver(y) \u2227 FootballPlayer(x))", "label": "True", "example_id": 204}
{"story_id": 69, "premises": "Brian Winter is a Scottish football referee.\nAfter being injured, Brian Winter retired in 2012.\nBrian Winter was appointed as a referee observer after his retirement.\nSome football referees become referee observers.\nThe son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "premises-FOL": "Scottish(brianWinter) \u2227 FootballReferee(brianWinter)\nRetired(brianWinter) \u2227 RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))\nSonOf(andyWinter, brianWinter) \u2227 FootballPlayer(andyWinter) \u2227 PlaysFor(andyWinter, hamiltonAcademical)", "conclusion": "Brian Winter was not a referee observer.", "conclusion-FOL": "\u00acRefereeObserver(brianwinter)", "label": "False", "example_id": 205}
{"story_id": 69, "premises": "Brian Winter is a Scottish football referee.\nAfter being injured, Brian Winter retired in 2012.\nBrian Winter was appointed as a referee observer after his retirement.\nSome football referees become referee observers.\nThe son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "premises-FOL": "Scottish(brianWinter) \u2227 FootballReferee(brianWinter)\nRetired(brianWinter) \u2227 RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))\nSonOf(andyWinter, brianWinter) \u2227 FootballPlayer(andyWinter) \u2227 PlaysFor(andyWinter, hamiltonAcademical)", "conclusion": "Brian Winter is retired.", "conclusion-FOL": "Retired(brianwinter)", "label": "True", "example_id": 206}
{"story_id": 69, "premises": "Brian Winter is a Scottish football referee.\nAfter being injured, Brian Winter retired in 2012.\nBrian Winter was appointed as a referee observer after his retirement.\nSome football referees become referee observers.\nThe son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "premises-FOL": "Scottish(brianWinter) \u2227 FootballReferee(brianWinter)\nRetired(brianWinter) \u2227 RetiredIn(brianWinter, yr2012)\nRefereeObserver(brianWinter)\n\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))\nSonOf(andyWinter, brianWinter) \u2227 FootballPlayer(andyWinter) \u2227 PlaysFor(andyWinter, hamiltonAcademical)", "conclusion": "Andy Winter is a referee.", "conclusion-FOL": "Referee(andywinter)", "label": "Uncertain", "example_id": 207}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "Erica plans.", "conclusion-FOL": "Planner(erica)", "label": "Uncertain", "example_id": 1100}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "Erica is interested in puzzles and is creative.", "conclusion-FOL": "InterestedIn(erica, puzzle) \u2227 Creative(erica)", "label": "True", "example_id": 1101}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "Erica is either interested in puzzles or is creative.", "conclusion-FOL": "InterestedIn(erica, puzzle) \u2295 Creative(erica)", "label": "False", "example_id": 1102}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.", "conclusion-FOL": "Planner(erica) \u2228 PlaysOften(erica, chess))) \u2192 (\u00ac(InterestedIn(erica, puzzle) \u2227 Creative(erica))", "label": "False", "example_id": 1103}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica is creative, then Erica is not interested in puzzles and creative.", "conclusion-FOL": "Creative(erica)) \u2192 (\u00ac(InterestedIn(erica, puzzle) \u2227 Creative(erica))", "label": "False", "example_id": 1104}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica is interested in puzzles and is creative, then Erica is not creative.", "conclusion-FOL": "InterestedIn(erica, puzzle) \u2227 Creative(erica)) \u2192 \u00acCreative(erica)", "label": "False", "example_id": 1105}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.", "conclusion-FOL": "PlaysOften(erica, chess) \u2295 InterestedIn(erica, puzzle) \u2192 \u00ac(InterestedIn(erica, puzzle) \u2228 PlaysOften(erica, chess))", "label": "True", "example_id": 1106}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.", "conclusion-FOL": "PlaysOften(erica, chess) \u2295 InterestedIn(erica, puzzle)) \u2192 \u00ac(InterestedIn(erica, puzzle) \u2228 PlaysOften(erica, chess)", "label": "False", "example_id": 1107}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica plans ahead or is interested in puzzles, then Erica is creative.", "conclusion-FOL": "Planner(erica) \u2228 InterestedIn(erica, puzzle) \u2192 Creative(erica)", "label": "True", "example_id": 1108}
{"story_id": 401, "premises": "Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both.\nIf a person at 'Board Game night' is bad at chess, then they don't play a lot of chess.\nThere is a person at 'Board Game night' who is either a planner or a creative person.\nErica is at 'Board Game night,' and she is someone who plays a lot of chess.\nIf Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things.", "premises-FOL": "\u2200x (At(x, boardGameNight) \u2192 (InterestedIn(x, puzzle) \u2228 BadAt(x, chess)))\n\u2200x ((At(x, boardGameNight) \u2227 BadAt(x, chess)) \u2192 \u00acPlaysOften(x, chess))\n\u2203x (At(x, boardGameNight) \u2227 (Planner(x) \u2228 Creative(x)))\nAt(erica, boardGameNight) \u2227 PlaysOften(erica, chess)\n(At(erica, boardGameNight) \u2227 (\u00ac(BadAt(erica, chess) \u2228 Creative(erica)))) \u2192 \u00ac(Planner(erica) \u2295  Creative(erica))", "conclusion": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.", "conclusion-FOL": "BadAt(erica, chess) \u2295 InterestedIn(erica, puzzle) \u2192 \u00ac(PlaysOften(erica, chess) \u2227 Creative(erica))", "label": "False", "example_id": 1109}
{"story_id": 125, "premises": "Soccer players have a right foot and a left foot.\nTop soccer players are soccer players who can use both the left foot and right foot very efficiently.\nIf a soccer player can score many goals using the left foot, they can use that foot very efficiently.\nIf a soccer player can score many goals using the right foot, they can use that foot very efficiently.\nCristiano Ronaldo is a soccer player.\nCristiano Ronaldo can use his right foot very efficiently.\nCristiano Ronaldo has scored many goals using his left foot.", "premises-FOL": "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))\n\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)", "conclusion": "Cristiano Ronaldo is a top soccer player.", "conclusion-FOL": "TopSoccerPlayer(ronaldo)", "label": "True", "example_id": 373}
{"story_id": 125, "premises": "Soccer players have a right foot and a left foot.\nTop soccer players are soccer players who can use both the left foot and right foot very efficiently.\nIf a soccer player can score many goals using the left foot, they can use that foot very efficiently.\nIf a soccer player can score many goals using the right foot, they can use that foot very efficiently.\nCristiano Ronaldo is a soccer player.\nCristiano Ronaldo can use his right foot very efficiently.\nCristiano Ronaldo has scored many goals using his left foot.", "premises-FOL": "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))\n\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)", "conclusion": "Cristiano Ronaldo is not a top soccer player.", "conclusion-FOL": "\u00acTopSoccerPlayer(ronaldo)", "label": "False", "example_id": 374}
{"story_id": 177, "premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA hatchery is either for profit or for conservation.\nIf a hatchery is for conservation, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "premises-FOL": "Hatchery(nationalLobsterHatchery) \u2227 LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2295 ForProfit(x))\n\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleaseAnimalToWild(x))\n\u00acForProfit(nationalLobsterHatchery)", "conclusion": "The National Lobster Hatchery is for conservation.", "conclusion-FOL": "ForConservation(nationalLobsterhatchery)", "label": "True", "example_id": 509}
{"story_id": 177, "premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA hatchery is either for profit or for conservation.\nIf a hatchery is for conservation, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "premises-FOL": "Hatchery(nationalLobsterHatchery) \u2227 LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2295 ForProfit(x))\n\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleaseAnimalToWild(x))\n\u00acForProfit(nationalLobsterHatchery)", "conclusion": "All hatcheries are open to visitors.", "conclusion-FOL": "\u2200x (Hatchery(x) \u2192 OpenToVisitors(x))", "label": "Uncertain", "example_id": 510}
{"story_id": 177, "premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA hatchery is either for profit or for conservation.\nIf a hatchery is for conservation, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "premises-FOL": "Hatchery(nationalLobsterHatchery) \u2227 LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2295 ForProfit(x))\n\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleaseAnimalToWild(x))\n\u00acForProfit(nationalLobsterHatchery)", "conclusion": "The National Lobster Hatchery releases animals into the wild.", "conclusion-FOL": "ReleaseAnimalToWild(nationalLobsterhatchery)", "label": "Uncertain", "example_id": 511}
{"story_id": 224, "premises": "Rhos Aelwyd F.C. is a Welsh football club.\nRhos Aelwyd F.C. is the only football club located in Ponciau. \nThe Premier Division was won in June 2005 by a team from Ponciau. \nThe winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.\nThe Premier Division in October 2009 was won by the same team that won in June 2005. ", "premises-FOL": "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))\n\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))\n\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))\n\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))\n\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))", "conclusion": "Rhos Aelwyd F.C. won Premier Division in June 2005.", "conclusion-FOL": "\u2203x (Rhosaelwydfc(x) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))", "label": "True", "example_id": 632}
{"story_id": 224, "premises": "Rhos Aelwyd F.C. is a Welsh football club.\nRhos Aelwyd F.C. is the only football club located in Ponciau. \nThe Premier Division was won in June 2005 by a team from Ponciau. \nThe winner of the Premier Division in October 2009 was promoted to the Cymru Alliance.\nThe Premier Division in October 2009 was won by the same team that won in June 2005. ", "premises-FOL": "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 Welsh(x))\n\u2200x (FootballClub(x) \u2227 LocatedIn(x, ponciau) \u2194 Rhosaelwydfc(x))\n\u2203x (LocatedIn(x, ponciau) \u2227 WonPremierDivisionDuring(x, year2005MonthJune))\n\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2192 PromotedTo(x, cymruAlliance))\n\u2200x (WonPremierDivisionDuring(x, year2009MonthOctober) \u2194 WonPremierDivisionDuring(x, y2005MonthJune))", "conclusion": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.", "conclusion-FOL": "\u2203x (Rhosaelwydfc(x) \u2227 PromotedTo(x, cymruAlliance))", "label": "True", "example_id": 633}
{"story_id": 470, "premises": "A Unix operating system used in the lab computers is a piece of software.\nAll versions of MacOS used in the lab computer are based on Unix operating systems.\nA lab computer uses either MacOS or Linux. \nAll Linux computers in the lab are convenient.\nAll software used in the lab computers is written with code.\nIf something is convenient in the lab computer, then it is popular.\nBurger is used in the lab computer, and it is written with code and a new version of MacOS.\nPyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software.", "premises-FOL": "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))\n\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))\n\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))\nUsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))\nUsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))", "conclusion": "Burger is popular.", "conclusion-FOL": "Popular(burger)", "label": "Uncertain", "example_id": 1357}
{"story_id": 470, "premises": "A Unix operating system used in the lab computers is a piece of software.\nAll versions of MacOS used in the lab computer are based on Unix operating systems.\nA lab computer uses either MacOS or Linux. \nAll Linux computers in the lab are convenient.\nAll software used in the lab computers is written with code.\nIf something is convenient in the lab computer, then it is popular.\nBurger is used in the lab computer, and it is written with code and a new version of MacOS.\nPyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software.", "premises-FOL": "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))\n\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))\n\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))\nUsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))\nUsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))", "conclusion": "Burger is not popular.", "conclusion-FOL": "\u00acPopular(burger)", "label": "Uncertain", "example_id": 1358}
{"story_id": 470, "premises": "A Unix operating system used in the lab computers is a piece of software.\nAll versions of MacOS used in the lab computer are based on Unix operating systems.\nA lab computer uses either MacOS or Linux. \nAll Linux computers in the lab are convenient.\nAll software used in the lab computers is written with code.\nIf something is convenient in the lab computer, then it is popular.\nBurger is used in the lab computer, and it is written with code and a new version of MacOS.\nPyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software.", "premises-FOL": "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))\n\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))\n\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))\nUsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))\nUsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))", "conclusion": "PyTorch is popular and written with code.", "conclusion-FOL": "Popular(pytorch) \u2227 WrittenWithCode(pytorch)", "label": "True", "example_id": 1359}
{"story_id": 470, "premises": "A Unix operating system used in the lab computers is a piece of software.\nAll versions of MacOS used in the lab computer are based on Unix operating systems.\nA lab computer uses either MacOS or Linux. \nAll Linux computers in the lab are convenient.\nAll software used in the lab computers is written with code.\nIf something is convenient in the lab computer, then it is popular.\nBurger is used in the lab computer, and it is written with code and a new version of MacOS.\nPyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software.", "premises-FOL": "\u2200x (UsedIn(x, labComputer) \u2227 UnixOperatingSystem(x) \u2192 Software(x))\n\u2200x (UsedIn(x, labComputer) \u2227 MacOS(x) \u2192 UnixOperatingSystem(x))\n\u2200x (UsedIn(x, labComputer) \u2192 MacOS(x) \u2295 Linux(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Linux(x) \u2192 Convenient(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Software(x) \u2192 WrittenWithCode(x))\n\u2200x (UsedIn(x, labComputer) \u2227 Convenient(x) \u2192 Popular(x))\nUsedIn(burger, labComputer) \u2227 WrittenWithCode(burger) \u2227 MacOS(burger))\nUsedIn(pytorch, labComputer) \u2227 \u00ac(Linux(pytorch) \u2295 Software(pytorch))", "conclusion": "PyTorch is not popular and it is not written with code.", "conclusion-FOL": "\u00ac(Popular(pytorch) \u2227 WrittenWithCode(pytorch))", "label": "False", "example_id": 1360}
{"story_id": 117, "premises": "Roads are made of either concrete or asphalt.\nRoads made of concrete last longer than roads made with asphalt.\nRoads made of asphalt are smoother than roads made of concrete.\nEveryone prefers the smoother of two roads. \nThe first road is made of concrete, and the second road is made of asphalt.", "premises-FOL": "\u2200x (Road(x) \u2192 (MadeOf(x, concrete) \u2295 MadeOf(x, asphalt))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, concrete) \u2227 Road(y) \u2227 MadeOf(y, asphalt) \u2192 LastLonger(x, y))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, asphalt) \u2227 Road(y) \u2227 MadeOf(y, concrete) \u2192 Smoother(x, y))\n\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefer(z, x))\nRoad(firstRoad) \u2227 MadeOf(secondRoad, concrete) \u2227 Road(firstRoad) \u2227 MadeOf(secondRoad, asphalt)", "conclusion": "The first road will last longer than the second road.", "conclusion-FOL": "LastLonger(firstRoad, secondRoad)", "label": "True", "example_id": 352}
{"story_id": 117, "premises": "Roads are made of either concrete or asphalt.\nRoads made of concrete last longer than roads made with asphalt.\nRoads made of asphalt are smoother than roads made of concrete.\nEveryone prefers the smoother of two roads. \nThe first road is made of concrete, and the second road is made of asphalt.", "premises-FOL": "\u2200x (Road(x) \u2192 (MadeOf(x, concrete) \u2295 MadeOf(x, asphalt))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, concrete) \u2227 Road(y) \u2227 MadeOf(y, asphalt) \u2192 LastLonger(x, y))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, asphalt) \u2227 Road(y) \u2227 MadeOf(y, concrete) \u2192 Smoother(x, y))\n\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefer(z, x))\nRoad(firstRoad) \u2227 MadeOf(secondRoad, concrete) \u2227 Road(firstRoad) \u2227 MadeOf(secondRoad, asphalt)", "conclusion": "The second road is not smoother than the first one.", "conclusion-FOL": "\u00acSmoother(firstRoad, secondRoad)", "label": "False", "example_id": 353}
{"story_id": 117, "premises": "Roads are made of either concrete or asphalt.\nRoads made of concrete last longer than roads made with asphalt.\nRoads made of asphalt are smoother than roads made of concrete.\nEveryone prefers the smoother of two roads. \nThe first road is made of concrete, and the second road is made of asphalt.", "premises-FOL": "\u2200x (Road(x) \u2192 (MadeOf(x, concrete) \u2295 MadeOf(x, asphalt))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, concrete) \u2227 Road(y) \u2227 MadeOf(y, asphalt) \u2192 LastLonger(x, y))\n\u2200x \u2200y (Road(x) \u2227 MadeOf(x, asphalt) \u2227 Road(y) \u2227 MadeOf(y, concrete) \u2192 Smoother(x, y))\n\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefer(z, x))\nRoad(firstRoad) \u2227 MadeOf(secondRoad, concrete) \u2227 Road(firstRoad) \u2227 MadeOf(secondRoad, asphalt)", "conclusion": "John prefers the second road.", "conclusion-FOL": "Prefer(john, secondRoad)", "label": "True", "example_id": 354}
{"story_id": 74, "premises": "Camp Davern is a traditional summer camp for boys and girls.\nCamp Davern was established in the year 1946.\nCamp Davern was operated by the YMCA until the year 2015.\nCamp Davern is an old summer camp.", "premises-FOL": "TraditionalSummerCamp(campDavern) \u2227 ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)", "conclusion": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.", "conclusion-FOL": "\u2203x (Old(x) \u2227 TraditionalSummerCamp(x) \u2227 ForBoysAndGirls(x))", "label": "True", "example_id": 225}
{"story_id": 74, "premises": "Camp Davern is a traditional summer camp for boys and girls.\nCamp Davern was established in the year 1946.\nCamp Davern was operated by the YMCA until the year 2015.\nCamp Davern is an old summer camp.", "premises-FOL": "TraditionalSummerCamp(campDavern) \u2227 ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)", "conclusion": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.", "conclusion-FOL": "\u2203x (TraditionalSummerCamp(x) \u2227 ForBoysAndGirls(x) \u2227 OperatedUntil(YMCA, x, year2015))", "label": "True", "example_id": 226}
{"story_id": 74, "premises": "Camp Davern is a traditional summer camp for boys and girls.\nCamp Davern was established in the year 1946.\nCamp Davern was operated by the YMCA until the year 2015.\nCamp Davern is an old summer camp.", "premises-FOL": "TraditionalSummerCamp(campDavern) \u2227 ForBoysAndGirls(campDavern)\nEstablishedIn(campDavern, year1946)\nOperatedUntil(yMCA, campDavern, year2015)\nOld(campDavern)", "conclusion": "Camp Davern was established in 1989.", "conclusion-FOL": "EstablishedIn(campdavern, year1989)", "label": "Uncertain", "example_id": 227}
{"story_id": 372, "premises": "If Emily's friends publish journals, then they do not work in the entertainment industry.\nAll of Emily's friends who are award-winning novelists publish journals.\nEmily's friends work in the entertainment industry or are highly acclaimed in their profession.\nIf Emily's friends are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.\nIf Emily's friends are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.\nTaylor is Emily's friend.\nIt is not true that Taylor both holds highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace.", "premises-FOL": "\u2200x (EmilysFriend(x) \u2227 Publish(x, journal) \u2192 \u00acWorkIn(x, entertainmentIndustry))\n\u2200x (EmilysFriend(x) \u2227 AwardWinningNovelist(x) \u2192 Publish(x, journal))\n\u2200x (EmilysFriend(x) \u2192 WorkIn(x, entertainmentIndustry) \u2228 HighlyAcclaimedIn(x, theirProfession))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 \u2203y (HoldAt(x, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 ReceiveFrom(x, glowingFeedback, colleague) \u2227 ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n\u00ac(HighlyAcclaimedIn(taylor, theirProfession) \u2227 (\u2203y (HoldAt(taylor, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))", "conclusion": "Taylor is Emily's friend and she often holds tenured and high-ranking positions at her workplace.", "conclusion-FOL": "EmilysFriends(taylor) \u2227 (\u2203y (HoldAt(taylor, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))", "label": "Uncertain", "example_id": 990}
{"story_id": 372, "premises": "If Emily's friends publish journals, then they do not work in the entertainment industry.\nAll of Emily's friends who are award-winning novelists publish journals.\nEmily's friends work in the entertainment industry or are highly acclaimed in their profession.\nIf Emily's friends are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.\nIf Emily's friends are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.\nTaylor is Emily's friend.\nIt is not true that Taylor both holds highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace.", "premises-FOL": "\u2200x (EmilysFriend(x) \u2227 Publish(x, journal) \u2192 \u00acWorkIn(x, entertainmentIndustry))\n\u2200x (EmilysFriend(x) \u2227 AwardWinningNovelist(x) \u2192 Publish(x, journal))\n\u2200x (EmilysFriend(x) \u2192 WorkIn(x, entertainmentIndustry) \u2228 HighlyAcclaimedIn(x, theirProfession))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 \u2203y (HoldAt(x, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 ReceiveFrom(x, glowingFeedback, colleague) \u2227 ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n\u00ac(HighlyAcclaimedIn(taylor, theirProfession) \u2227 (\u2203y (HoldAt(taylor, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))", "conclusion": "Taylor is Emily's friend and she often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.", "conclusion-FOL": "EmilysFriends(taylor) \u2227 (Receive(taylor, glowingFeedback, colleague) \u2227 Receive(taylor, glowingRecommendation, colleague) \u2227 AwardWinningNovelist(taylor))", "label": "False", "example_id": 991}
{"story_id": 372, "premises": "If Emily's friends publish journals, then they do not work in the entertainment industry.\nAll of Emily's friends who are award-winning novelists publish journals.\nEmily's friends work in the entertainment industry or are highly acclaimed in their profession.\nIf Emily's friends are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.\nIf Emily's friends are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.\nTaylor is Emily's friend.\nIt is not true that Taylor both holds highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace.", "premises-FOL": "\u2200x (EmilysFriend(x) \u2227 Publish(x, journal) \u2192 \u00acWorkIn(x, entertainmentIndustry))\n\u2200x (EmilysFriend(x) \u2227 AwardWinningNovelist(x) \u2192 Publish(x, journal))\n\u2200x (EmilysFriend(x) \u2192 WorkIn(x, entertainmentIndustry) \u2228 HighlyAcclaimedIn(x, theirProfession))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 \u2203y (HoldAt(x, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))\n\u2200x (EmilysFriend(x) \u2227 HighlyAcclaimedIn(x, theirProfession) \u2192 ReceiveFrom(x, glowingFeedback, colleague) \u2227 ReceiveFrom(x, glowingRecommendation, colleague))\nEmilysFriends(taylor) \n\u00ac(HighlyAcclaimedIn(taylor, theirProfession) \u2227 (\u2203y (HoldAt(taylor, y, workPlace) \u2227 Tenured(y) \u2227 HighRanking(y) \u2227 Position(y)))", "conclusion": "Taylor is Emily's friend and she does not both publish journals and is an award-winning novelist.", "conclusion-FOL": "EmilysFriends(taylor) \u2227 \u00ac(Publish(taylor, journal) \u2227 AwardWinningNovelist(taylor))", "label": "True", "example_id": 992}
{"story_id": 10, "premises": "Thick as Thieves is a young adult fantasy novel written by Megan Whalen Turner.\nThick as Thieves was published by Greenwillow Books.\nIf a book was published by a company, then the author of that book worked with the company that published the book.\nThe fictional Mede Empire is where Thick as Thieves is set.\nThe Mede Empire plots to swallow up some nearby countries.\nAttolia and Sounis are countries near the Mede Empire.\nThick as Thieves was sold both as a hardcover and an e-book.", "premises-FOL": "YoungAdultFantasy(thickAsTheives) \u2227 Novel(thickAsTheives) \u2227 WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n\u2200x \u2200y \u2200z ((WrittenBy(x, y) \u2227 PublishedBy(x, z)) \u2192 WorkedWith(y, z))\nFictional(medeEmpire) \u2227 SetIn(thickAsTheives, medeEmpire)\n\u2203x \u2203y ((Country(x) \u2227 Near(x, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, x)) \u2227 (\u00ac(x=y) \u2227 Near(y, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) \u2227 Near(attolia, medeEmpire) \u2227 Country(sounis) \u2227 Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) \u2227 SoldAs(thickAsTheives, softCover)", "conclusion": "Megan Whalen Turner worked with Greenwillow Books.", "conclusion-FOL": "WorkedWith(WhalenTurner, greenWillowbooks)", "label": "True", "example_id": 25}
{"story_id": 10, "premises": "Thick as Thieves is a young adult fantasy novel written by Megan Whalen Turner.\nThick as Thieves was published by Greenwillow Books.\nIf a book was published by a company, then the author of that book worked with the company that published the book.\nThe fictional Mede Empire is where Thick as Thieves is set.\nThe Mede Empire plots to swallow up some nearby countries.\nAttolia and Sounis are countries near the Mede Empire.\nThick as Thieves was sold both as a hardcover and an e-book.", "premises-FOL": "YoungAdultFantasy(thickAsTheives) \u2227 Novel(thickAsTheives) \u2227 WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n\u2200x \u2200y \u2200z ((WrittenBy(x, y) \u2227 PublishedBy(x, z)) \u2192 WorkedWith(y, z))\nFictional(medeEmpire) \u2227 SetIn(thickAsTheives, medeEmpire)\n\u2203x \u2203y ((Country(x) \u2227 Near(x, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, x)) \u2227 (\u00ac(x=y) \u2227 Near(y, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) \u2227 Near(attolia, medeEmpire) \u2227 Country(sounis) \u2227 Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) \u2227 SoldAs(thickAsTheives, softCover)", "conclusion": "The Mede Empire plans to swallow up Attolia.", "conclusion-FOL": "PlotsToSwallowUp(medeEmpire, attolia)", "label": "Uncertain", "example_id": 26}
{"story_id": 10, "premises": "Thick as Thieves is a young adult fantasy novel written by Megan Whalen Turner.\nThick as Thieves was published by Greenwillow Books.\nIf a book was published by a company, then the author of that book worked with the company that published the book.\nThe fictional Mede Empire is where Thick as Thieves is set.\nThe Mede Empire plots to swallow up some nearby countries.\nAttolia and Sounis are countries near the Mede Empire.\nThick as Thieves was sold both as a hardcover and an e-book.", "premises-FOL": "YoungAdultFantasy(thickAsTheives) \u2227 Novel(thickAsTheives) \u2227 WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n\u2200x \u2200y \u2200z ((WrittenBy(x, y) \u2227 PublishedBy(x, z)) \u2192 WorkedWith(y, z))\nFictional(medeEmpire) \u2227 SetIn(thickAsTheives, medeEmpire)\n\u2203x \u2203y ((Country(x) \u2227 Near(x, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, x)) \u2227 (\u00ac(x=y) \u2227 Near(y, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) \u2227 Near(attolia, medeEmpire) \u2227 Country(sounis) \u2227 Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) \u2227 SoldAs(thickAsTheives, softCover)", "conclusion": "Thick as Thieves is not set in the Mede Empire.", "conclusion-FOL": "\u00acSetIn(thickAsTheives, medeEmpire)", "label": "False", "example_id": 27}
{"story_id": 10, "premises": "Thick as Thieves is a young adult fantasy novel written by Megan Whalen Turner.\nThick as Thieves was published by Greenwillow Books.\nIf a book was published by a company, then the author of that book worked with the company that published the book.\nThe fictional Mede Empire is where Thick as Thieves is set.\nThe Mede Empire plots to swallow up some nearby countries.\nAttolia and Sounis are countries near the Mede Empire.\nThick as Thieves was sold both as a hardcover and an e-book.", "premises-FOL": "YoungAdultFantasy(thickAsTheives) \u2227 Novel(thickAsTheives) \u2227 WrittenBy(thickAsTheives, meganWhalenTurner)\nPublishedBy(thickAsTheives, greenWillowBooks)\n\u2200x \u2200y \u2200z ((WrittenBy(x, y) \u2227 PublishedBy(x, z)) \u2192 WorkedWith(y, z))\nFictional(medeEmpire) \u2227 SetIn(thickAsTheives, medeEmpire)\n\u2203x \u2203y ((Country(x) \u2227 Near(x, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, x)) \u2227 (\u00ac(x=y) \u2227 Near(y, medeEmpire) \u2227 PlotsToSwallowUp(medeEmpire, y)))\nCountry(attolia) \u2227 Near(attolia, medeEmpire) \u2227 Country(sounis) \u2227 Near(sounis, medeEmpire)\nSoldAs(thickAsTheives, hardCover) \u2227 SoldAs(thickAsTheives, softCover)", "conclusion": "Megan Whalen Turner did not work with Greenwillow Books.", "conclusion-FOL": "\u00acWorkedWith(megan, greenWillowbooks)", "label": "False", "example_id": 28}
{"story_id": 116, "premises": "WeTab is a MeeGo-based tablet computer.\nWeTab was announced by Neofonie.\nNeofonie is a German producer.\nGermans live in Germany or abroad. ", "premises-FOL": "MeeGoBased(weTab) \u2227 TabletComputer(weTab)\n\u2200x (AnnouncedBy(weTab, neofonie))\nGerman(neofonie) \u2227 Producer(neofonie)\n\u2200x (German(x) \u2192 LiveIn(x, german) \u2295 LiveAbroad(x))", "conclusion": "There is a tablet computer announced by a German producer.", "conclusion-FOL": "\u2203x \u2203y (TabletComputer(x) \u2227 German(y) \u2227 Producer(y) \u2227 AnnouncedBy(x, y))", "label": "True", "example_id": 350}
{"story_id": 116, "premises": "WeTab is a MeeGo-based tablet computer.\nWeTab was announced by Neofonie.\nNeofonie is a German producer.\nGermans live in Germany or abroad. ", "premises-FOL": "MeeGoBased(weTab) \u2227 TabletComputer(weTab)\n\u2200x (AnnouncedBy(weTab, neofonie))\nGerman(neofonie) \u2227 Producer(neofonie)\n\u2200x (German(x) \u2192 LiveIn(x, german) \u2295 LiveAbroad(x))", "conclusion": "Neofonie doesn't speak English or German.", "conclusion-FOL": "\u00acSpeak(neofonie, english) \u2227 \u00acSpeak(neofonie, german)", "label": "False", "example_id": 351}
{"story_id": 419, "premises": "Some employees in James's town who work in business analysis are good at math. \nAll of the employees in James's town who work in business analysis are working for this company. \nNone of the employees in James's town who work for this company are from China. \nAll of the employees in James's town working in software engineering are from China. \nLeif is an employee in James's town, and he is working in software engineering.  ", "premises-FOL": "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))\n\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))\nEmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)", "conclusion": "Leif is good at math.", "conclusion-FOL": "EmployeesInJamesSTown(leif) \u2227 GoodAt(leif, math)", "label": "Uncertain", "example_id": 1181}
{"story_id": 419, "premises": "Some employees in James's town who work in business analysis are good at math. \nAll of the employees in James's town who work in business analysis are working for this company. \nNone of the employees in James's town who work for this company are from China. \nAll of the employees in James's town working in software engineering are from China. \nLeif is an employee in James's town, and he is working in software engineering.  ", "premises-FOL": "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))\n\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))\nEmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)", "conclusion": "Leif is not both good at math and working in business analysis.", "conclusion-FOL": "\u00ac(GoodAt(leif, math) \u2227 WorkIn(leif, businessAnalysis))", "label": "False", "example_id": 1182}
{"story_id": 419, "premises": "Some employees in James's town who work in business analysis are good at math. \nAll of the employees in James's town who work in business analysis are working for this company. \nNone of the employees in James's town who work for this company are from China. \nAll of the employees in James's town working in software engineering are from China. \nLeif is an employee in James's town, and he is working in software engineering.  ", "premises-FOL": "\u2203x \u2203y (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis) \u2227 GoodAt(x, math) \u2227 (\u00ac(x=y)) \u2227 EmployeeIn(y, jamesSTown) \u2227 WorkIn(y, businessAnalysis) \u2227 GoodAt(y, math))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, businessAnalysis)) \u2192 WorkFor(x, thisCompany))\n\u2200x ((EmployeeIn(x, jamesSTown) \u2227 WorkFor(x, thisCompany)) \u2192 \u00acFrom(x, china))\n\u2200x (EmployeeIn(x, jamesSTown) \u2227 WorkIn(x, softwareEngineering) \u2192 From(x, china))\nEmployeeIn(leif, jamesSTown) \u2227 WorkIn(leif, softwareEngineering)", "conclusion": "If Leif is not both good at math and in business analysis, then he is neither working in this company nor working in software engineering.", "conclusion-FOL": "\u00ac(GoodAt(leif, math) \u2227 WorkIn(leif, businessAnalysis)) \u2192 (\u00acWorkFor(x, thisCompany) \u2227 \u00acWorkIn(x, softwareEngineering))", "label": "True", "example_id": 1183}
{"story_id": 157, "premises": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.\nIf the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.\nAt the end of the party, strawberries had the lowest remaining weight.\nAt the end of the party, the number of leftover blueberries was lower than that of cherries.\nBenjamin only ate oranges and grapes at the party.", "premises-FOL": "Provide(party, strawberry) \u2227 Provide(party, orange) \u2227 Provide(party, blueberry) \u2227 Provide(party, grape) \u2227 Provide(party, cherry) \n\u2200x (LowestWeightRemainingAt(x, endOfParty) \u2192 MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) \u2227 Eat(benjamin, grape) \u2227 \u00acEat(benjamin, blueberry) \u2227 \u00acEat(benjamin, cherry) \u2227 \u00acEat(benjamin, strawberry)", "conclusion": "Blueberries were the most popular fruit at the party.", "conclusion-FOL": "MostPopular(blueberry)", "label": "Uncertain", "example_id": 450}
{"story_id": 157, "premises": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.\nIf the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.\nAt the end of the party, strawberries had the lowest remaining weight.\nAt the end of the party, the number of leftover blueberries was lower than that of cherries.\nBenjamin only ate oranges and grapes at the party.", "premises-FOL": "Provide(party, strawberry) \u2227 Provide(party, orange) \u2227 Provide(party, blueberry) \u2227 Provide(party, grape) \u2227 Provide(party, cherry) \n\u2200x (LowestWeightRemainingAt(x, endOfParty) \u2192 MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) \u2227 Eat(benjamin, grape) \u2227 \u00acEat(benjamin, blueberry) \u2227 \u00acEat(benjamin, cherry) \u2227 \u00acEat(benjamin, strawberry)", "conclusion": "Cherries were the most popular fruit at the party.", "conclusion-FOL": "MostPopular(cherry)", "label": "Uncertain", "example_id": 451}
{"story_id": 157, "premises": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.\nIf the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.\nAt the end of the party, strawberries had the lowest remaining weight.\nAt the end of the party, the number of leftover blueberries was lower than that of cherries.\nBenjamin only ate oranges and grapes at the party.", "premises-FOL": "Provide(party, strawberry) \u2227 Provide(party, orange) \u2227 Provide(party, blueberry) \u2227 Provide(party, grape) \u2227 Provide(party, cherry) \n\u2200x (LowestWeightRemainingAt(x, endOfParty) \u2192 MostPopular(x)) \nLowestWeightRemainingAt(strawberries, endOfParty)\nLowerWeightAt(blueberry, cherry, endOfParty)\nEat(benjamin, orange) \u2227 Eat(benjamin, grape) \u2227 \u00acEat(benjamin, blueberry) \u2227 \u00acEat(benjamin, cherry) \u2227 \u00acEat(benjamin, strawberry)", "conclusion": "Benjamin ate blueberries at the party.", "conclusion-FOL": "Eat(blueberry, benjamin)", "label": "False", "example_id": 452}
{"story_id": 63, "premises": "All students who attend in person have registered for the conference. \nStudents either attend the conference in person or remotely. \nNo students from China attend the conference remotely. \nJames attends the conference, but he does not attend the conference remotely.\nJack attends the conference, and he is a student from China.", "premises-FOL": "\u2200x (AttendInPerson(x) \u2192 Registered(x))\n\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))\n\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))\nAttend(james) \u2227 (\u00acAttendRemotely(james))\nFromChina(jack) \u2227 Attend(jack)", "conclusion": "James attends the conference but not in person.", "conclusion-FOL": "Attend(james) \u2227 (\u00acAttendInPerson(james))", "label": "False", "example_id": 186}
{"story_id": 63, "premises": "All students who attend in person have registered for the conference. \nStudents either attend the conference in person or remotely. \nNo students from China attend the conference remotely. \nJames attends the conference, but he does not attend the conference remotely.\nJack attends the conference, and he is a student from China.", "premises-FOL": "\u2200x (AttendInPerson(x) \u2192 Registered(x))\n\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))\n\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))\nAttend(james) \u2227 (\u00acAttendRemotely(james))\nFromChina(jack) \u2227 Attend(jack)", "conclusion": "Jack attends the conference in person.", "conclusion-FOL": "Attend(jack) \u2227 AttendInPerson(jack)", "label": "True", "example_id": 187}
{"story_id": 63, "premises": "All students who attend in person have registered for the conference. \nStudents either attend the conference in person or remotely. \nNo students from China attend the conference remotely. \nJames attends the conference, but he does not attend the conference remotely.\nJack attends the conference, and he is a student from China.", "premises-FOL": "\u2200x (AttendInPerson(x) \u2192 Registered(x))\n\u2200x (Attend(x) \u2192 (AttendInPerson(x) \u2295 AttendRemotely(x)))\n\u2200x ((Attend(x) \u2227 FromChina(x)) \u2192 \u00acAttendRemotely(x))\nAttend(james) \u2227 (\u00acAttendRemotely(james))\nFromChina(jack) \u2227 Attend(jack)", "conclusion": "Jack has registered for the conference.", "conclusion-FOL": "Registered(jack)", "label": "True", "example_id": 188}
{"story_id": 223, "premises": "David Ha'ivri is a political strategist. \nIf you are born in Israel to at least one Israeli parent, you receive Israeli citizenship at birth. \nDavid Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. \nSeveral Zionist leaders have been elected to the Shomron Regional Municipal council. \nDavid Ha'ivri is a Zionist leader.", "premises-FOL": "PoliticalStrategist(davidHaivri)\n\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(y, x) \u2227 Israeli(y) \u2192 Israeli(x))\n\u2203x (EmigratedTo(davidHaivri, america) \u2227 BornInIsrael(davidHaivri) \u2227 ParentOf(davidHaivri, x) \u2227 Israeli(x))\n\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)", "conclusion": "David Ha'ivri is an Israeli citizen.", "conclusion-FOL": "IsraeliCitizen(davidHaivri)", "label": "True", "example_id": 629}
{"story_id": 223, "premises": "David Ha'ivri is a political strategist. \nIf you are born in Israel to at least one Israeli parent, you receive Israeli citizenship at birth. \nDavid Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. \nSeveral Zionist leaders have been elected to the Shomron Regional Municipal council. \nDavid Ha'ivri is a Zionist leader.", "premises-FOL": "PoliticalStrategist(davidHaivri)\n\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(y, x) \u2227 Israeli(y) \u2192 Israeli(x))\n\u2203x (EmigratedTo(davidHaivri, america) \u2227 BornInIsrael(davidHaivri) \u2227 ParentOf(davidHaivri, x) \u2227 Israeli(x))\n\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)", "conclusion": "David Ha'ivri is a United States citizen.", "conclusion-FOL": "American(davidHaivri)", "label": "Uncertain", "example_id": 630}
{"story_id": 223, "premises": "David Ha'ivri is a political strategist. \nIf you are born in Israel to at least one Israeli parent, you receive Israeli citizenship at birth. \nDavid Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. \nSeveral Zionist leaders have been elected to the Shomron Regional Municipal council. \nDavid Ha'ivri is a Zionist leader.", "premises-FOL": "PoliticalStrategist(davidHaivri)\n\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(y, x) \u2227 Israeli(y) \u2192 Israeli(x))\n\u2203x (EmigratedTo(davidHaivri, america) \u2227 BornInIsrael(davidHaivri) \u2227 ParentOf(davidHaivri, x) \u2227 Israeli(x))\n\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronMunicipalCouncil))\nZionstLeader(davidHaivri)", "conclusion": "David Ha'ivri has been elected to the Shomron Regional Municipal council.", "conclusion-FOL": "ElectedTo(davidHaivri, shomronMunicipalCouncil)", "label": "Uncertain", "example_id": 631}
{"story_id": 1, "premises": "Mary has the flu.\nIf someone has the flu, then they have influenza.\nSusan doesn't have influenza.", "premises-FOL": "Has(mary, flu)\n\u2200x (Has(x, flu) \u2192 Has(x, influenza))\n\u00acHas(susan, influenza)", "conclusion": "Either Mary or Susan has influenza.", "conclusion-FOL": "Has(mary, influenza) \u2295 Has(susan, influenza)", "label": "True", "example_id": 3}
{"story_id": 42, "premises": "James Cocks was a British lawyer.\nJames Cocks was a Whig politician who sat in the House of Commons.\nA British is a European.\nAny lawyer is familiar with laws.\nSome Whigs speak French.", "premises-FOL": "British(james) \u2227 Lawyer(james)\nWhig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)\n\u2200x (British(x) \u2192 European(x))\n\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))\n\u2203x \u2203y (Whig(x) \u2227 SpeakFrench(x)) \u2227 (\u00ac(x=y)) \u2227 (Whig(y) \u2227 SpeakFrench(y))", "conclusion": "No lawyer ever sat in the House of Commons.", "conclusion-FOL": "\u2200x (Lawyer(x) \u2192 \u00acSatInHouseOfCommons(x))", "label": "False", "example_id": 120}
{"story_id": 42, "premises": "James Cocks was a British lawyer.\nJames Cocks was a Whig politician who sat in the House of Commons.\nA British is a European.\nAny lawyer is familiar with laws.\nSome Whigs speak French.", "premises-FOL": "British(james) \u2227 Lawyer(james)\nWhig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)\n\u2200x (British(x) \u2192 European(x))\n\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))\n\u2203x \u2203y (Whig(x) \u2227 SpeakFrench(x)) \u2227 (\u00ac(x=y)) \u2227 (Whig(y) \u2227 SpeakFrench(y))", "conclusion": "Some European was familiar with laws.", "conclusion-FOL": "\u2203x (European(x) \u2227 FamiliarWithLaws(x))", "label": "True", "example_id": 121}
{"story_id": 42, "premises": "James Cocks was a British lawyer.\nJames Cocks was a Whig politician who sat in the House of Commons.\nA British is a European.\nAny lawyer is familiar with laws.\nSome Whigs speak French.", "premises-FOL": "British(james) \u2227 Lawyer(james)\nWhig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)\n\u2200x (British(x) \u2192 European(x))\n\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))\n\u2203x \u2203y (Whig(x) \u2227 SpeakFrench(x)) \u2227 (\u00ac(x=y)) \u2227 (Whig(y) \u2227 SpeakFrench(y))", "conclusion": "James Cocks speaks French.", "conclusion-FOL": "SpeakFrench(james)", "label": "Uncertain", "example_id": 122}
{"story_id": 122, "premises": "Beasts of Prey is a fantasy novel or a science fiction novel, or both.\nScience fiction novels are not about mythological creatures\nBeasts of Prey Is about a creature known as the Shetani.\nShetanis are mythological.", "premises-FOL": "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))\n\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))\nAbout(beastsOfPrey, shetani) \u2227 Creature(shetani)\nMythological(shetani)", "conclusion": "Beasts of prey is a fantasy novel.", "conclusion-FOL": "Fantasy(beastsOfpPrey) \u2227 Novel(beastsOfPrey)", "label": "True", "example_id": 364}
{"story_id": 122, "premises": "Beasts of Prey is a fantasy novel or a science fiction novel, or both.\nScience fiction novels are not about mythological creatures\nBeasts of Prey Is about a creature known as the Shetani.\nShetanis are mythological.", "premises-FOL": "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))\n\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))\nAbout(beastsOfPrey, shetani) \u2227 Creature(shetani)\nMythological(shetani)", "conclusion": "Beasts of prey isn't a science fiction novel.", "conclusion-FOL": "\u00acScienceFiction(beastsofprey) \u2227 Novel(beastsOfPrey)", "label": "True", "example_id": 365}
{"story_id": 122, "premises": "Beasts of Prey is a fantasy novel or a science fiction novel, or both.\nScience fiction novels are not about mythological creatures\nBeasts of Prey Is about a creature known as the Shetani.\nShetanis are mythological.", "premises-FOL": "Novel(beastsOfPrey) \u2192 (Fantasy(beastsOfPrey) \u2228 ScienceFiction(beastsOfPrey))\n\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))\nAbout(beastsOfPrey, shetani) \u2227 Creature(shetani)\nMythological(shetani)", "conclusion": "A shetani is either mythological or a creature.", "conclusion-FOL": "Mythological(shetani) \u2295 Creature(shetani)", "label": "False", "example_id": 366}
{"story_id": 17, "premises": "Odell is an English surname originating in Odell, Bedfordshire.\nIn some families, Odell is spelled O'Dell in a mistaken Irish adaptation.\nNotable people with surnames include Amy Odell, Jack Odell, and Mats Odell.\nAmy Odell is a British singer-songwriter.\nJack Odell is an English toy inventor.", "premises-FOL": "Surname(nameODell) \u2227 From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) \u2227 (\u2203x\u2203y(Family(x) \u2227 Named(x, nameO'Dell) \u2227 (\u00ac(x=y)) \u2227 Family(y) \u2227 Named(y, nameO'Dell))\nNamed(amyODell, nameODell) \u2227 NotablePerson(amyODell) \u2227 Named(jackODell, nameODell) \u2227 NotablePerson(jackODell) \u2227 Named(matsODell, nameODell) \u2227 NotablePerson(matsODell)\nBritish(amyODell) \u2227 Singer(amyODell) \u2227 SongWriter(amyODell)\nEnglish(jackODell) \u2227 ToyInventor(jackODell)", "conclusion": "Jack Odell is a notable person.", "conclusion-FOL": "NotablePerson(jackODell)", "label": "True", "example_id": 47}
{"story_id": 17, "premises": "Odell is an English surname originating in Odell, Bedfordshire.\nIn some families, Odell is spelled O'Dell in a mistaken Irish adaptation.\nNotable people with surnames include Amy Odell, Jack Odell, and Mats Odell.\nAmy Odell is a British singer-songwriter.\nJack Odell is an English toy inventor.", "premises-FOL": "Surname(nameODell) \u2227 From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) \u2227 (\u2203x\u2203y(Family(x) \u2227 Named(x, nameO'Dell) \u2227 (\u00ac(x=y)) \u2227 Family(y) \u2227 Named(y, nameO'Dell))\nNamed(amyODell, nameODell) \u2227 NotablePerson(amyODell) \u2227 Named(jackODell, nameODell) \u2227 NotablePerson(jackODell) \u2227 Named(matsODell, nameODell) \u2227 NotablePerson(matsODell)\nBritish(amyODell) \u2227 Singer(amyODell) \u2227 SongWriter(amyODell)\nEnglish(jackODell) \u2227 ToyInventor(jackODell)", "conclusion": "Odell is Amy Odell's surname.", "conclusion-FOL": "Named(amyODell, nameODell)", "label": "True", "example_id": 48}
{"story_id": 17, "premises": "Odell is an English surname originating in Odell, Bedfordshire.\nIn some families, Odell is spelled O'Dell in a mistaken Irish adaptation.\nNotable people with surnames include Amy Odell, Jack Odell, and Mats Odell.\nAmy Odell is a British singer-songwriter.\nJack Odell is an English toy inventor.", "premises-FOL": "Surname(nameODell) \u2227 From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) \u2227 (\u2203x\u2203y(Family(x) \u2227 Named(x, nameO'Dell) \u2227 (\u00ac(x=y)) \u2227 Family(y) \u2227 Named(y, nameO'Dell))\nNamed(amyODell, nameODell) \u2227 NotablePerson(amyODell) \u2227 Named(jackODell, nameODell) \u2227 NotablePerson(jackODell) \u2227 Named(matsODell, nameODell) \u2227 NotablePerson(matsODell)\nBritish(amyODell) \u2227 Singer(amyODell) \u2227 SongWriter(amyODell)\nEnglish(jackODell) \u2227 ToyInventor(jackODell)", "conclusion": "Amy Odell is an English toy inventor.", "conclusion-FOL": "English(amyODell) \u2227 ToyInventor(amyODell)", "label": "Uncertain", "example_id": 49}
{"story_id": 17, "premises": "Odell is an English surname originating in Odell, Bedfordshire.\nIn some families, Odell is spelled O'Dell in a mistaken Irish adaptation.\nNotable people with surnames include Amy Odell, Jack Odell, and Mats Odell.\nAmy Odell is a British singer-songwriter.\nJack Odell is an English toy inventor.", "premises-FOL": "Surname(nameODell) \u2227 From(nameODell, oDellBedfordshire)\nMistakenSpellingOf(nameO'Dell, nameODell) \u2227 (\u2203x\u2203y(Family(x) \u2227 Named(x, nameO'Dell) \u2227 (\u00ac(x=y)) \u2227 Family(y) \u2227 Named(y, nameO'Dell))\nNamed(amyODell, nameODell) \u2227 NotablePerson(amyODell) \u2227 Named(jackODell, nameODell) \u2227 NotablePerson(jackODell) \u2227 Named(matsODell, nameODell) \u2227 NotablePerson(matsODell)\nBritish(amyODell) \u2227 Singer(amyODell) \u2227 SongWriter(amyODell)\nEnglish(jackODell) \u2227 ToyInventor(jackODell)", "conclusion": "Amy Odell is also Amy O'Dell.", "conclusion-FOL": "Named(amyODell, nameODell) \u2227 Named(amyODell, nameO'Dell)", "label": "Uncertain", "example_id": 50}
{"story_id": 167, "premises": "If you go somewhere by train, you will not lose time.\nIf you go somewhere by car and meet a traffic jam, you will lose time.\nIf you lose time, you will be late for work.\nMary can get from New Haven to New York City either by train or car.\nMary is late for work.", "premises-FOL": "\u2200x (GoByTrain(x) \u2192 \u00acLoseTime(x))\n\u2200x((GoByCar(x) \u2227 Meet(x, trafficJam)) \u2192 LoseTime(x))\n\u2200x (LoseTime(x) \u2192 LateForWork(x))\nFromAndTo(newHaven, newYork) \u2227 (GoByTrain(mary) \u2295 GoByCar(mary))\nLateForWork(mary)", "conclusion": "Mary gets from New Haven to New York City by train.", "conclusion-FOL": "FromAndTo(newHaven, newYork) \u2227 GoByTrain(mary)", "label": "False", "example_id": 479}
{"story_id": 167, "premises": "If you go somewhere by train, you will not lose time.\nIf you go somewhere by car and meet a traffic jam, you will lose time.\nIf you lose time, you will be late for work.\nMary can get from New Haven to New York City either by train or car.\nMary is late for work.", "premises-FOL": "\u2200x (GoByTrain(x) \u2192 \u00acLoseTime(x))\n\u2200x((GoByCar(x) \u2227 Meet(x, trafficJam)) \u2192 LoseTime(x))\n\u2200x (LoseTime(x) \u2192 LateForWork(x))\nFromAndTo(newHaven, newYork) \u2227 (GoByTrain(mary) \u2295 GoByCar(mary))\nLateForWork(mary)", "conclusion": "Mary gets from New Haven to New York City by car.", "conclusion-FOL": "FromAndTo(newHaven, newYork) \u2227 GoByCar(mary)", "label": "True", "example_id": 480}
{"story_id": 167, "premises": "If you go somewhere by train, you will not lose time.\nIf you go somewhere by car and meet a traffic jam, you will lose time.\nIf you lose time, you will be late for work.\nMary can get from New Haven to New York City either by train or car.\nMary is late for work.", "premises-FOL": "\u2200x (GoByTrain(x) \u2192 \u00acLoseTime(x))\n\u2200x((GoByCar(x) \u2227 Meet(x, trafficJam)) \u2192 LoseTime(x))\n\u2200x (LoseTime(x) \u2192 LateForWork(x))\nFromAndTo(newHaven, newYork) \u2227 (GoByTrain(mary) \u2295 GoByCar(mary))\nLateForWork(mary)", "conclusion": "Mary meets a traffic jam.", "conclusion-FOL": "Meet(mary, trafficJam)", "label": "Uncertain", "example_id": 481}
{"story_id": 297, "premises": "If a person is hungry, the person is uncomfortable.\nIf a person is uncomfortable, the person is unhappy.", "premises-FOL": "\u2200x (Hungry(x) \u2192 Uncomfortable(x))\n\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))", "conclusion": "If a person is not hungry, the person is unhappy.", "conclusion-FOL": "\u2200x (\u00acHungry(x) \u2192 \u00acHappy(x))", "label": "Uncertain", "example_id": 741}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "Mary is a white-collar worker.", "conclusion-FOL": "WhiteCollarWorker(mary)", "label": "Uncertain", "example_id": 764}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "Mary is an advocate.", "conclusion-FOL": "Advocate(mary)", "label": "False", "example_id": 765}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "Mary is not an advocate.", "conclusion-FOL": "\u00acAdvocate(mary)", "label": "True", "example_id": 766}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "Mary is either an advocate or a tipped employee.", "conclusion-FOL": "Advocate(mary) \u2295 TippedEmployee(mary)", "label": "False", "example_id": 767}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "If Mary is not both an advocate and is entitled to be paid the federal minimum wage by their employees, she is not a tipped employee.", "conclusion-FOL": "(\u00ac(Advocate(mary) \u2227 EntitledTo(mary, federalMinimumWage))) \u2192 \u00acTippedEmployee(mary)", "label": "True", "example_id": 768}
{"story_id": 309, "premises": "Tipped employees are not entitled to be paid the federal minimum wage by their employees. \nIf a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. \nAll lawyers are white-collar workers.\nEvery advocate is a lawyer.\nMary is not a lawyer or a tipped employee.", "premises-FOL": "\u2200x (TippedEmployee(x) \u2192 \u00acEntitledTo(x, federalMinimumWage))\n\u2200x (WhiteCollarWorker(x) \u2192 EntitledTo(x, federalMinimumWage))\n\u2200x (Lawyer(x) \u2192 WhiteCollarWorker(x))\n\u2200x (Advocate(x) \u2192 Lawyer(x))\n\u00ac(Lawyer(mary) \u2295 TippedEmployee(mary))", "conclusion": "If Mary is either an advocate or a tipped employee, she is an advocate.", "conclusion-FOL": "(Advocate(mary) \u2295 TippedEmployee(mary)) \u2192 Advocate(mary)", "label": "True", "example_id": 769}
{"story_id": 76, "premises": "Asa Hoffmann was born in New York City.\nAsa Hoffman lives in Manhattan.\nAsa Hoffman is a chess player.\nSome chess players are grandmasters.\nPeople born and living in New York City are New Yorkers.\nPeople living in Manhattan live in New York City.", "premises-FOL": "BornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))\n\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))\n\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))", "conclusion": "Asa Hoffmann is a New Yorker.", "conclusion-FOL": "NewYorker(asaHoffmann)", "label": "True", "example_id": 231}
{"story_id": 76, "premises": "Asa Hoffmann was born in New York City.\nAsa Hoffman lives in Manhattan.\nAsa Hoffman is a chess player.\nSome chess players are grandmasters.\nPeople born and living in New York City are New Yorkers.\nPeople living in Manhattan live in New York City.", "premises-FOL": "BornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))\n\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))\n\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))", "conclusion": "Asa Hoffmann is a grandmaster.", "conclusion-FOL": "GrandMaster(asaHoffmann)", "label": "Uncertain", "example_id": 232}
{"story_id": 76, "premises": "Asa Hoffmann was born in New York City.\nAsa Hoffman lives in Manhattan.\nAsa Hoffman is a chess player.\nSome chess players are grandmasters.\nPeople born and living in New York City are New Yorkers.\nPeople living in Manhattan live in New York City.", "premises-FOL": "BornIn(asaHoffmann, newYorkCity)\nLiveIn(asaHoffmann, manhattan)\nChessPlayer(asaHoffmann)\n\u2203x \u2203y (ChessPlayer(x) \u2227 GrandMaster(x) \u2227 (\u00ac(x=y)) \u2227 ChessPlayer(y) \u2227 GrandMaster(y))\n\u2200x ((BornIn(x, newYorkCity) \u2227 LiveIn(x, newYorkCity)) \u2192 NewYorker(x))\n\u2200x (LiveIn(x, manhattan) \u2192 LiveIn(x, newYorkCity))", "conclusion": "Asa Hoffmann does not live in New York.", "conclusion-FOL": "\u00acLiveIn(asaHoffmann, newYorkCity)", "label": "False", "example_id": 233}
{"story_id": 313, "premises": "Some of those who apply for a Schengen visa get it.\nTo apply for a Schengen Visa, you need to provide financial guarantees.\nIf you need to provide financial guarantees, you must request documents from the bank.\nDo not close your bank account if you request documents from the bank.\nPhilip closed his bank account.", "premises-FOL": "\u2203x (Apply(x, schengenVisa) \u2192 Get(x, schengenVisa))\n\u2200x (Apply(x, schengenVisa) \u2192 Provide(x, financialGuarantees))\n\u2200x (Provide(x, financialGuarantees) \u2192 Request(x, documentsFromBank))\n\u2200x (Request(x, documentsFromBank) \u2192 \u00acClose(x, bankAccount))\nClose(philip, bankAccount)", "conclusion": "Philip got a Schengen visa.", "conclusion-FOL": "Get(philip, schengenVisa)", "label": "Uncertain", "example_id": 779}
{"story_id": 313, "premises": "Some of those who apply for a Schengen visa get it.\nTo apply for a Schengen Visa, you need to provide financial guarantees.\nIf you need to provide financial guarantees, you must request documents from the bank.\nDo not close your bank account if you request documents from the bank.\nPhilip closed his bank account.", "premises-FOL": "\u2203x (Apply(x, schengenVisa) \u2192 Get(x, schengenVisa))\n\u2200x (Apply(x, schengenVisa) \u2192 Provide(x, financialGuarantees))\n\u2200x (Provide(x, financialGuarantees) \u2192 Request(x, documentsFromBank))\n\u2200x (Request(x, documentsFromBank) \u2192 \u00acClose(x, bankAccount))\nClose(philip, bankAccount)", "conclusion": "Philip applied for a Schengen visa and got it.", "conclusion-FOL": "Apply(philip, schengenVisa) \u2227 Get(philip, schengenVisa)", "label": "False", "example_id": 780}
{"story_id": 313, "premises": "Some of those who apply for a Schengen visa get it.\nTo apply for a Schengen Visa, you need to provide financial guarantees.\nIf you need to provide financial guarantees, you must request documents from the bank.\nDo not close your bank account if you request documents from the bank.\nPhilip closed his bank account.", "premises-FOL": "\u2203x (Apply(x, schengenVisa) \u2192 Get(x, schengenVisa))\n\u2200x (Apply(x, schengenVisa) \u2192 Provide(x, financialGuarantees))\n\u2200x (Provide(x, financialGuarantees) \u2192 Request(x, documentsFromBank))\n\u2200x (Request(x, documentsFromBank) \u2192 \u00acClose(x, bankAccount))\nClose(philip, bankAccount)", "conclusion": "If Philip did not request documents from the bank or get a Schengen visa, he didn\u2019t apply for a Schengen visa.", "conclusion-FOL": "(\u00acRequest(philip, documentsFromBank) \u2227 \u00acGet(x, schengenVisa)) \u2192 Apply(x, schengenVisa)", "label": "True", "example_id": 781}
{"story_id": 296, "premises": "Some fears lead to anxiety.\nSome anxiety leads to terror.", "premises-FOL": "\u2203x \u2203y (Fear(x) \u2227 Anxiety(y) \u2227 LeadTo(x, y) \u2227 \u00ac(x=y))\n\u2203x \u2203y (Anxiety(x) \u2227 Terror(y) \u2227 LeadTo(x, y))", "conclusion": "No fears lead to terror.", "conclusion-FOL": "\u2200x \u2200y (Fear(x) \u2192 \u00ac(Terror(y) \u2227 LeadTo(x, y)))", "label": "Uncertain", "example_id": 740}
{"story_id": 208, "premises": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.\nSome major settlements of Lake Erie are in NY, PA, OH, and MI.\nNY, PA, OH, and MI are states in the US.\nON is a state of Canada.\nThere is a major settlement of Lake Huron in ON. \nAll states are in their country.\nThe US is in North America.\nThe Great Lakes began to form at the end of the Last Glacial Period.", "premises-FOL": "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))\n\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))\nStateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)\nStateOf(oN, canada)\n\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))\n\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))\nIn(us, northAmerica)\n\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))", "conclusion": "Lake Erie has a major settlement.", "conclusion-FOL": "\u2203x \u2203y (Erie(y) \u2227 MajorSettlementOf(x, y))", "label": "True", "example_id": 594}
{"story_id": 208, "premises": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.\nSome major settlements of Lake Erie are in NY, PA, OH, and MI.\nNY, PA, OH, and MI are states in the US.\nON is a state of Canada.\nThere is a major settlement of Lake Huron in ON. \nAll states are in their country.\nThe US is in North America.\nThe Great Lakes began to form at the end of the Last Glacial Period.", "premises-FOL": "\u2200x (GreatLake(x) \u2192 Superior(x) \u2295 Michigan(x) \u2295 Huron(x) \u2295 Erie(x) \u2295 Ontario(x))\n\u2200x (Erie (x) \u2227 MajorSettlement(x) \u2192 In(x, nY) \u2228 In(x, pA) \u2228 In(x, oH) \u2228 In(x, mI))\nStateOf(nY, uS) \u2227 StateOf(pA, uS) \u2227 StateOf(oH, uS) \u2227 StateOf(mI, uS)\nStateOf(oN, canada)\n\u2203x (Huron(x) \u2227 MajorSettlement(x) \u2227 In(x, oN))\n\u2200x \u2200y (StateOf(x, y) \u2192 In(x, y))\nIn(us, northAmerica)\n\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastGlacialPeriod))", "conclusion": "There is a great lake that did not form at the end of the Last Glacial Period.", "conclusion-FOL": "\u2203x (GreatLake(x) \u2227 \u00acFormAtEndOf(x, lastGlacialPeriod))", "label": "False", "example_id": 595}
{"story_id": 325, "premises": "All professional soccer defenders are professional soccer players.\nNo professional soccer players are professional basketball players.\nAll professional centerbacks are professional soccer defenders.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2200x ((Professional(x) \u2227 Defender(x)) \u2192 (Professional(x) \u2227 SoccerPlayer(x)))\n\u2200x ((Professional(x) \u2227 SoccerPlayer(x)) \u2192 \u00ac(Professional(x) \u2227 BasketballPlayer(x)))\n\u2200x ((Professional(x) \u2227 CenterBack(x)) \u2192 (Professional(x) \u2227 Defender(x))\n\u2200x (NBAPlayer(x) \u2192 (Professional(x) \u2227 BasketballPlayer(x)))\nNBAPlayer(stephenCurry)", "conclusion": "Stephen Curry is a professional basketball player.", "conclusion-FOL": "Professional(stephenCurry) \u2227 BasketballPlayer(stephenCurry)", "label": "Uncertain", "example_id": 831}
{"story_id": 325, "premises": "All professional soccer defenders are professional soccer players.\nNo professional soccer players are professional basketball players.\nAll professional centerbacks are professional soccer defenders.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2200x ((Professional(x) \u2227 Defender(x)) \u2192 (Professional(x) \u2227 SoccerPlayer(x)))\n\u2200x ((Professional(x) \u2227 SoccerPlayer(x)) \u2192 \u00ac(Professional(x) \u2227 BasketballPlayer(x)))\n\u2200x ((Professional(x) \u2227 CenterBack(x)) \u2192 (Professional(x) \u2227 Defender(x))\n\u2200x (NBAPlayer(x) \u2192 (Professional(x) \u2227 BasketballPlayer(x)))\nNBAPlayer(stephenCurry)", "conclusion": "Stephen Curry is a professional centerback.", "conclusion-FOL": "Professional(stephenCurry) \u2227 CenterBack(stephenCurry)", "label": "False", "example_id": 832}
{"story_id": 325, "premises": "All professional soccer defenders are professional soccer players.\nNo professional soccer players are professional basketball players.\nAll professional centerbacks are professional soccer defenders.\nAll NBA players are professional basketball players.\nStephen Curry is an NBA player.", "premises-FOL": "\u2200x ((Professional(x) \u2227 Defender(x)) \u2192 (Professional(x) \u2227 SoccerPlayer(x)))\n\u2200x ((Professional(x) \u2227 SoccerPlayer(x)) \u2192 \u00ac(Professional(x) \u2227 BasketballPlayer(x)))\n\u2200x ((Professional(x) \u2227 CenterBack(x)) \u2192 (Professional(x) \u2227 Defender(x))\n\u2200x (NBAPlayer(x) \u2192 (Professional(x) \u2227 BasketballPlayer(x)))\nNBAPlayer(stephenCurry)", "conclusion": "Stephen Curry is not a centerback.", "conclusion-FOL": "\u00ac(Professional(stephenCurry) \u2227 CenterBack(stephenCurry))", "label": "True", "example_id": 833}
{"story_id": 31, "premises": "Naive cynicism was proposed by Justin Kruger and a colleague.\nThomas Gilovich is a colleague of Justin Kruger. \nNaive cynicism is a philosophy of mind.", "premises-FOL": "Proposed(justinKruger, naiveCynicism) \u2227 \u2203y (colleagueOfJustinKruger(y) \u2227 Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)", "conclusion": "Thomas Gilovich proposed naive cynicism.", "conclusion-FOL": "Proposed(thomasGilovich, naiveCynicism)", "label": "Uncertain", "example_id": 89}
{"story_id": 31, "premises": "Naive cynicism was proposed by Justin Kruger and a colleague.\nThomas Gilovich is a colleague of Justin Kruger. \nNaive cynicism is a philosophy of mind.", "premises-FOL": "Proposed(justinKruger, naiveCynicism) \u2227 \u2203y (colleagueOfJustinKruger(y) \u2227 Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)", "conclusion": "Justin Kruger proposed a philosophy of mind.", "conclusion-FOL": "\u2203x (Proposed(justinKruger, x) \u2227 PhilosophyOfMind(x))", "label": "True", "example_id": 90}
{"story_id": 31, "premises": "Naive cynicism was proposed by Justin Kruger and a colleague.\nThomas Gilovich is a colleague of Justin Kruger. \nNaive cynicism is a philosophy of mind.", "premises-FOL": "Proposed(justinKruger, naiveCynicism) \u2227 \u2203y (colleagueOfJustinKruger(y) \u2227 Proposed(y, naiveCynicism))\nColleagues(thomasGilovich, justinKruger)\nPhilosophyOfMind(naiveCynicism)", "conclusion": "Thomas Gilovich worked on philosophies of mind.", "conclusion-FOL": "\u2203x (WorkedOn(thomasGilovich, x) \u2227 PhilosophyOfMind(x))", "label": "Uncertain", "example_id": 91}
{"story_id": 129, "premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "conclusion": "At least two people who have won the Turing Award worked in artificial intelligence.", "conclusion-FOL": "\u2203x \u2203y (\u00ac(x=y) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(x, artificialIntelligence)  \u2227 ContributedTo(y, artificialIntelligence))", "label": "True", "example_id": 382}
{"story_id": 129, "premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "conclusion": "At least two people who worked in artificial intelligence have won the Turing Award.", "conclusion-FOL": "\u2203x \u2203y (\u00ac(x=y) \u2227 ContributedTo(x, artificialIntelligence) \u2227 ContributedTo(x, artificialIntelligence) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y))", "label": "True", "example_id": 383}
{"story_id": 129, "premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "conclusion": "Only one person who won the Turing Award made significant contributions to the analysis of algorithms.", "conclusion-FOL": "\u2203x \u2200y ((AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(y, algorithms) \u2227 \u00ac(x=y)) \u2192 \u00acContributedTo(y, algorithms))", "label": "Uncertain", "example_id": 384}
{"story_id": 129, "premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "conclusion": "No Turing Award winners worked in the field of numerical methods.", "conclusion-FOL": "\u2200x (AwardedTo(turingAward, x) \u2192 \u00acContributedTo(x, numericalMethods))", "label": "False", "example_id": 385}
{"story_id": 429, "premises": "None of the easy Leetcode problems have an AC rate lower than 20 percent. \nAll Leetcode problems recommended to novices are easy. \nLeetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. \nAll hard Leetcode problems are starred by more than 1,000 users. \nNo Leetcode problems published after 2022 are starred by more than 1,000 users. \n'2Sum' is not both hard and also recommended to novices.\n'4Sum' is either starred by more than 1,000 users and published after 2022, or it is neither. ", "premises-FOL": "\u2200x ((LeetcodeProblems(x) \u2227 Easy(x)) \u2192 \u00acHaveAnACRateLowerThan(x, percent20))\n\u2200x ((LeetcodeProblems(x) \u2227 RecommendedTo(x, novices)) \u2192 Easy(x))\n\u2200x (LeetcodeProblems(x) \u2192 HaveAnACRateLowerThan(x, percent20) \u2295 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 Hard(x)) \u2192 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 PublishedAfter(x, yr2022)) \u2192 (\u00acStarredByMoreThan(x, num1000)))\n\u00ac(RecommendedTo(twosum, novices) \u2227 Hard(twosum)) \u2227 LeetcodeProblems(twosum)\n\u00ac(StarredByMoreThan(foursum, num1000) \u2295 PublishedAfter(foursum, yr2022)) \u2227 LeetcodeProblems(twosum)", "conclusion": "2Sum is an easy Leetcode problem.", "conclusion-FOL": "LeetcodeProblems(twosum) \u2227 Easy(twosum)", "label": "Uncertain", "example_id": 1219}
{"story_id": 429, "premises": "None of the easy Leetcode problems have an AC rate lower than 20 percent. \nAll Leetcode problems recommended to novices are easy. \nLeetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. \nAll hard Leetcode problems are starred by more than 1,000 users. \nNo Leetcode problems published after 2022 are starred by more than 1,000 users. \n'2Sum' is not both hard and also recommended to novices.\n'4Sum' is either starred by more than 1,000 users and published after 2022, or it is neither. ", "premises-FOL": "\u2200x ((LeetcodeProblems(x) \u2227 Easy(x)) \u2192 \u00acHaveAnACRateLowerThan(x, percent20))\n\u2200x ((LeetcodeProblems(x) \u2227 RecommendedTo(x, novices)) \u2192 Easy(x))\n\u2200x (LeetcodeProblems(x) \u2192 HaveAnACRateLowerThan(x, percent20) \u2295 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 Hard(x)) \u2192 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 PublishedAfter(x, yr2022)) \u2192 (\u00acStarredByMoreThan(x, num1000)))\n\u00ac(RecommendedTo(twosum, novices) \u2227 Hard(twosum)) \u2227 LeetcodeProblems(twosum)\n\u00ac(StarredByMoreThan(foursum, num1000) \u2295 PublishedAfter(foursum, yr2022)) \u2227 LeetcodeProblems(twosum)", "conclusion": "2Sum is not an easy Leetcode problem.", "conclusion-FOL": "\u00ac(LeetcodeProblems(twosum) \u2227 Easy(twosum))", "label": "Uncertain", "example_id": 1220}
{"story_id": 429, "premises": "None of the easy Leetcode problems have an AC rate lower than 20 percent. \nAll Leetcode problems recommended to novices are easy. \nLeetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. \nAll hard Leetcode problems are starred by more than 1,000 users. \nNo Leetcode problems published after 2022 are starred by more than 1,000 users. \n'2Sum' is not both hard and also recommended to novices.\n'4Sum' is either starred by more than 1,000 users and published after 2022, or it is neither. ", "premises-FOL": "\u2200x ((LeetcodeProblems(x) \u2227 Easy(x)) \u2192 \u00acHaveAnACRateLowerThan(x, percent20))\n\u2200x ((LeetcodeProblems(x) \u2227 RecommendedTo(x, novices)) \u2192 Easy(x))\n\u2200x (LeetcodeProblems(x) \u2192 HaveAnACRateLowerThan(x, percent20) \u2295 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 Hard(x)) \u2192 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 PublishedAfter(x, yr2022)) \u2192 (\u00acStarredByMoreThan(x, num1000)))\n\u00ac(RecommendedTo(twosum, novices) \u2227 Hard(twosum)) \u2227 LeetcodeProblems(twosum)\n\u00ac(StarredByMoreThan(foursum, num1000) \u2295 PublishedAfter(foursum, yr2022)) \u2227 LeetcodeProblems(twosum)", "conclusion": "4Sum is recommended to novices or is hard.", "conclusion-FOL": "RecommendedTo(foursum, novices) \u2228 Hard(foursum)", "label": "False", "example_id": 1221}
{"story_id": 429, "premises": "None of the easy Leetcode problems have an AC rate lower than 20 percent. \nAll Leetcode problems recommended to novices are easy. \nLeetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. \nAll hard Leetcode problems are starred by more than 1,000 users. \nNo Leetcode problems published after 2022 are starred by more than 1,000 users. \n'2Sum' is not both hard and also recommended to novices.\n'4Sum' is either starred by more than 1,000 users and published after 2022, or it is neither. ", "premises-FOL": "\u2200x ((LeetcodeProblems(x) \u2227 Easy(x)) \u2192 \u00acHaveAnACRateLowerThan(x, percent20))\n\u2200x ((LeetcodeProblems(x) \u2227 RecommendedTo(x, novices)) \u2192 Easy(x))\n\u2200x (LeetcodeProblems(x) \u2192 HaveAnACRateLowerThan(x, percent20) \u2295 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 Hard(x)) \u2192 StarredByMoreThan(x, num1000))\n\u2200x ((LeetcodeProblems(x) \u2227 PublishedAfter(x, yr2022)) \u2192 (\u00acStarredByMoreThan(x, num1000)))\n\u00ac(RecommendedTo(twosum, novices) \u2227 Hard(twosum)) \u2227 LeetcodeProblems(twosum)\n\u00ac(StarredByMoreThan(foursum, num1000) \u2295 PublishedAfter(foursum, yr2022)) \u2227 LeetcodeProblems(twosum)", "conclusion": "4Sum is neither recommended to the novice nor a Leetcode problem that's hard.", "conclusion-FOL": "\u00acRecommendedTo(foursum, novices) \u2227 \u00acHard(foursum)", "label": "True", "example_id": 1222}
{"story_id": 105, "premises": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.\nThe lead single of the extended play Inside is Show Your Love.\nShow Your Love contains a hopeful message.\nBtoB 4u member Hyunsik wrote Show Your Love.\nThere is a music video for Show Your Love.", "premises-FOL": "Song(showYourLove) \u2227 RecordedBy(showYourLove, bToB4u) \u2227 SouthKorean(bToB4u) \u2227 BoyBand(bToB4u)\nExtendedPlay(inside) \u2227 LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) \u2227 Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)", "conclusion": "Show Your Love wasn't written by a member of a boy band.", "conclusion-FOL": "\u2200x \u2200y (Wrote(x, showYourLove) \u2192 \u00ac(BoyBand(y) \u2227 MemberOf(x, y)))", "label": "False", "example_id": 318}
{"story_id": 105, "premises": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.\nThe lead single of the extended play Inside is Show Your Love.\nShow Your Love contains a hopeful message.\nBtoB 4u member Hyunsik wrote Show Your Love.\nThere is a music video for Show Your Love.", "premises-FOL": "Song(showYourLove) \u2227 RecordedBy(showYourLove, bToB4u) \u2227 SouthKorean(bToB4u) \u2227 BoyBand(bToB4u)\nExtendedPlay(inside) \u2227 LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) \u2227 Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)", "conclusion": "A lead single of Inside contains a hopeful message.", "conclusion-FOL": "\u2203x (LeadSingleOf(x, inside) \u2227 Contains(x, hopefulMessage))", "label": "True", "example_id": 319}
{"story_id": 105, "premises": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.\nThe lead single of the extended play Inside is Show Your Love.\nShow Your Love contains a hopeful message.\nBtoB 4u member Hyunsik wrote Show Your Love.\nThere is a music video for Show Your Love.", "premises-FOL": "Song(showYourLove) \u2227 RecordedBy(showYourLove, bToB4u) \u2227 SouthKorean(bToB4u) \u2227 BoyBand(bToB4u)\nExtendedPlay(inside) \u2227 LeadSingleOf(showYourLove, inside)\nContains(showYourLove, hopefulMessage)\nMember(hyunsik, btob4u) \u2227 Wrote(hyunsik, showYourLove)\nHave(showYourLove, musicVideo)", "conclusion": "Hyunsik is Korean.", "conclusion-FOL": "Korean(hyunsik)", "label": "Uncertain", "example_id": 320}
{"story_id": 290, "premises": "All tables are round.\nSome pieces of furniture are tables.", "premises-FOL": "\u2200x (Table(x) \u2192 Round(x))\n\u2203x \u2203y (Furniture(x) \u2227 Furniture(y) \u2227 Table(x) \u2227 Table(y) \u2227 \u00ac(x=y))", "conclusion": "Some pieces of furniture are round.", "conclusion-FOL": "\u2203x \u2203y (Furniture(x) \u2227 Furniture(y) \u2227 Round(x) \u2227 Round(y) \u2227 \u00ac(x=y))", "label": "True", "example_id": 734}
{"story_id": 267, "premises": "All juvenile delinquents have committed a crime.\nSome juvenile delinquents are products of broken homes.", "premises-FOL": "\u2200x (JuvenileDelinquent(x) \u2192 Commited(x, crime))\n\u2203x \u2203y (JuvenileDelinquent(x) \u2227 JuvenileDelinquent(y) \u2227 ProductOf(x, brokenHome) \u2227 ProductOf(y, brokenHome) \u2227 \u00ac(x=y))", "conclusion": "Some people who have committed a crime are products of broken homes.", "conclusion-FOL": "\u2203x \u2203y (Commited(x, crime) \u2227 Commited(y, crime) \u2227 ProductOf(x, brokenHome) \u2227 ProductOf(y, brokenHome) \u2227 \u00ac(x=y))", "label": "True", "example_id": 711}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "Multivoxel (pattern) analysis is a brain decoding.", "conclusion-FOL": "MindReading(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)", "label": "Uncertain", "example_id": 1084}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "Multivoxel (pattern) analysis is the writing of a novel.", "conclusion-FOL": "MindReading(multivoxelPatternAnalysis) \u2227 NovelWriting(multivoxelPatternAnalysis)", "label": "False", "example_id": 1085}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.", "conclusion-FOL": "\u00ac(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 NovelWriting(multivoxelPatternAnalysis))", "label": "False", "example_id": 1086}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.", "conclusion-FOL": "\u00ac(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2228 NovelWriting(multivoxelPatternAnalysis))", "label": "False", "example_id": 1087}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.", "conclusion-FOL": "\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2295 Writing(multivoxelPatternAnalysis, aNovel)", "label": "False", "example_id": 1088}
{"story_id": 398, "premises": "All mind-reading is either brain reading or brain decoding. \nAll brain decoding that is mind-reading is extracting information from BOLD signals.\nNo studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. \nWriting a novel is without statistical pattern analysis.\nIf multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\nMultivoxel (pattern) analysis is a type of mind-reading.", "premises-FOL": "\u2200x (MindReading(x) \u2227 (BrainReading(x) \u2295 BrainDecoding(x)))\n\u2200x ((MindReading(x) \u2227 BrainDecoding(x)) \u2192 ExtractingFrom(x, information, bOLDSignals))\n\u2200x ((MindReading(x) \u2227 ExtractingFrom(x, information, bOLDSignals)) \u2192 Uses(x, statisticalPatternAnalysis))\n\u2200x (NovelWriting(x) \u2192 \u00acUses(x, statisticalPatternAnalysis)) \nMindReading(multivoxelPatternAnalysis) \u2227 (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis)) \u2192  (\u00acUses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2227 (\u00acBrainDecoding(multivoxelPatternAnalysis)))\nMindReading(multivoxelPatternAnalysis) ", "conclusion": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.", "conclusion-FOL": "(MindReading(multivoxelPatternAnalysis) \u2227 NovelWriting(multivoxelPatternAnalysis)) \u2192 (Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) \u2228 \u00acNovelWriting(multivoxelPatternAnalysis))", "label": "True", "example_id": 1089}
{"story_id": 212, "premises": "If you have room for dessert, you have room for broccoli.\nEveryone at Luis's dinner party has room for dessert, including Luis.\nMauricia does not have room for broccoli.\nLuis's dinner party is the first ever dinner party that Allison has attended.\nGustave has room for both broccoli and asparagus.\nBroccoli and asparagus are both vegetables.", "premises-FOL": "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))\n\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))\n\u00acRoomFor(mauricia, broccoli)\nAtLuisParty(allison) \u2227 FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)\nVegetable(broccoli) \u2227 Vegetable(asparagus)", "conclusion": "Allison has room for broccoli.", "conclusion-FOL": "RoomFor(allison, broccoli)", "label": "True", "example_id": 605}
{"story_id": 212, "premises": "If you have room for dessert, you have room for broccoli.\nEveryone at Luis's dinner party has room for dessert, including Luis.\nMauricia does not have room for broccoli.\nLuis's dinner party is the first ever dinner party that Allison has attended.\nGustave has room for both broccoli and asparagus.\nBroccoli and asparagus are both vegetables.", "premises-FOL": "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))\n\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))\n\u00acRoomFor(mauricia, broccoli)\nAtLuisParty(allison) \u2227 FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)\nVegetable(broccoli) \u2227 Vegetable(asparagus)", "conclusion": "Mauricia is at Luis's dinner party.", "conclusion-FOL": "AtLuisParty(mauricia)", "label": "False", "example_id": 606}
{"story_id": 212, "premises": "If you have room for dessert, you have room for broccoli.\nEveryone at Luis's dinner party has room for dessert, including Luis.\nMauricia does not have room for broccoli.\nLuis's dinner party is the first ever dinner party that Allison has attended.\nGustave has room for both broccoli and asparagus.\nBroccoli and asparagus are both vegetables.", "premises-FOL": "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))\n\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))\n\u00acRoomFor(mauricia, broccoli)\nAtLuisParty(allison) \u2227 FirstDinnerPartyFor(luisparty, allison) \nRoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)\nVegetable(broccoli) \u2227 Vegetable(asparagus)", "conclusion": "Gustav has room for dessert.", "conclusion-FOL": "RoomFor(gustave, dessert)", "label": "Uncertain", "example_id": 607}
{"story_id": 43, "premises": "Imagine Dragons are an American pop-rock band.\nThe lead singer of Imagine Dragons is Dan.\nDan is also a songwriter.\nAll lead singers are singers.\nAll singers are musicians.\nDemons is one of the most popular singles of Imagine Dragons.\nSome singles of Imagine Dragons have been on Billboard Hot 100.", "premises-FOL": "American(imagineDragon) \u2227 RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))\n\u2200x (Singer(x) \u2192 Musician(x))\nPopularSingle(imagineDragon, demons)\n\u2203x \u2203y (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x)) \u2227 (\u00ac(x=y)) \u2227 (PopularSingle(imagineDragon, y) \u2227 BillboardHot100(y))", "conclusion": "Some rock band has a lead singer who is also a songwriter.", "conclusion-FOL": "\u2203x \u2203y (RockBand(x) \u2227 LeadSinger(x, y) \u2227 SongWriter(y))", "label": "True", "example_id": 123}
{"story_id": 43, "premises": "Imagine Dragons are an American pop-rock band.\nThe lead singer of Imagine Dragons is Dan.\nDan is also a songwriter.\nAll lead singers are singers.\nAll singers are musicians.\nDemons is one of the most popular singles of Imagine Dragons.\nSome singles of Imagine Dragons have been on Billboard Hot 100.", "premises-FOL": "American(imagineDragon) \u2227 RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))\n\u2200x (Singer(x) \u2192 Musician(x))\nPopularSingle(imagineDragon, demons)\n\u2203x \u2203y (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x)) \u2227 (\u00ac(x=y)) \u2227 (PopularSingle(imagineDragon, y) \u2227 BillboardHot100(y))", "conclusion": "Dan is not a musician.", "conclusion-FOL": "\u00acMusician(dan)", "label": "False", "example_id": 124}
{"story_id": 43, "premises": "Imagine Dragons are an American pop-rock band.\nThe lead singer of Imagine Dragons is Dan.\nDan is also a songwriter.\nAll lead singers are singers.\nAll singers are musicians.\nDemons is one of the most popular singles of Imagine Dragons.\nSome singles of Imagine Dragons have been on Billboard Hot 100.", "premises-FOL": "American(imagineDragon) \u2227 RockBand(imagineDragon)\nLeadSinger(imagineDragon, dan)\nSongWriter(dan)\n\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))\n\u2200x (Singer(x) \u2192 Musician(x))\nPopularSingle(imagineDragon, demons)\n\u2203x \u2203y (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x)) \u2227 (\u00ac(x=y)) \u2227 (PopularSingle(imagineDragon, y) \u2227 BillboardHot100(y))", "conclusion": "Demons has been on Billboard Hot 100.", "conclusion-FOL": "BillboardHot100(demons)", "label": "Uncertain", "example_id": 125}
{"story_id": 455, "premises": "All philosophers reason. \nSome sophists reason. \nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.  \nThe theistic God is morally perfect.", "premises-FOL": "\u2200x (Philosopher(x) \u2192 Reason(x))\n\u2203x (Sophist(x) \u2227 Reason(x))\n\u2200x (Reason(x) \u2192 CanDistinguishFrom(x, truth, falsehood))\n\u2200x (CanDistinguishFrom(x, truth, falsehood) \u2192 \u00acMorallyPerfect(x))\nMorallyPerfect(theisticGod)", "conclusion": "The theistic God is a sophist.", "conclusion-FOL": "Sophist(theisticGod)", "label": "Uncertain", "example_id": 1310}
{"story_id": 455, "premises": "All philosophers reason. \nSome sophists reason. \nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.  \nThe theistic God is morally perfect.", "premises-FOL": "\u2200x (Philosopher(x) \u2192 Reason(x))\n\u2203x (Sophist(x) \u2227 Reason(x))\n\u2200x (Reason(x) \u2192 CanDistinguishFrom(x, truth, falsehood))\n\u2200x (CanDistinguishFrom(x, truth, falsehood) \u2192 \u00acMorallyPerfect(x))\nMorallyPerfect(theisticGod)", "conclusion": "The theistic God is a sophist and a philosopher.", "conclusion-FOL": "Sophist(theisticGod) \u2227 Philosopher(theisticGod)", "label": "False", "example_id": 1311}
{"story_id": 455, "premises": "All philosophers reason. \nSome sophists reason. \nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.  \nThe theistic God is morally perfect.", "premises-FOL": "\u2200x (Philosopher(x) \u2192 Reason(x))\n\u2203x (Sophist(x) \u2227 Reason(x))\n\u2200x (Reason(x) \u2192 CanDistinguishFrom(x, truth, falsehood))\n\u2200x (CanDistinguishFrom(x, truth, falsehood) \u2192 \u00acMorallyPerfect(x))\nMorallyPerfect(theisticGod)", "conclusion": "if the theistic God is a philosopher, then he is not a sophist.", "conclusion-FOL": "Philosopher(theisticGod) \u2192 \u00acSophist(theisticGod)", "label": "True", "example_id": 1312}
{"story_id": 160, "premises": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.\nMany apartment rents cover the cost of water and electricity.\nSusan lives in an apartment where the rent covers all utilities.\nThe rent of the apartment where Ava lives does not cover any utility expenses.\nNoah lives in an apartment where the rent does not cover heating.", "premises-FOL": "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)\n\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))\n\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))", "conclusion": "Noah needs to pay the water bill.", "conclusion-FOL": "\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, water))", "label": "Uncertain", "example_id": 458}
{"story_id": 160, "premises": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.\nMany apartment rents cover the cost of water and electricity.\nSusan lives in an apartment where the rent covers all utilities.\nThe rent of the apartment where Ava lives does not cover any utility expenses.\nNoah lives in an apartment where the rent does not cover heating.", "premises-FOL": "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)\n\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))\n\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))", "conclusion": "Noah and Ava both need to pay the heating bill.", "conclusion-FOL": "\u00acCover(noah, heating) \u2227 \u00acCover(ava, heating)", "label": "True", "example_id": 459}
{"story_id": 160, "premises": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.\nMany apartment rents cover the cost of water and electricity.\nSusan lives in an apartment where the rent covers all utilities.\nThe rent of the apartment where Ava lives does not cover any utility expenses.\nNoah lives in an apartment where the rent does not cover heating.", "premises-FOL": "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)\n\u2203x (Apartment(x) \u2227 Cover(x, water) \u2227 Cover(x, electricity))\n\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water) \u2227 Cover(x, electricity) \u2227 Cover(x, gas) \u2227 Cover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(ava, x) \u2227 \u00acCover(x, water) \u2227 \u00acCover(x, electricity) \u2227 \u00acCover(x, gas) \u2227 \u00acCover(x, heating))\n\u2200x (Apartment(x) \u2227 LiveIn(noah, x) \u2227 \u00acCover(x, heating))", "conclusion": "Susan does not need to pay the water bill.", "conclusion-FOL": "\u2200x (Apartment(x) \u2227 LiveIn(susan, x) \u2227 Cover(x, water))", "label": "True", "example_id": 460}
{"story_id": 317, "premises": "All clothes are products. \nNo products are perfect. \nAll dresses are clothes.\nAll skirts are dresses. \nIf the fabric bundle is a piece of clothing, then the fabric bundle is a perfect dress.", "premises-FOL": "\u2200x (Clothes(x) \u2192 Product(x))\n\u2200x (Product(x) \u2192 \u00acPerfect(x))\n\u2200x (Dress(x) \u2192 Clothes(x))\n\u2200x (Skirt(x) \u2192 Dress(x))\nClothes(fabricBundle) \u2192 Perfect(fabricBundle) \u2227 Dress(fabricBundle)", "conclusion": "The fabric bundle is perfect.", "conclusion-FOL": "Perfect(fabricbundle)", "label": "Uncertain", "example_id": 799}
{"story_id": 317, "premises": "All clothes are products. \nNo products are perfect. \nAll dresses are clothes.\nAll skirts are dresses. \nIf the fabric bundle is a piece of clothing, then the fabric bundle is a perfect dress.", "premises-FOL": "\u2200x (Clothes(x) \u2192 Product(x))\n\u2200x (Product(x) \u2192 \u00acPerfect(x))\n\u2200x (Dress(x) \u2192 Clothes(x))\n\u2200x (Skirt(x) \u2192 Dress(x))\nClothes(fabricBundle) \u2192 Perfect(fabricBundle) \u2227 Dress(fabricBundle)", "conclusion": "The fabric bundle is a skirt.", "conclusion-FOL": "Skirt(fabricbundle)", "label": "False", "example_id": 800}
{"story_id": 317, "premises": "All clothes are products. \nNo products are perfect. \nAll dresses are clothes.\nAll skirts are dresses. \nIf the fabric bundle is a piece of clothing, then the fabric bundle is a perfect dress.", "premises-FOL": "\u2200x (Clothes(x) \u2192 Product(x))\n\u2200x (Product(x) \u2192 \u00acPerfect(x))\n\u2200x (Dress(x) \u2192 Clothes(x))\n\u2200x (Skirt(x) \u2192 Dress(x))\nClothes(fabricBundle) \u2192 Perfect(fabricBundle) \u2227 Dress(fabricBundle)", "conclusion": "The fabric bundle is not a skirt.", "conclusion-FOL": "\u00acSkirt(fabricbundle)", "label": "True", "example_id": 801}
{"story_id": 57, "premises": "All pets are animals.\nPets can be either a dog or a cat.\nIf a person has a pet, they care for that pet. \nDogs and cats can be naughty. \nPets who are naughty are not liked as much. \nCharlie has a naughty pet dog named Leo. ", "premises-FOL": "\u2200x (Pet(x) \u2192 Animal(x))\n\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))\n\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))\n\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))\n\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))\nOwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)", "conclusion": "Leo is an animal.", "conclusion-FOL": "Animal(leo)", "label": "True", "example_id": 168}
{"story_id": 57, "premises": "All pets are animals.\nPets can be either a dog or a cat.\nIf a person has a pet, they care for that pet. \nDogs and cats can be naughty. \nPets who are naughty are not liked as much. \nCharlie has a naughty pet dog named Leo. ", "premises-FOL": "\u2200x (Pet(x) \u2192 Animal(x))\n\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))\n\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))\n\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))\n\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))\nOwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)", "conclusion": "Charlie does not like Leo and does not care for Leo.", "conclusion-FOL": "\u00acLiked(leo, charlie) \u2227 \u00acCares(charlie, leo)", "label": "False", "example_id": 169}
{"story_id": 57, "premises": "All pets are animals.\nPets can be either a dog or a cat.\nIf a person has a pet, they care for that pet. \nDogs and cats can be naughty. \nPets who are naughty are not liked as much. \nCharlie has a naughty pet dog named Leo. ", "premises-FOL": "\u2200x (Pet(x) \u2192 Animal(x))\n\u2200x (Pet(x) \u2192 (Dog(x) \u2295 Cat(x)))\n\u2200x \u2200y ((Pet(y) \u2227 OwnedBy(x,y)) \u2192 Cares(x, y))\n\u2203x \u2203y (Cat(x) \u2227 Naughty(x) \u2227 (\u00ac(x=y)) \u2227 Dog(y) \u2227 Naughty(y))\n\u2200x \u2200y ((Pet(x) \u2227 Naughty(x) \u2227 OwnedBy(x,y)) \u2192 \u00acLiked(x, y))\nOwnedBy(leo, charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)", "conclusion": "Dogs are not always naughty.", "conclusion-FOL": "\u2200x (Dog(x) \u2192 \u00acNaughty(x))", "label": "False", "example_id": 170}
{"story_id": 279, "premises": "Surprises are either fun or dreadful.\nAll scares are surprises.", "premises-FOL": "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))\n\u2200x (Scare(x) \u2192 Surprise(x))", "conclusion": "All scares are fun.", "conclusion-FOL": "\u2200x (Scare(x) \u2192 Fun(x))", "label": "Uncertain", "example_id": 723}
{"story_id": 23, "premises": "All books written by Cixin Liu have sold more than 1 million copies. \nSome books that have won the Hugo Award were written by Cixin Liu.\nAll books about the future are forward-looking.\nThe book Three-Body Problem has sold more than 1 million copies.\nThe Three-Body Problem is about the future.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))\n\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))\n\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))\nBook(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)", "conclusion": "The Three-Body Problem won the Hugo Award.", "conclusion-FOL": "Won(threeBodyProblem, hugoAward)", "label": "Uncertain", "example_id": 66}
{"story_id": 23, "premises": "All books written by Cixin Liu have sold more than 1 million copies. \nSome books that have won the Hugo Award were written by Cixin Liu.\nAll books about the future are forward-looking.\nThe book Three-Body Problem has sold more than 1 million copies.\nThe Three-Body Problem is about the future.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))\n\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))\n\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))\nBook(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)", "conclusion": "The Three-Body Problem is forward-looking.", "conclusion-FOL": "AboutFuture(threeBodyProblem)", "label": "True", "example_id": 67}
{"story_id": 23, "premises": "All books written by Cixin Liu have sold more than 1 million copies. \nSome books that have won the Hugo Award were written by Cixin Liu.\nAll books about the future are forward-looking.\nThe book Three-Body Problem has sold more than 1 million copies.\nThe Three-Body Problem is about the future.", "premises-FOL": "\u2200x ((Book(x) \u2227 WrittenBy(x, cixinLiu)) \u2192 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(x,y)))\n\u2203x (Won(x, hugoAward) \u2227 Book(x) \u2227 WrittenBy(x, cixinLiu))\n\u2200x ((Book(x) \u2227 AboutFuture(x)) \u2192 FowardLooking(x))\nBook(threeBodyProblem) \u2227 \u2203y(MoreThan(y, oneMillion) \u2227 Sold(threeBodyProblem,y))\nAboutFuture(threeBodyProblem)", "conclusion": "The Three-Body Problem was written by Cixin Liu.", "conclusion-FOL": "WrittenBy(threeBodyProblem, cixinLiu)", "label": "Uncertain", "example_id": 68}
{"story_id": 420, "premises": "Some people are both late-night and early-morning people.\nIf a person is an earl- morning person, they have early-morning habits.\nEveryone who has early-morning habits gets up early.\nEveryone who gets up early catches the sunrise.\nJames doesn't catch the sunrise.", "premises-FOL": "\u2203x (LateNightPerson(x) \u2227 EarlyMorningPerson(x))\n\u2200x (EarlyMorningPerson(x) \u2192 Have(x, earlyMorningHabit))\n\u2200x (Have(x, earlyMorningHabit) \u2192 GetUpEarly(x))\n\u2200x (GetUpEarly(x) \u2192 CatchTheSunrise(x))\n\u00acCatchTheSunrise(james)", "conclusion": "James is a late night person.", "conclusion-FOL": "LateNightPerson(james)", "label": "Uncertain", "example_id": 1184}
{"story_id": 420, "premises": "Some people are both late-night and early-morning people.\nIf a person is an earl- morning person, they have early-morning habits.\nEveryone who has early-morning habits gets up early.\nEveryone who gets up early catches the sunrise.\nJames doesn't catch the sunrise.", "premises-FOL": "\u2203x (LateNightPerson(x) \u2227 EarlyMorningPerson(x))\n\u2200x (EarlyMorningPerson(x) \u2192 Have(x, earlyMorningHabit))\n\u2200x (Have(x, earlyMorningHabit) \u2192 GetUpEarly(x))\n\u2200x (GetUpEarly(x) \u2192 CatchTheSunrise(x))\n\u00acCatchTheSunrise(james)", "conclusion": "James is a late night person and an early-morning person.", "conclusion-FOL": "LateNightPerson(james) \u2227 EarlyMorningPerson(james)", "label": "False", "example_id": 1185}
{"story_id": 420, "premises": "Some people are both late-night and early-morning people.\nIf a person is an earl- morning person, they have early-morning habits.\nEveryone who has early-morning habits gets up early.\nEveryone who gets up early catches the sunrise.\nJames doesn't catch the sunrise.", "premises-FOL": "\u2203x (LateNightPerson(x) \u2227 EarlyMorningPerson(x))\n\u2200x (EarlyMorningPerson(x) \u2192 Have(x, earlyMorningHabit))\n\u2200x (Have(x, earlyMorningHabit) \u2192 GetUpEarly(x))\n\u2200x (GetUpEarly(x) \u2192 CatchTheSunrise(x))\n\u00acCatchTheSunrise(james)", "conclusion": "If James is an early-morning person, then he is a late night person.", "conclusion-FOL": "EarlyMorningPerson(james) \u2192 LateNightPerson(james)", "label": "True", "example_id": 1186}
{"story_id": 272, "premises": "There is no dog on the roof.\nIf there is a dog on the roof, something went wrong.", "premises-FOL": "\u2200x (Dog(x) \u2192 \u00acOnRoof(x)))\n\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 GoWrong(y))", "conclusion": "Something went wrong.", "conclusion-FOL": "\u2203x (GoWrong(x))", "label": "Uncertain", "example_id": 716}
{"story_id": 15, "premises": "Elephantopus is a genus of perennial plants in the daisy family.\nElephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.\nSeveral species of Elephantopus are native to the southeastern United States.\nElephantopus scaber is a traditional medicine.", "premises-FOL": "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))\n\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))\n\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))\n\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))", "conclusion": "Elephantopus is found in Australia and Southern Asia.", "conclusion-FOL": "\u2203x\u2203y(Elephantopus(x) \u2227 In(x,africa) \u2227 Elephantopus(y) \u2227 In(y,africa))", "label": "True", "example_id": 41}
{"story_id": 15, "premises": "Elephantopus is a genus of perennial plants in the daisy family.\nElephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.\nSeveral species of Elephantopus are native to the southeastern United States.\nElephantopus scaber is a traditional medicine.", "premises-FOL": "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))\n\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))\n\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))\n\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))", "conclusion": "No Elephantopus is native to the southeastern United States.", "conclusion-FOL": "\u2200x (Elephantopus(x) \u2192 \u00acNativeTo(x, southeasternunitedstates))", "label": "False", "example_id": 42}
{"story_id": 15, "premises": "Elephantopus is a genus of perennial plants in the daisy family.\nElephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.\nSeveral species of Elephantopus are native to the southeastern United States.\nElephantopus scaber is a traditional medicine.", "premises-FOL": "\u2200x (Elephantopus(x) \u2192 (Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily)))\n\u2203x \u2203y \u2203z(Elephantopus(x) \u2227 In(x,africa) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 In(y, southernasia) \u2227 (\u00ac(x=z)) \u2227 (\u00ac(y=z)) \u2227 Elephantopus(z) \u2227 In(z, australia))\n\u2203x \u2203y (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates) \u2227 (\u00ac(x=y)) \u2227 Elephantopus(y) \u2227 NativeTo(y, southeasternunitedstates))\n\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))", "conclusion": "Elephantopus is a traditional medicine.", "conclusion-FOL": "\u2200x (Elephantopus(x) \u2192 TraditionalMedicine(x))", "label": "Uncertain", "example_id": 43}
{"story_id": 432, "premises": "All Yale dormitories are located on the Yale campus. \nAll Yale buildings managed by Yale Housing are dormitories. \nAll Yale buildings operated by Yale Housing staff are managed by Yale Housing. \nNone of the Yale buildings open to students were built before 1701. \nAll Yale buildings located on the Yale campus are open to students. \nHarkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. ", "premises-FOL": "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))\n\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))\n\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))\n\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))\n\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))\nYaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))", "conclusion": "Harkness is a Yale dormitory.", "conclusion-FOL": "YaleDormitory(harkness)", "label": "Uncertain", "example_id": 1231}
{"story_id": 432, "premises": "All Yale dormitories are located on the Yale campus. \nAll Yale buildings managed by Yale Housing are dormitories. \nAll Yale buildings operated by Yale Housing staff are managed by Yale Housing. \nNone of the Yale buildings open to students were built before 1701. \nAll Yale buildings located on the Yale campus are open to students. \nHarkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. ", "premises-FOL": "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))\n\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))\n\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))\n\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))\n\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))\nYaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))", "conclusion": "Harkness is not a Yale dormitory.", "conclusion-FOL": "\u00acYaleDormitory(harkness)", "label": "Uncertain", "example_id": 1232}
{"story_id": 432, "premises": "All Yale dormitories are located on the Yale campus. \nAll Yale buildings managed by Yale Housing are dormitories. \nAll Yale buildings operated by Yale Housing staff are managed by Yale Housing. \nNone of the Yale buildings open to students were built before 1701. \nAll Yale buildings located on the Yale campus are open to students. \nHarkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. ", "premises-FOL": "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))\n\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))\n\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))\n\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))\n\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))\nYaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))", "conclusion": "Harkness is established before 1701.", "conclusion-FOL": "\u2203y(Before(y, year1701) \u2227 Established(x, y))", "label": "False", "example_id": 1233}
{"story_id": 432, "premises": "All Yale dormitories are located on the Yale campus. \nAll Yale buildings managed by Yale Housing are dormitories. \nAll Yale buildings operated by Yale Housing staff are managed by Yale Housing. \nNone of the Yale buildings open to students were built before 1701. \nAll Yale buildings located on the Yale campus are open to students. \nHarkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. ", "premises-FOL": "\u2200x (YaleDormitory(x) \u2192 LocatedOn(x, yaleCampus))\n\u2200x ((YaleBuildings(x) \u2227 ManagedBy(x, yaleHousing)) \u2192 YaleDormitory(x))\n\u2200x ((YaleBuildings(x) \u2227 OperatedBy(x, yaleHousingStaff)) \u2192 ManagedBy(x, yaleHousing))\n\u2200x ((YaleBuildings(x) \u2227 OpenToStudents(x)) \u2192 (\u00ac\u2203y(Before(y, yr1701) \u2227 Established(x, y))))\n\u2200x ((YaleBuildings(x) \u2227 LocatedOn(x, yaleCampus)) \u2192 OpenToStudents(x))\nYaleBuildings(harkness) \u2227 (OperatedBy(x, harkness) \u2295 LocatedOn(harkness, yaleCampus))", "conclusion": "Harkness is not established before 1701.", "conclusion-FOL": "\u00ac\u2203y(Before(y, year1701) \u2227 Established(x, y))", "label": "True", "example_id": 1234}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is a skyscraper.", "conclusion-FOL": "Skyscraper(laLaurieHouse)", "label": "False", "example_id": 789}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is not a skyscraper.", "conclusion-FOL": "\u00acSkyscraper(laLaurieHouse)", "label": "True", "example_id": 790}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is a terrifying building on Halloween.", "conclusion-FOL": "TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "label": "Uncertain", "example_id": 791}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is either a skyscraper or a mansion house.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 MansionHouse(laLaurieHouse)", "label": "True", "example_id": 792}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is either a skyscraper or in an urban area.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 UrbanArea(laLaurieHouse)", "label": "False", "example_id": 793}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "The LaLaurie House is either a skyscraper or a creepy haunted house.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 CreepyHauntedHouse(laLaurieHouse)", "label": "True", "example_id": 794}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "If the LaLaurie House is not a mansion or not in an urban area, then it is either a skyscraper or in an urban area.", "conclusion-FOL": "\u00ac(MansionHouse(laLaurieHouse) \u2227 InUrbanArea(laLaurieHouse)) \u2192 (Skyscraper(laLaurieHouse) \u2295 InUrbanArea(laLaurieHouse))", "label": "False", "example_id": 795}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "If the LaLaurie House is either a skyscraper or a mansion house, then it is in an urban area.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 MansionHouse(laLaurieHouse) \u2192 InUrbanArea(laLaurieHouse)", "label": "False", "example_id": 796}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "If the LaLaurie House is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying building on Halloween.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 MansionHouse(laLaurieHouse) \u2192 \u00ac(CreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse))", "label": "False", "example_id": 797}
{"story_id": 316, "premises": "There are no mansion houses in an urban area.\nAll skyscrapers are in urban areas.\nEvery creepy haunted house is a mansion house.\nEvery terrifying building on Halloween is a creepy haunted house.\nThe LaLaurie House is a creepy haunted house or a terrifying building on Halloween.", "premises-FOL": "\u2200x (InUrbanArea(x) \u2192 \u00acMansionHouse(x))\n\u2200x (Skyscraper(x) \u2192 InUrbanArea(x))\n\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))\n\u2200x (TerrifyingBuilding(x) \u2227 OnHalloween(x) \u2192 CreepyHauntedHouse(x))\nCreepyHauntedHouse(laLaurieHouse) \u2228 TerrifyingBuilding(laLaurieHouse) \u2227 OnHalloween(laLaurieHouse)", "conclusion": "If the LaLaurie House is either a skyscraper or a creepy haunted house, then it is not a mansion house.", "conclusion-FOL": "Skyscraper(laLaurieHouse) \u2295 CreepyHauntedHouse(laLaurieHouse) \u2192 \u00acMansionHouse(laLaurieHouse)", "label": "False", "example_id": 798}
{"story_id": 109, "premises": "Phuoc Binh national park is a national park in Vietnam. \nAny national park in Vietnam is classified as a nature reserve. \nThere is a national park in Vietnam classified as a UNESCO World Heritage Site.\nAll national parks in Vietnam are either managed by the Ministry of Agriculture or managed by the People's Committee. \nPhuoc Binh is not managed by the Ministry of Agriculture.", "premises-FOL": "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 NatureReserve(x))\n\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 (Mangedby(x, ministryofAgriculture) \u2295 Managedby(x, peoplesCommittee)))\n\u00acMangedby(phuocBinh, ministryofAgriculture)", "conclusion": "There is a nature reserve in Vietnam.", "conclusion-FOL": "\u2203x (NatureReserve(x) \u2227 LocatedIn(x, vietnam))", "label": "True", "example_id": 330}
{"story_id": 109, "premises": "Phuoc Binh national park is a national park in Vietnam. \nAny national park in Vietnam is classified as a nature reserve. \nThere is a national park in Vietnam classified as a UNESCO World Heritage Site.\nAll national parks in Vietnam are either managed by the Ministry of Agriculture or managed by the People's Committee. \nPhuoc Binh is not managed by the Ministry of Agriculture.", "premises-FOL": "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 NatureReserve(x))\n\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 (Mangedby(x, ministryofAgriculture) \u2295 Managedby(x, peoplesCommittee)))\n\u00acMangedby(phuocBinh, ministryofAgriculture)", "conclusion": "Phuoc Binh is a UNESCO Heritage Site.", "conclusion-FOL": "UNESCOWorldHeritageSite(phuocBinh))", "label": "Uncertain", "example_id": 331}
{"story_id": 109, "premises": "Phuoc Binh national park is a national park in Vietnam. \nAny national park in Vietnam is classified as a nature reserve. \nThere is a national park in Vietnam classified as a UNESCO World Heritage Site.\nAll national parks in Vietnam are either managed by the Ministry of Agriculture or managed by the People's Committee. \nPhuoc Binh is not managed by the Ministry of Agriculture.", "premises-FOL": "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 NatureReserve(x))\n\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))\n\u2200x ((NationalPark(x) \u2227 Locatedin(x, vietnam)) \u2192 (Mangedby(x, ministryofAgriculture) \u2295 Managedby(x, peoplesCommittee)))\n\u00acMangedby(phuocBinh, ministryofAgriculture)", "conclusion": "Phuoc Binh is managed by the People's Committee.", "conclusion-FOL": "Mangedby(phuocBinh, peoplesCommittee)", "label": "True", "example_id": 332}
{"story_id": 137, "premises": "Greyhound racing is a competitive sport where spectators bet on greyhounds.\nGreyhound racing involves coursing.\nSome competitive sports where spectators bet on things are banned.\nCoursing involves spectators betting on a hare being pursued by greyhounds.\nSpectators betting on a hare is a small game.\nIf a competitive sport involves spectators betting on small games, then it is banned.", "premises-FOL": "\u2200x (GreyhoundRacing(x) \u2192 \u2203y (CompetitiveSport(x) \u2227 Greyhound(y) \u2227 BetOn(spectators, y, x)))\n\u2200x (GreyhoundRacing(x) \u2192 Coursing(x))\n\u2203x \u2203y (CompetitiveSport(x) \u2227 BetOn(spectators, y, x) \u2227 Banned(x))\n\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 BetOn(spectators, y, x) \u2227 GreyHound(z) \u2227 PursuedBy(y, z))\n\u2203x \u2200y (Hare(x) \u2227 BetOn(spectators, x, y) \u2192 SmallGame(y))\n\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 BetOn(spectators, y, x) \u2192 Banned(x))", "conclusion": "No coursing is banned.", "conclusion-FOL": "\u2200x (Coursing(x) \u2227 \u00acBanned(x))", "label": "False", "example_id": 402}
{"story_id": 137, "premises": "Greyhound racing is a competitive sport where spectators bet on greyhounds.\nGreyhound racing involves coursing.\nSome competitive sports where spectators bet on things are banned.\nCoursing involves spectators betting on a hare being pursued by greyhounds.\nSpectators betting on a hare is a small game.\nIf a competitive sport involves spectators betting on small games, then it is banned.", "premises-FOL": "\u2200x (GreyhoundRacing(x) \u2192 \u2203y (CompetitiveSport(x) \u2227 Greyhound(y) \u2227 BetOn(spectators, y, x)))\n\u2200x (GreyhoundRacing(x) \u2192 Coursing(x))\n\u2203x \u2203y (CompetitiveSport(x) \u2227 BetOn(spectators, y, x) \u2227 Banned(x))\n\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 BetOn(spectators, y, x) \u2227 GreyHound(z) \u2227 PursuedBy(y, z))\n\u2203x \u2200y (Hare(x) \u2227 BetOn(spectators, x, y) \u2192 SmallGame(y))\n\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 BetOn(spectators, y, x) \u2192 Banned(x))", "conclusion": "Greyhound racing is a competitive sport.", "conclusion-FOL": "\u2200x (GreyhoundRacing(x) \u2192 CompetitiveSport(x))", "label": "True", "example_id": 403}
{"story_id": 190, "premises": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.\nIf a soccer player receives one red card in one game, this player will be ejected from the rest of the game.\nHenry is a soccer player.\nIn one game, Henry receives one yellow card and one red card.", "premises-FOL": "\u2200x (SoccerPlayer(x) \u2227 Receive(x, twoYellowCard) \u2192 EjectFromRestOfGame(x))\n\u2200x (SoccerPlayer(x) \u2227 Receive(x, oneRedCard)) \u2192 EjectFromRestOfGame(x))   \nSoccerPlayer(henry)\nReceive(henry, oneYellowCard) \u2227 Receive(x, oneRedCard)", "conclusion": "Henry will be ejected from the rest of the game.", "conclusion-FOL": "EjectFromRestOfGame(henry)", "label": "True", "example_id": 544}
{"story_id": 190, "premises": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.\nIf a soccer player receives one red card in one game, this player will be ejected from the rest of the game.\nHenry is a soccer player.\nIn one game, Henry receives one yellow card and one red card.", "premises-FOL": "\u2200x (SoccerPlayer(x) \u2227 Receive(x, twoYellowCard) \u2192 EjectFromRestOfGame(x))\n\u2200x (SoccerPlayer(x) \u2227 Receive(x, oneRedCard)) \u2192 EjectFromRestOfGame(x))   \nSoccerPlayer(henry)\nReceive(henry, oneYellowCard) \u2227 Receive(x, oneRedCard)", "conclusion": "Henry will not be ejected from the rest of the game.", "conclusion-FOL": "\u00acEjectFromRestOfGame(henry)", "label": "False", "example_id": 545}
{"story_id": 287, "premises": "Trees are plants. \nSome living things are trees.", "premises-FOL": "\u2200x (Tree(x) \u2192 Plant(x))\n\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Tree(x) \u2227 Tree(y) \u2227 \u00ac(x=y))", "conclusion": "Some living things are plants.", "conclusion-FOL": "\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Plant(x) \u2227 Plant(y) \u2227 \u00ac(x=y))", "label": "True", "example_id": 731}
{"story_id": 16, "premises": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.\nDagfinn Aarskog is a Norwegian physician.\nDagfinn Dahl is a Norwegian barrister.", "premises-FOL": "\nGivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)", "conclusion": "Dagfinn Aarskog is a notable person.", "conclusion-FOL": "NotablePerson(dagfinnAarskog)", "label": "True", "example_id": 44}
{"story_id": 16, "premises": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.\nDagfinn Aarskog is a Norwegian physician.\nDagfinn Dahl is a Norwegian barrister.", "premises-FOL": "\nGivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)", "conclusion": "Dagfinn is Dagfinn Aarskog's given name.", "conclusion-FOL": "Named(dagfinnAarskog, nameDagfinn)", "label": "True", "example_id": 45}
{"story_id": 16, "premises": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl.\nDagfinn Aarskog is a Norwegian physician.\nDagfinn Dahl is a Norwegian barrister.", "premises-FOL": "\nGivenName(nameDagfinn) \u2227 Named(dagfinnAarskog, nameDagfinn) \u2227 NotablePerson(dagfinnAarskog) \u2227 Named(dagfinnBakke, nameDagfinn) \u2227 NotablePerson(dagfinnBakke)  \u2227 Named(dagfinnDahl, nameDagfinn) \u2227 NotablePerson(dagfinnDahl)\nNorwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)\nNorwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)", "conclusion": "Dagfinn Dahl is a Norwegian physician.", "conclusion-FOL": "Norwegian(dagfinnDahl) \u2227 Physician(dagfinnDahl)", "label": "Uncertain", "example_id": 46}
{"story_id": 300, "premises": "If a movie is popular, some people enjoy watching it.\nAll things that some people enjoy attract attention.", "premises-FOL": "\u2200x (Movie(x) \u2227 Popular(x) \u2192 \u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x) \u2227 \u00ac(y=z)))\n\u2200x (\u2203y \u2203z (Person(y) \u2227 EnjoyWatching(y, x) \u2227 Person(z) \u2227 EnjoyWatching(z, x)) \u2192 Attract(x, attention))", "conclusion": "If a movie is popular, then it attracts attention.", "conclusion-FOL": "\u2200x (Movie(x) \u2227 Popular(x) \u2192 Attract(x, attention))", "label": "True", "example_id": 744}
{"story_id": 240, "premises": "It is not true that some giant language models do not have good performance. \nAll language models with good performance are used by some researchers.\nIf a language model is used by some researchers, it is popular. \nIf BERT is a giant language model, then GPT-3 is also a giant language model. \nBERT is a giant language model. ", "premises-FOL": "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))\n\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 GoodPerformance(x) \u2192 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z))\n\u2200x \u2203y \u2203z (LanguageModel(x) \u2227 \u00ac(x=y) \u2227 Researcher(y) \u2227 UsedBy(x, y) \u2227 Researcher(z) \u2227 UsedBy(x, z) \u2192 Popular(x))\n(LanguageModel(bert) \u2227 Giant(bert)) \u2192 (LanguageModel(gpt-3) \u2227 Giant(gpt-3)).\nLanguageModel(bert) \u2227 Giant(bert)", "conclusion": "GPT-3 is popular.", "conclusion-FOL": "Popular(gpt-3)", "label": "True", "example_id": 682}
{"story_id": 110, "premises": "St Johnstone is a Scottish team.\nSt Johnstone is part of the Scottish Premiership league.\nIf a team is part of the league, it has joined the league.\nSt Johnstone and Minsk are different teams.\nFor two teams, either one team wins, or the other team wins.\nMinsk won against St Johnstone.", "premises-FOL": "Scottish(stJohnstone) \u2227 Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) \u2227 League(scottishPremiership)\n\u2200x \u2200y (Team(x) \u2227 League(y) \u2227 PartOf(x, y) \u2192 Joined(x, y))\n\u00ac(misnk=stJohnstone)\n\u2200x \u2200y (\u00ac(x=y) \u2192 WonAgainst(x, y) \u2295 WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)", "conclusion": "At least one Scottish team has joined the Scottish Premiership.", "conclusion-FOL": "\u2203x (Scottish(x) \u2227 Joined(x, scottishPremiership))", "label": "True", "example_id": 333}
{"story_id": 110, "premises": "St Johnstone is a Scottish team.\nSt Johnstone is part of the Scottish Premiership league.\nIf a team is part of the league, it has joined the league.\nSt Johnstone and Minsk are different teams.\nFor two teams, either one team wins, or the other team wins.\nMinsk won against St Johnstone.", "premises-FOL": "Scottish(stJohnstone) \u2227 Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) \u2227 League(scottishPremiership)\n\u2200x \u2200y (Team(x) \u2227 League(y) \u2227 PartOf(x, y) \u2192 Joined(x, y))\n\u00ac(misnk=stJohnstone)\n\u2200x \u2200y (\u00ac(x=y) \u2192 WonAgainst(x, y) \u2295 WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)", "conclusion": "St Johnstone won against Minsk.", "conclusion-FOL": "WonGame(stJohnstone, minsk)", "label": "False", "example_id": 334}
{"story_id": 110, "premises": "St Johnstone is a Scottish team.\nSt Johnstone is part of the Scottish Premiership league.\nIf a team is part of the league, it has joined the league.\nSt Johnstone and Minsk are different teams.\nFor two teams, either one team wins, or the other team wins.\nMinsk won against St Johnstone.", "premises-FOL": "Scottish(stJohnstone) \u2227 Team(stJohnstone)\nPartOf(stJohnstone, scottishPremiership) \u2227 League(scottishPremiership)\n\u2200x \u2200y (Team(x) \u2227 League(y) \u2227 PartOf(x, y) \u2192 Joined(x, y))\n\u00ac(misnk=stJohnstone)\n\u2200x \u2200y (\u00ac(x=y) \u2192 WonAgainst(x, y) \u2295 WonAgainst(y, x))\nWonAgainst(minsk, stJohnstone)", "conclusion": "Minsk joined the Scottish Premiership.", "conclusion-FOL": "Joined(minsk, scottishPremiership))", "label": "Uncertain", "example_id": 335}
{"story_id": 431, "premises": "No Boeing-737 plane has more than 300 seats. \nAll of the planes acquired by Delta in this batch are Boeing-737. \nPlanes either have more than 300 seats or have a capacity of 100 passengers. \nAll planes with a capacity of 100 passengers are scheduled for a short-distance flight. \nAll planes with a capacity of 100 passengers are produced before 2010. \nJake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.\nT10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither.", "premises-FOL": "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))\n\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))\n\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))\n(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))\n\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))", "conclusion": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.", "conclusion-FOL": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight))", "label": "True", "example_id": 1227}
{"story_id": 431, "premises": "No Boeing-737 plane has more than 300 seats. \nAll of the planes acquired by Delta in this batch are Boeing-737. \nPlanes either have more than 300 seats or have a capacity of 100 passengers. \nAll planes with a capacity of 100 passengers are scheduled for a short-distance flight. \nAll planes with a capacity of 100 passengers are produced before 2010. \nJake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.\nT10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither.", "premises-FOL": "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))\n\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))\n\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))\n(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))\n\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))", "conclusion": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.", "conclusion-FOL": "\u00ac(\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 ScheduledFor(jake32, shortdistanceflight)))", "label": "False", "example_id": 1228}
{"story_id": 431, "premises": "No Boeing-737 plane has more than 300 seats. \nAll of the planes acquired by Delta in this batch are Boeing-737. \nPlanes either have more than 300 seats or have a capacity of 100 passengers. \nAll planes with a capacity of 100 passengers are scheduled for a short-distance flight. \nAll planes with a capacity of 100 passengers are produced before 2010. \nJake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.\nT10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither.", "premises-FOL": "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))\n\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))\n\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))\n(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))\n\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))", "conclusion": "Jake32 is produced before 2010 or scheduled for a short-distance flight.", "conclusion-FOL": "\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2228 ScheduledFor(jake32, shortdistanceflight))", "label": "True", "example_id": 1229}
{"story_id": 431, "premises": "No Boeing-737 plane has more than 300 seats. \nAll of the planes acquired by Delta in this batch are Boeing-737. \nPlanes either have more than 300 seats or have a capacity of 100 passengers. \nAll planes with a capacity of 100 passengers are scheduled for a short-distance flight. \nAll planes with a capacity of 100 passengers are produced before 2010. \nJake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch.\nT10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither.", "premises-FOL": "\u2200x (Plane(x) \u2227 Boeing737(x) \u2192 (\u00ac\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y)))\n\u2200x (Plane(x) \u2227 AcquiredBy(x, delta) \u2192 Boeing737(x))\n\u2200x (Plane(x) \u2192 ((\u2203y(GreaterThan(y, num300) \u2227 EquippedWithSeats(x,y))) \u2295 (\u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y))))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 ScheduledFor(x, shortdistanceflight))\n\u2200x (Plane(x) \u2227 \u2203y(Equals(y, num100) \u2227 EquippedWithSeats(x,y)) \u2192 \u2203z(Before(z, yr2010) \u2227 Produced(x, z))\n(Boeing737(jake32) \u2227 Plane(jake32)) \u2295 (AcquiredByDeltaInThisBatch(jake32) \u2227 Plane(jake32))\n\u00ac((Boeing737(t10) \u2227 Plane(t10)) \u2295 (AcquiredByDeltaInThisBatch(t10) \u2227 Plane(t10)))", "conclusion": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.", "conclusion-FOL": "\u00ac\u2203z(Before(z, year2010) \u2227 Produced(jake32, z)) \u2227 \u00acScheduledFor(jake32, shortdistanceflight))", "label": "False", "example_id": 1230}
{"story_id": 195, "premises": "The SAT test is wholly owned and developed by the College Board.\nThe SAT test is intended to assess students' readiness for college.\nThe SAT was originally designed not to be aligned with high school curricula. \nSeveral adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum.", "premises-FOL": "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))\nIntendedToAssess(sAT, studentsReadinessForCollege)\nOriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)\nAdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)", "conclusion": "The SAT test is owned by the College Board and other third parties.", "conclusion-FOL": "OwnedBy(sAT, collegeBoard) \u2227 OwnedBy(sAT, otherThirdParties)", "label": "False", "example_id": 555}
{"story_id": 195, "premises": "The SAT test is wholly owned and developed by the College Board.\nThe SAT test is intended to assess students' readiness for college.\nThe SAT was originally designed not to be aligned with high school curricula. \nSeveral adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum.", "premises-FOL": "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))\nIntendedToAssess(sAT, studentsReadinessForCollege)\nOriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)\nAdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)", "conclusion": "The SAT test assesses students' math skills.", "conclusion-FOL": "IntendedToAssess(sAT, studentsMathSkill)", "label": "Uncertain", "example_id": 556}
{"story_id": 34, "premises": "Rafa Nadal was born in Mallorca.\nRafa Nadal is a professional tennis player.\nNadal's win ratio is high.\nAll players in the Big 3 are professionals who have a high win ratio.", "premises-FOL": "BornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))", "conclusion": "Nadal was not born in Mallorca.", "conclusion-FOL": "\u00acBornIn(rafaNadal, mallorca)", "label": "False", "example_id": 98}
{"story_id": 34, "premises": "Rafa Nadal was born in Mallorca.\nRafa Nadal is a professional tennis player.\nNadal's win ratio is high.\nAll players in the Big 3 are professionals who have a high win ratio.", "premises-FOL": "BornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))", "conclusion": "Nadal is in the Big 3.", "conclusion-FOL": "InBig3(rafaNadal)", "label": "True", "example_id": 99}
{"story_id": 34, "premises": "Rafa Nadal was born in Mallorca.\nRafa Nadal is a professional tennis player.\nNadal's win ratio is high.\nAll players in the Big 3 are professionals who have a high win ratio.", "premises-FOL": "BornIn(rafaNadal, mallorca)\nProfessionalTennisPlayer(rafaNadal)\nHighWinRatio(rafaNadal)\n\u2200x ((ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x)) \u2192 InBig3(x))", "conclusion": "Nadal is the greatest player of all time.", "conclusion-FOL": "GreatestOfAllTime(rafaNadal)", "label": "Uncertain", "example_id": 100}
{"story_id": 286, "premises": "No sandwich cookies are healthy.\nOreos are sandwich cookies.", "premises-FOL": "\u2200x (SandwichCookie(x) \u2192 \u00acHealthy(x))\n\u2200x (Oreo(x) \u2192 SandwichCookie(x))", "conclusion": "All sandwich cookies are delicious.", "conclusion-FOL": "\u2200x (SandwichCookie(x) \u2192 Delicious(x))", "label": "Uncertain", "example_id": 730}
{"story_id": 314, "premises": "No animals are plants.\nAll humans are animals.\nAll pupils are humans.\nAll flowers are plants.\nBailey is either both a human and a flower or neither a human nor a flower.", "premises-FOL": "\u2200x (Animal(x) \u2192 \u00acPlant(x))\n\u2200x (Human(x) \u2192 Animal(x))\n\u2200x (Pupil(x) \u2192 Human(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u00ac(Human(bailey) \u2295 Flower(bailey))", "conclusion": "Bailey is a pupil.", "conclusion-FOL": "Pupil(bailey)", "label": "False", "example_id": 782}
{"story_id": 314, "premises": "No animals are plants.\nAll humans are animals.\nAll pupils are humans.\nAll flowers are plants.\nBailey is either both a human and a flower or neither a human nor a flower.", "premises-FOL": "\u2200x (Animal(x) \u2192 \u00acPlant(x))\n\u2200x (Human(x) \u2192 Animal(x))\n\u2200x (Pupil(x) \u2192 Human(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u00ac(Human(bailey) \u2295 Flower(bailey))", "conclusion": "Bailey is not a pupil.", "conclusion-FOL": "\u00acPupil(bailey)", "label": "True", "example_id": 783}
{"story_id": 314, "premises": "No animals are plants.\nAll humans are animals.\nAll pupils are humans.\nAll flowers are plants.\nBailey is either both a human and a flower or neither a human nor a flower.", "premises-FOL": "\u2200x (Animal(x) \u2192 \u00acPlant(x))\n\u2200x (Human(x) \u2192 Animal(x))\n\u2200x (Pupil(x) \u2192 Human(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u00ac(Human(bailey) \u2295 Flower(bailey))", "conclusion": "Bailey is a plant.", "conclusion-FOL": "Plant(bailey)", "label": "Uncertain", "example_id": 784}
{"story_id": 314, "premises": "No animals are plants.\nAll humans are animals.\nAll pupils are humans.\nAll flowers are plants.\nBailey is either both a human and a flower or neither a human nor a flower.", "premises-FOL": "\u2200x (Animal(x) \u2192 \u00acPlant(x))\n\u2200x (Human(x) \u2192 Animal(x))\n\u2200x (Pupil(x) \u2192 Human(x))\n\u2200x (Flower(x) \u2192 Plant(x))\n\u00ac(Human(bailey) \u2295 Flower(bailey))", "conclusion": "If Bailey is a human, then Bailey is not a pupil.", "conclusion-FOL": "Human(bailey) \u2192 \u00acPupil(bailey)", "label": "True", "example_id": 785}
{"story_id": 458, "premises": "Shoes are not food.\nAll slippers are shoes.\nAny object donated to the homeless charity is either clothes or food.\nWearable things are not edible.\nAll clothes are wearable. \nThe watch is donated to the homeless charify.\nIf the watch is not both edible and a piece of clothing, then the watch is either both edible and a piece of clothing or the watch is neither of them.", "premises-FOL": "\u2200x (Shoe(x) \u2192 \u00acFood(x))\n\u2200x (Slipper(x) \u2192 Shoe(x))\n\u2200x (DonatedTo(x, homelessCharity) \u2192 Food(x) \u2295 Clothes(x))\n\u2200x (Wearable(x) \u2192 \u00acEdible(x))\n\u2200x (Clothes(x) \u2192 Wearable(x))\nDonatedTo(watch, homelessCharify)\n\u00ac(Edible(watch) \u2227 Clothes(watch)) \u2192 \u00ac(Edible(watch) \u2295 Clothes(watch))", "conclusion": "A watch is wearable.", "conclusion-FOL": "Wearable(watch)", "label": "Uncertain", "example_id": 1321}
{"story_id": 458, "premises": "Shoes are not food.\nAll slippers are shoes.\nAny object donated to the homeless charity is either clothes or food.\nWearable things are not edible.\nAll clothes are wearable. \nThe watch is donated to the homeless charify.\nIf the watch is not both edible and a piece of clothing, then the watch is either both edible and a piece of clothing or the watch is neither of them.", "premises-FOL": "\u2200x (Shoe(x) \u2192 \u00acFood(x))\n\u2200x (Slipper(x) \u2192 Shoe(x))\n\u2200x (DonatedTo(x, homelessCharity) \u2192 Food(x) \u2295 Clothes(x))\n\u2200x (Wearable(x) \u2192 \u00acEdible(x))\n\u2200x (Clothes(x) \u2192 Wearable(x))\nDonatedTo(watch, homelessCharify)\n\u00ac(Edible(watch) \u2227 Clothes(watch)) \u2192 \u00ac(Edible(watch) \u2295 Clothes(watch))", "conclusion": "A watch is a slipper.", "conclusion-FOL": "Slipper(watch)", "label": "False", "example_id": 1322}
{"story_id": 458, "premises": "Shoes are not food.\nAll slippers are shoes.\nAny object donated to the homeless charity is either clothes or food.\nWearable things are not edible.\nAll clothes are wearable. \nThe watch is donated to the homeless charify.\nIf the watch is not both edible and a piece of clothing, then the watch is either both edible and a piece of clothing or the watch is neither of them.", "premises-FOL": "\u2200x (Shoe(x) \u2192 \u00acFood(x))\n\u2200x (Slipper(x) \u2192 Shoe(x))\n\u2200x (DonatedTo(x, homelessCharity) \u2192 Food(x) \u2295 Clothes(x))\n\u2200x (Wearable(x) \u2192 \u00acEdible(x))\n\u2200x (Clothes(x) \u2192 Wearable(x))\nDonatedTo(watch, homelessCharify)\n\u00ac(Edible(watch) \u2227 Clothes(watch)) \u2192 \u00ac(Edible(watch) \u2295 Clothes(watch))", "conclusion": "A watch is neither edible nor a slipper.", "conclusion-FOL": "\u00acEdible(watch) \u2227 \u00acSlipper(watch)", "label": "True", "example_id": 1323}
{"story_id": 35, "premises": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.\nCarlos Reyes trains for an Olympic sport.\nCarlos Reyes went to the Olympics.\nCarlos Reyes is a welterweight.\nHeavy weights are not welterweights.", "premises-FOL": "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))", "conclusion": "Carlos Reyes is an Olympian.", "conclusion-FOL": "Olympian(carlosReyes)", "label": "True", "example_id": 101}
{"story_id": 35, "premises": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.\nCarlos Reyes trains for an Olympic sport.\nCarlos Reyes went to the Olympics.\nCarlos Reyes is a welterweight.\nHeavy weights are not welterweights.", "premises-FOL": "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))", "conclusion": "Carlos Reyes is a heavy weight.", "conclusion-FOL": "HeavyWeight(carlosReyes)", "label": "False", "example_id": 102}
{"story_id": 35, "premises": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.\nCarlos Reyes trains for an Olympic sport.\nCarlos Reyes went to the Olympics.\nCarlos Reyes is a welterweight.\nHeavy weights are not welterweights.", "premises-FOL": "\u2200x ((DoesOlympicSport(x) \u2227 GoesToOlympicGames(x)) \u2192 Olympian(x))\nDoesOlympicSport(carlosReyes)\nGoesToOlympicGames(carlosReyes)\nWelterWeight(carlosReyes)\n\u2200x (WelterWeight(x) \u2192 \u00ac HeavyWeight(x))", "conclusion": "Carlos Reyes won an Olympic medal.", "conclusion-FOL": "WonOlympicMedal(carlosReyes)", "label": "Uncertain", "example_id": 103}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam is a young teenage girl who attends music festival frequently", "conclusion-FOL": "Attend(sam, festival) \u2227 YoungTeenageGirl(sam)", "label": "False", "example_id": 863}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam is not a young teenage girl who attends music festival frequently", "conclusion-FOL": "\u00ac(Attend(sam, festival) \u2227 YoungTeenageGirl(sam))", "label": "True", "example_id": 864}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam is a big fan of pop bands and singers.", "conclusion-FOL": "BigFanOfMusic(sam)", "label": "Uncertain", "example_id": 865}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently", "conclusion-FOL": "\u00ac(Ambitious(sam) \u2228 (Attend(sam, festival) \u2227 YoungTeenageGirl(sam)))", "label": "True", "example_id": 866}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam has high ambitions and future career goals and is a young teenage girl attending music festival frequently.", "conclusion-FOL": "Ambitious(sam) \u2227 Attend(sam, festival) \u2227 YoungTeenageGirl(sam)", "label": "False", "example_id": 867}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "Sam has high ambitions and future career goals and is a young teenage girl attending college.", "conclusion-FOL": "Ambitious(sam) \u2227 Attend(sam, festival) \u2227 YoungTeenageGirl(sam)", "label": "False", "example_id": 868}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "If Sam is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.", "conclusion-FOL": "Attend(sam, festival) \u2227 YoungTeenageGirl(sam) \u2192 \u00ac(Ambitious(sam) \u2228 (BigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)))", "label": "True", "example_id": 869}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college.", "conclusion-FOL": "Ambitious(sam) \u2227 Attend(sam, festival) \u2227 YoungTeenageGirl(sam) \u2192 \u00ac(Ambitious(sam) \u2228 (Attend(sam, festival) \u2227 YoungTeenageGirl(sam)))", "label": "True", "example_id": 870}
{"story_id": 333, "premises": "If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily.\nIf people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\nIf people are big fans of pop bands and singers, then they have a lot of music decorations in their room.\nAll young teenage girls who attend music festival frequently are big fans of pop bands and singers.\nIf Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "premises-FOL": "\u2200x (HaveIn(x, aLotOfMusicDecoration, room) \u2192 \u00acMoveOutEasily(x))\n\u2200x (Ambitious(x) \u2192 MoveOutEasily(x))\n\u2200x (BigFanOfMusic(x) \u2192 MusicDecorations(x, room))\n\u2200x (AttendFrequently(x, musicFestival) \u2227 YoungTeenageGirl(x) \u2192 BigFanOfPopBand(x) \u2227 BigFanOfPopSinger(x))\nAmbitious(sam) \u2192 BBigFanOfPopBand(sam) \u2227 BigFanOfPopSinger(sam)", "conclusion": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college.", "conclusion-FOL": "Ambitious(sam) \u2192 Attend(sam, festival) \u2227 YoungTeenageGirl(sam)", "label": "True", "example_id": 871}
{"story_id": 182, "premises": "Brita was a cargo ship built for Norwegians.\nBrita was impressed into service by Germany.\nShips that have been impressed into service were seized by whoever impressed them into service.\nThe Britta was sold to Hong Kong.", "premises-FOL": "CargoShip(britta) \u2227 Ship(britta) \u2227 BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n\u2200x \u2200y (Ship(x) \u2227 ImpressedIntoServiceBy(x, y) \u2192 SeizedBy(x, y))\nSoldTo(britta, hongkong)", "conclusion": "There was a cargo ship seized by Germany that was sold to Hong Kong.", "conclusion-FOL": "\u2203x (CargoShip(x) \u2227 SeizedBy(x, germany) \u2227 SoldTo(x, hongkong))", "label": "True", "example_id": 524}
{"story_id": 182, "premises": "Brita was a cargo ship built for Norwegians.\nBrita was impressed into service by Germany.\nShips that have been impressed into service were seized by whoever impressed them into service.\nThe Britta was sold to Hong Kong.", "premises-FOL": "CargoShip(britta) \u2227 Ship(britta) \u2227 BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n\u2200x \u2200y (Ship(x) \u2227 ImpressedIntoServiceBy(x, y) \u2192 SeizedBy(x, y))\nSoldTo(britta, hongkong)", "conclusion": "Hong Kong hasn't had any seized ships sold to them.", "conclusion-FOL": "\u2200x \u2200y (SoldTo(x, hongkong) \u2192 \u00acSeizedBy(x, y))", "label": "False", "example_id": 525}
{"story_id": 182, "premises": "Brita was a cargo ship built for Norwegians.\nBrita was impressed into service by Germany.\nShips that have been impressed into service were seized by whoever impressed them into service.\nThe Britta was sold to Hong Kong.", "premises-FOL": "CargoShip(britta) \u2227 Ship(britta) \u2227 BuiltFor(britta, norwegians)\nImpressedIntoServiceBy(britta, germany)\n\u2200x \u2200y (Ship(x) \u2227 ImpressedIntoServiceBy(x, y) \u2192 SeizedBy(x, y))\nSoldTo(britta, hongkong)", "conclusion": "Hong Kong seized the Britta.", "conclusion-FOL": "SeizedBy(britta, hongkong)", "label": "Uncertain", "example_id": 526}
{"story_id": 49, "premises": "Quincy McDuffie is an American professional wide receiver in Canadian Football.\nPeople who can catch balls are good wide receivers. \nQuincy McDuffie can catch some footballs easily.\nGood wide receivers play professionally.\nGood wide receivers can catch with both their left and right hand.\nAll footballs are balls.", "premises-FOL": "American(quincyMcduffie) \u2227 Professional(quincyMcduffie) \u2227 WideReciever(quincyMcduffie) \u2227 PlaysIn(quincyMcduffie, cFL)\n\u2200x ((\u2203y(CanCatch(x, y) \u2227 Ball(y))) \u2192 GoodWideReceiver(x))\n\u2203x \u2203y (Football(x) \u2227 CanCatch(quincymcduffie, x)) \u2227 (\u00ac(x=y) \u2227 (Football(y) \u2227 CanCatch(quincymcduffie, y))\n\u2200x (GoodWideReceiver(x) \u2192 Professional(x))\n\u2200x (GoodWideReceiver(x) \u2192 (CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand)))\n\u2200x (Football(x) \u2192 Ball(x))", "conclusion": "Quincy McDuffie is a good wide receiver.", "conclusion-FOL": "GoodWideReceiver(quincyMcduffie)", "label": "True", "example_id": 141}
{"story_id": 49, "premises": "Quincy McDuffie is an American professional wide receiver in Canadian Football.\nPeople who can catch balls are good wide receivers. \nQuincy McDuffie can catch some footballs easily.\nGood wide receivers play professionally.\nGood wide receivers can catch with both their left and right hand.\nAll footballs are balls.", "premises-FOL": "American(quincyMcduffie) \u2227 Professional(quincyMcduffie) \u2227 WideReciever(quincyMcduffie) \u2227 PlaysIn(quincyMcduffie, cFL)\n\u2200x ((\u2203y(CanCatch(x, y) \u2227 Ball(y))) \u2192 GoodWideReceiver(x))\n\u2203x \u2203y (Football(x) \u2227 CanCatch(quincymcduffie, x)) \u2227 (\u00ac(x=y) \u2227 (Football(y) \u2227 CanCatch(quincymcduffie, y))\n\u2200x (GoodWideReceiver(x) \u2192 Professional(x))\n\u2200x (GoodWideReceiver(x) \u2192 (CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand)))\n\u2200x (Football(x) \u2192 Ball(x))", "conclusion": "Quincy McDuffie can catch every ball.", "conclusion-FOL": "\u2200x (Ball(x) \u2192 CanCatch(quincymcduffie, x))", "label": "Uncertain", "example_id": 142}
{"story_id": 49, "premises": "Quincy McDuffie is an American professional wide receiver in Canadian Football.\nPeople who can catch balls are good wide receivers. \nQuincy McDuffie can catch some footballs easily.\nGood wide receivers play professionally.\nGood wide receivers can catch with both their left and right hand.\nAll footballs are balls.", "premises-FOL": "American(quincyMcduffie) \u2227 Professional(quincyMcduffie) \u2227 WideReciever(quincyMcduffie) \u2227 PlaysIn(quincyMcduffie, cFL)\n\u2200x ((\u2203y(CanCatch(x, y) \u2227 Ball(y))) \u2192 GoodWideReceiver(x))\n\u2203x \u2203y (Football(x) \u2227 CanCatch(quincymcduffie, x)) \u2227 (\u00ac(x=y) \u2227 (Football(y) \u2227 CanCatch(quincymcduffie, y))\n\u2200x (GoodWideReceiver(x) \u2192 Professional(x))\n\u2200x (GoodWideReceiver(x) \u2192 (CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand)))\n\u2200x (Football(x) \u2192 Ball(x))", "conclusion": "Professional wide receivers are good at catching balls.", "conclusion-FOL": "\u2200x ((Professional(x) \u2227 WideReciever(x)) \u2192 Good(x, catchingballs))", "label": "Uncertain", "example_id": 143}
{"story_id": 6, "premises": "Boves is a railway station located in France. \nThe preceding station of Boves is Longueau.\nThe preceding station of Dommartin is Boves.\nFrance is a European country.\nDommartin is situated on the Paris\u2013Lille railway. \nAny two contiguous stations are on the same railway.\nBoves is served by regional TER Hauts-de-France trains.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.\nIf place A precedes place B and place B precedes place C, then place A precedes place C.", "premises-FOL": "RailwayStation(boves) \u2227 In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))\n\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))", "conclusion": "Longueau is situated on the Paris\u2013Lille railway.", "conclusion-FOL": "SituatedOn(longueau, pairsLille)", "label": "True", "example_id": 14}
{"story_id": 6, "premises": "Boves is a railway station located in France. \nThe preceding station of Boves is Longueau.\nThe preceding station of Dommartin is Boves.\nFrance is a European country.\nDommartin is situated on the Paris\u2013Lille railway. \nAny two contiguous stations are on the same railway.\nBoves is served by regional TER Hauts-de-France trains.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.\nIf place A precedes place B and place B precedes place C, then place A precedes place C.", "premises-FOL": "RailwayStation(boves) \u2227 In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))\n\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))", "conclusion": "Boves is not in Europe.", "conclusion-FOL": "\u00acIn(boves, europe)", "label": "False", "example_id": 15}
{"story_id": 6, "premises": "Boves is a railway station located in France. \nThe preceding station of Boves is Longueau.\nThe preceding station of Dommartin is Boves.\nFrance is a European country.\nDommartin is situated on the Paris\u2013Lille railway. \nAny two contiguous stations are on the same railway.\nBoves is served by regional TER Hauts-de-France trains.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.\nIf place A precedes place B and place B precedes place C, then place A precedes place C.", "premises-FOL": "RailwayStation(boves) \u2227 In(boves, france)\nPrecede(longueau, boves)\nPrecede(boves, dommartin)\nIn(france, europe)\nSituatedOn(dommartin, pairsLille)\n\u2200x \u2200y \u2200z ((SituatedOn(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x)) \u2192 SituatedOn(y, z))\nServe(boves, hautsDeFrance)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))\n\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))", "conclusion": "Longueau is served by regional TER Hauts-de-France trains.", "conclusion-FOL": "Serve(longueau, hautsDeFrance)", "label": "Uncertain", "example_id": 16}
{"story_id": 102, "premises": "Edwin Smith was a New Zealand rower from Auckland.\nEdwin Smith was also known as Ted Smith.\nEdwin Smith went to Rose Road Primary School, located in Grey Lynn.\nEdwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.\nBroadway Sheetmetals was a business run and owned by Edwin Smith, a sheet metal worker.", "premises-FOL": "From(edwinSmith, newZealand) \u2227 Rower(edwinSmith) \u2227 From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) \u2227 LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) \u2227 ServeWith(edwinSmith, newZealand24thBattalion) \u2227 ServeIn(edwinSmith, italy) \u2227 ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) \u2227 Run(edwinSmith, broadwaySheetmetals) \u2227 Own(edwinSmith, broadwaySheetmetals) \u2227 SheetmetalWorker(edwinsmith)", "conclusion": "Ted Smith was a sergeant.", "conclusion-FOL": "Sergeant(tedSmith)", "label": "True", "example_id": 309}
{"story_id": 102, "premises": "Edwin Smith was a New Zealand rower from Auckland.\nEdwin Smith was also known as Ted Smith.\nEdwin Smith went to Rose Road Primary School, located in Grey Lynn.\nEdwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.\nBroadway Sheetmetals was a business run and owned by Edwin Smith, a sheet metal worker.", "premises-FOL": "From(edwinSmith, newZealand) \u2227 Rower(edwinSmith) \u2227 From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) \u2227 LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) \u2227 ServeWith(edwinSmith, newZealand24thBattalion) \u2227 ServeIn(edwinSmith, italy) \u2227 ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) \u2227 Run(edwinSmith, broadwaySheetmetals) \u2227 Own(edwinSmith, broadwaySheetmetals) \u2227 SheetmetalWorker(edwinsmith)", "conclusion": "There were no rowers that own a buisness.", "conclusion-FOL": "\u2200x \u2200y (Rower(x) \u2227 Buisness(y) \u2192 \u00acOwn(x, y))", "label": "False", "example_id": 310}
{"story_id": 102, "premises": "Edwin Smith was a New Zealand rower from Auckland.\nEdwin Smith was also known as Ted Smith.\nEdwin Smith went to Rose Road Primary School, located in Grey Lynn.\nEdwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.\nBroadway Sheetmetals was a business run and owned by Edwin Smith, a sheet metal worker.", "premises-FOL": "From(edwinSmith, newZealand) \u2227 Rower(edwinSmith) \u2227 From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) \u2227 LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) \u2227 ServeWith(edwinSmith, newZealand24thBattalion) \u2227 ServeIn(edwinSmith, italy) \u2227 ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) \u2227 Run(edwinSmith, broadwaySheetmetals) \u2227 Own(edwinSmith, broadwaySheetmetals) \u2227 SheetmetalWorker(edwinsmith)", "conclusion": "No sergeants were from Auckland.", "conclusion-FOL": "\u2200x (Sergeant(x) \u2192 \u00acFrom(x, auckland))", "label": "False", "example_id": 311}
{"story_id": 102, "premises": "Edwin Smith was a New Zealand rower from Auckland.\nEdwin Smith was also known as Ted Smith.\nEdwin Smith went to Rose Road Primary School, located in Grey Lynn.\nEdwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.\nBroadway Sheetmetals was a business run and owned by Edwin Smith, a sheet metal worker.", "premises-FOL": "From(edwinSmith, newZealand) \u2227 Rower(edwinSmith) \u2227 From(edwinSmith, auckland)\nedwinSmith=tedSmith\nGoTo(edwinSmith, roseRoadPrimarySchool) \u2227 LocatedIn(roseRoadPrimarySchool, greyLynn)\nSergeant(edwinSmith) \u2227 ServeWith(edwinSmith, newZealand24thBattalion) \u2227 ServeIn(edwinSmith, italy) \u2227 ServeIn(edwinSmith, egypt)\nBuisness(broadwaySheetmetals) \u2227 Run(edwinSmith, broadwaySheetmetals) \u2227 Own(edwinSmith, broadwaySheetmetals) \u2227 SheetmetalWorker(edwinsmith)", "conclusion": "No business owner served in Egypt.", "conclusion-FOL": "\u2200x \u2200y (Buisness(x) \u2227 Own(y, x) \u2192 \u00acServeIn(y, egypt))", "label": "False", "example_id": 312}
{"story_id": 175, "premises": "A werewolf is a human that can turn into a wolf.\nA werewolf has been scratched or bitten by another werewolf.\nIf someone has been scratched or bitten by some entity, they have been attacked by that entity.", "premises-FOL": "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))\n\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))\n\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)", "conclusion": "All humans are werewolves.", "conclusion-FOL": "\u2200x (Human(x) \u2192 Werewolf(x))", "label": "Uncertain", "example_id": 503}
{"story_id": 175, "premises": "A werewolf is a human that can turn into a wolf.\nA werewolf has been scratched or bitten by another werewolf.\nIf someone has been scratched or bitten by some entity, they have been attacked by that entity.", "premises-FOL": "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))\n\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))\n\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)", "conclusion": "A werewolf is a wolf.", "conclusion-FOL": "\u2200x (Werewolf(x) \u2192 Wolf(x))", "label": "Uncertain", "example_id": 504}
{"story_id": 175, "premises": "A werewolf is a human that can turn into a wolf.\nA werewolf has been scratched or bitten by another werewolf.\nIf someone has been scratched or bitten by some entity, they have been attacked by that entity.", "premises-FOL": "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))\n\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))\n\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)", "conclusion": "A werewolf has scratched someone before.", "conclusion-FOL": "\u2200x \u2203y (Werewolf(x) \u2192 ScratchedBy(y, x))", "label": "Uncertain", "example_id": 505}
{"story_id": 139, "premises": "UFC Fight Night was a mixed martial arts event held in Sweden.\nAt UFC Fight Night, Sadollah was scheduled to fight Musoke.\nSadollah fought Akiyama at UFC Fight Night.\nMusoke fought Yakovlev at UFC Fight Night.\nJung was injured at UFC Fight Night.\nPeople injured at UFC Fight Night did not fight.", "premises-FOL": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n\u2200x (InjuredAt(x, uFCFightNight) \u2192 \u00acFightIn(x, uFCFightNight))", "conclusion": "Jung fought Sadollah.", "conclusion-FOL": "Fight(jung, sadollah, uFCFightNight)", "label": "Uncertain", "example_id": 407}
{"story_id": 139, "premises": "UFC Fight Night was a mixed martial arts event held in Sweden.\nAt UFC Fight Night, Sadollah was scheduled to fight Musoke.\nSadollah fought Akiyama at UFC Fight Night.\nMusoke fought Yakovlev at UFC Fight Night.\nJung was injured at UFC Fight Night.\nPeople injured at UFC Fight Night did not fight.", "premises-FOL": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n\u2200x (InjuredAt(x, uFCFightNight) \u2192 \u00acFightIn(x, uFCFightNight))", "conclusion": "Jung did not fight at UFC Fight Night.", "conclusion-FOL": "Event(uFCFightNight) \u2227 \u00acFightIn(jung, uFCFightNight)", "label": "True", "example_id": 408}
{"story_id": 139, "premises": "UFC Fight Night was a mixed martial arts event held in Sweden.\nAt UFC Fight Night, Sadollah was scheduled to fight Musoke.\nSadollah fought Akiyama at UFC Fight Night.\nMusoke fought Yakovlev at UFC Fight Night.\nJung was injured at UFC Fight Night.\nPeople injured at UFC Fight Night did not fight.", "premises-FOL": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n\u2200x (InjuredAt(x, uFCFightNight) \u2192 \u00acFightIn(x, uFCFightNight))", "conclusion": "Sadollah fought Musoke at UFC Fight Night.", "conclusion-FOL": "Fight(sadollah, musoke, uFCFightNight)", "label": "Uncertain", "example_id": 409}
{"story_id": 139, "premises": "UFC Fight Night was a mixed martial arts event held in Sweden.\nAt UFC Fight Night, Sadollah was scheduled to fight Musoke.\nSadollah fought Akiyama at UFC Fight Night.\nMusoke fought Yakovlev at UFC Fight Night.\nJung was injured at UFC Fight Night.\nPeople injured at UFC Fight Night did not fight.", "premises-FOL": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 HeldIn(uFCFightNight, sweden)\nScheduledToFight(sadollah, musoke,uFCFightNight)\nFight(sadollah, akiyama, uFCFightNight)\nFight(musoke, yakovlev, uFCFightNight)\nInjuredAt(jung, uFCFightNight)\n\u2200x (InjuredAt(x, uFCFightNight) \u2192 \u00acFightIn(x, uFCFightNight))", "conclusion": "Nelson fought Story at UFC Fight Night.", "conclusion-FOL": "Fight(nelson, story, uFCFightNight)", "label": "Uncertain", "example_id": 410}
{"story_id": 468, "premises": "All drinks on the counter are edible. \nAll juices on the counter are drinks. \nOrange juice is a type of juice. \nEverything on the counter is either orange juice or apple juice.\nAll apple juices on the counter are sweet.\nThe coke is on the counter and if the coke is apple juice, then the coke is a drink.\nIf the coke is not apple juice, then the coke is not edible.", "premises-FOL": "\u2200x (OnCounter(x) \u2227 Drink(x) \u2192 Edible(x))\n\u2200x (OnCounter(x) \u2227 Juice(x) \u2192 Drink(x))\n\u2200x (OrangeJuice(x) \u2192 Juice(x))\n\u2200x (OnCounter(x) \u2192 OrangeJuice(x) \u2295 AppleJuice(x))\n\u2200x (OnCounter(x) \u2227 AppleJuice(x) \u2192 Sweet(x))\nOnCounter(coke) \u2227 (AppleJuice(coke) \u2192 Drink(coke))\n\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)", "conclusion": "The coke is orange juice.", "conclusion-FOL": "OrangeJuice(coke)", "label": "Uncertain", "example_id": 1351}
{"story_id": 468, "premises": "All drinks on the counter are edible. \nAll juices on the counter are drinks. \nOrange juice is a type of juice. \nEverything on the counter is either orange juice or apple juice.\nAll apple juices on the counter are sweet.\nThe coke is on the counter and if the coke is apple juice, then the coke is a drink.\nIf the coke is not apple juice, then the coke is not edible.", "premises-FOL": "\u2200x (OnCounter(x) \u2227 Drink(x) \u2192 Edible(x))\n\u2200x (OnCounter(x) \u2227 Juice(x) \u2192 Drink(x))\n\u2200x (OrangeJuice(x) \u2192 Juice(x))\n\u2200x (OnCounter(x) \u2192 OrangeJuice(x) \u2295 AppleJuice(x))\n\u2200x (OnCounter(x) \u2227 AppleJuice(x) \u2192 Sweet(x))\nOnCounter(coke) \u2227 (AppleJuice(coke) \u2192 Drink(coke))\n\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)", "conclusion": "The coke is edible and sweet.", "conclusion-FOL": "Edible(coke) \u2227 Sweet(coke)", "label": "True", "example_id": 1352}
{"story_id": 468, "premises": "All drinks on the counter are edible. \nAll juices on the counter are drinks. \nOrange juice is a type of juice. \nEverything on the counter is either orange juice or apple juice.\nAll apple juices on the counter are sweet.\nThe coke is on the counter and if the coke is apple juice, then the coke is a drink.\nIf the coke is not apple juice, then the coke is not edible.", "premises-FOL": "\u2200x (OnCounter(x) \u2227 Drink(x) \u2192 Edible(x))\n\u2200x (OnCounter(x) \u2227 Juice(x) \u2192 Drink(x))\n\u2200x (OrangeJuice(x) \u2192 Juice(x))\n\u2200x (OnCounter(x) \u2192 OrangeJuice(x) \u2295 AppleJuice(x))\n\u2200x (OnCounter(x) \u2227 AppleJuice(x) \u2192 Sweet(x))\nOnCounter(coke) \u2227 (AppleJuice(coke) \u2192 Drink(coke))\n\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)", "conclusion": "The coke is not edible and sweet.", "conclusion-FOL": "\u00ac(Edible(coke) \u2227 Sweet(coke))", "label": "False", "example_id": 1353}
{"story_id": 41, "premises": "Federico Garcia Lorca was a talented Spanish poet, and he supported the Popular Front.\nThe Spanish Nationalists opposed anyone who supported the Popular Front\nTalented poets are popular.\nSpanish Nationalists killed anyone who they opposed and who was popular.\nDaniel supported the Popular Front but was not popular.", "premises-FOL": "TalentedPoet(lorca) \u2227 Support(lorca, populists)\n\u2200x (Support(x, populists) \u2192 Opposed(nationalists, x))\n\u2200x (TalentedPoet(x) \u2192 Popular(x))\n\u2200x ((Opposed(nationalists, x) \u2227 Popular(x)) \u2192 Killed(nationalists, x))\nSupport(daniel, populists) \u2227 (\u00acPopular(daniel))", "conclusion": "The Spanish Nationalists killed Daniel.", "conclusion-FOL": "\u00acKilled(nationalists, daniel)", "label": "Uncertain", "example_id": 118}
{"story_id": 41, "premises": "Federico Garcia Lorca was a talented Spanish poet, and he supported the Popular Front.\nThe Spanish Nationalists opposed anyone who supported the Popular Front\nTalented poets are popular.\nSpanish Nationalists killed anyone who they opposed and who was popular.\nDaniel supported the Popular Front but was not popular.", "premises-FOL": "TalentedPoet(lorca) \u2227 Support(lorca, populists)\n\u2200x (Support(x, populists) \u2192 Opposed(nationalists, x))\n\u2200x (TalentedPoet(x) \u2192 Popular(x))\n\u2200x ((Opposed(nationalists, x) \u2227 Popular(x)) \u2192 Killed(nationalists, x))\nSupport(daniel, populists) \u2227 (\u00acPopular(daniel))", "conclusion": "The Spanish Nationalists killed Lorca.", "conclusion-FOL": "Killed(nationalists, lorca)", "label": "True", "example_id": 119}
{"story_id": 366, "premises": "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.\nIf people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.\nIf people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.\nIf people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.\nIf people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.\nDamon is in Franny's family. \nDamon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither.", "premises-FOL": "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))\n\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))\n\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))", "conclusion": "Damon is in Franny's family and he has to visit the dentist frequently.", "conclusion-FOL": "HaveToVisitFrequently(damon, dentist)", "label": "Uncertain", "example_id": 973}
{"story_id": 366, "premises": "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.\nIf people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.\nIf people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.\nIf people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.\nIf people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.\nDamon is in Franny's family. \nDamon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither.", "premises-FOL": "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))\n\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))\n\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))", "conclusion": "If Damon is in Franny's family and he either both grew up with extremely busy parents who did not have time to pack his lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack his lunch nor drink kombucha every day, then Damon neither visits the dentist frequently nor drinks Coca Cola or Pepsi products.", "conclusion-FOL": "\u00ac((\u00ac(y=z) \u2227 \u2203y \u2203z (BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 Drink(damon, kombucha)) \u2192 \u00ac(HaveToVisitFrequently(damon, dentist) \u2228 (\u2203y (Have(damon, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))))", "label": "True", "example_id": 974}
{"story_id": 366, "premises": "People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product.\nIf people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch.\nIf people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently.\nIf people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.\nIf people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.\nDamon is in Franny's family. \nDamon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither.", "premises-FOL": "\u2200x (In(x, frannysFamily) \u2227 (Drink(x, kombucha) \u2228 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))))\n\u2200x (In(x, frannysFamily)) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y)))) \u2192 HaveToVisitFrequently(x, dentist))\n\u2200x (In(x, frannysFamily) \u2227 (\u2203y \u2203z (\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(x, y) \u2227 GrowUpWith(x, z))) \u2192 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y)))\n\u2200x (In(x, frannysFamily) \u2227 \u2203y (Have(x, y) \u2227 Erratic(y) \u2227 Diverse(y) \u2227 EatingHabit(y))) \u2192 \u00ac(ConsistentEverydayRoutine(x) \u2227 StickTo(damon, solidSchedule)))\nIn(damon, frannysFamily)\n\u00ac((\u2203y \u2203z(\u00ac(y=z) \u2227 BusyParent(y) \u2227 BusyParent(z) \u2227 \u00acPack(y, lunch) \u2227 \u00acPack(z, lunch) \u2227 GrowUpWith(damon, y) \u2227 GrowUpWith(damon, z))) \u2295 (ConsistentEverydayRoutine(damon) \u2227 StickTo(damon, solidSchedule)))", "conclusion": "If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.", "conclusion-FOL": "HaveToVisitFrequently(damon, dentist) \u2228 Drink(damon, kombucha, everyDay) \u2192 HaveToVisitFrequently(damon, dentist) \u2227 (\u2203y (Drink(x, cocaCola) \u2228 (PepsiProduct(y) \u2227 Drink(x, y))))", "label": "False", "example_id": 975}
{"story_id": 22, "premises": "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. \nSome customers go to cinemas every week. \nCustomers who prefer TV series will not watch TV series in cinemas.\nJames watches TV series in cinemas. \nJames subscribes to AMC A-List.\nPeter prefers TV series.", "premises-FOL": "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))\n\u2203x (CinemaEveryWeek(x))\n\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)", "conclusion": "James cannot watch 3 movies every week without any additional fees.", "conclusion-FOL": "\u00acEligibleForThreeFreeMovies(james)", "label": "False", "example_id": 63}
{"story_id": 22, "premises": "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. \nSome customers go to cinemas every week. \nCustomers who prefer TV series will not watch TV series in cinemas.\nJames watches TV series in cinemas. \nJames subscribes to AMC A-List.\nPeter prefers TV series.", "premises-FOL": "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))\n\u2203x (CinemaEveryWeek(x))\n\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)", "conclusion": "James goes to cinemas every week.", "conclusion-FOL": "CinemaEveryWeek(james)", "label": "Uncertain", "example_id": 64}
{"story_id": 22, "premises": "If a customer subscribes to AMC A-List, then he/she can watch 3 movies every week without any additional fees. \nSome customers go to cinemas every week. \nCustomers who prefer TV series will not watch TV series in cinemas.\nJames watches TV series in cinemas. \nJames subscribes to AMC A-List.\nPeter prefers TV series.", "premises-FOL": "\u2200x (SubscribedTo(x, aMCAList) \u2192 EligibleForThreeFreeMovies(x))\n\u2203x (CinemaEveryWeek(x))\n\u2200x (Prefer(x, tVSeries) \u2192 \u00acWatchTVIn(x, cinemas))\nWatchTVIn(james, cinemas)\nSubscribedTo(james, aMCAList)\nPrefer(peter, tVSeries)", "conclusion": "Peter will not watch TV series in cinemas.", "conclusion-FOL": "\u00acWatchTVIn(peter, cinemas)", "label": "True", "example_id": 65}
{"story_id": 275, "premises": "Bulbophyllum attenuatum is in the genus Bulbophyllum.\nAll Bulbophyllum are orchids.", "premises-FOL": "GenusBulbophyllum(bulbophyllumAttenuatum)\n\u2200x (GenusBulbophyllum(x) \u2192 Orchid(x))", "conclusion": "Bulbophyllum attenuatum is not an orchid.", "conclusion-FOL": "\u00acOrchid(bulbophyllumAttenuatum)", "label": "False", "example_id": 719}
{"story_id": 163, "premises": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian, and Far Eastern.\nThe Central federal district has the largest population among all federal districts in Russia.\nMoscow is the administrative center of the Central federal district.\nYekaterinburg is the administrative center of the Ural federal district.\nVladivostok is the administrative center of the Far Eastern federal district.\nThe Far Eastern federal district has the largest area among all federal districts in Russia.\nSome federal districts in Russia were established in 2000.", "premises-FOL": "FederalDistrictOf(central, russia) \u2227 FederalDistrictOf(northwestern, russia) \u2227 FederalDistrictOf(southern, russia) \u2227 FederalDistrictOf(northcaucasian, russia) \u2227 FederalDistrictOf(volga, russia) \u2227 FederalDistrictOf(ural, russia) \u2227 FederalDistrictOf(siberian, russia) \u2227 FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n\u2203x (FederalDistrictOf(x, russia) \u2227 EstablishedIn(x, 2000))", "conclusion": "Vladivostok is the administrative center of the federal district with the largest area.", "conclusion-FOL": "\u2203x (AdministrativeCenterOf(vladivostok, x) \u2227 LargestArea(x))", "label": "True", "example_id": 467}
{"story_id": 163, "premises": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian, and Far Eastern.\nThe Central federal district has the largest population among all federal districts in Russia.\nMoscow is the administrative center of the Central federal district.\nYekaterinburg is the administrative center of the Ural federal district.\nVladivostok is the administrative center of the Far Eastern federal district.\nThe Far Eastern federal district has the largest area among all federal districts in Russia.\nSome federal districts in Russia were established in 2000.", "premises-FOL": "FederalDistrictOf(central, russia) \u2227 FederalDistrictOf(northwestern, russia) \u2227 FederalDistrictOf(southern, russia) \u2227 FederalDistrictOf(northcaucasian, russia) \u2227 FederalDistrictOf(volga, russia) \u2227 FederalDistrictOf(ural, russia) \u2227 FederalDistrictOf(siberian, russia) \u2227 FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n\u2203x (FederalDistrictOf(x, russia) \u2227 EstablishedIn(x, 2000))", "conclusion": "Moscow is the administrative center of the federal district with the largest population.", "conclusion-FOL": "\u2203x (AdministrativeCenterOf(moscow, x) \u2227 LargestPopulationIn(x))", "label": "True", "example_id": 468}
{"story_id": 163, "premises": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian, and Far Eastern.\nThe Central federal district has the largest population among all federal districts in Russia.\nMoscow is the administrative center of the Central federal district.\nYekaterinburg is the administrative center of the Ural federal district.\nVladivostok is the administrative center of the Far Eastern federal district.\nThe Far Eastern federal district has the largest area among all federal districts in Russia.\nSome federal districts in Russia were established in 2000.", "premises-FOL": "FederalDistrictOf(central, russia) \u2227 FederalDistrictOf(northwestern, russia) \u2227 FederalDistrictOf(southern, russia) \u2227 FederalDistrictOf(northcaucasian, russia) \u2227 FederalDistrictOf(volga, russia) \u2227 FederalDistrictOf(ural, russia) \u2227 FederalDistrictOf(siberian, russia) \u2227 FederalDistrictOf(fareastern, russia)\nLargestPopulation(central) \nAdministrativeCenterOf(moscow, central)\nAdministrativeCenterOf(yekaterinburg, ural)\nAdministrativeCenterOf(vladivostok, farEastern)\nLargestArea(farEastern)\n\u2203x (FederalDistrictOf(x, russia) \u2227 EstablishedIn(x, 2000))", "conclusion": "The Northwestern federal district was established in 2000.", "conclusion-FOL": "EstablishedIn(northwestern, 2000)", "label": "Uncertain", "example_id": 469}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "Arthritis can be treated at home.", "conclusion-FOL": "CanBeTreatedAtHome(arthritis)", "label": "Uncertain", "example_id": 810}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "Arthritis is colorectal cancer.", "conclusion-FOL": "ColorectalCancer(arthritis)", "label": "False", "example_id": 811}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "Arthritis is not colorectal cancer.", "conclusion-FOL": "\u00acColorectalCancer(arthritis)", "label": "True", "example_id": 812}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "Arthritis is colorectal cancer or has mutations.", "conclusion-FOL": "ColorectalCancer(arthritis) \u2228 Have(arthritis, mutation)", "label": "False", "example_id": 813}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "Arthritis is colorectal cancer and a cancer.", "conclusion-FOL": "ColorectalCancer(arthritisr) \u2227 Cancer(arthritis)", "label": "False", "example_id": 814}
{"story_id": 320, "premises": "All cancers have mutations.\nNo mutations can be treated at home.\nAll colorectal cancers are cancers.\nA cold can be treated at home.\nArthritis either is a cold and has mutations or neither is a cold nor has mutations.", "premises-FOL": "\u2200x (Cancer(x) \u2192 Have(x, mutation))\n\u2200x (Have(x, mutation) \u2192 \u00acCanBeTreatedAtHome(x))\n\u2200x (ColorectalCancer(x) \u2192 Cancer(x))\n\u2200x (Cold(x) \u2192 CanBeTreatedAtHome(x))\n\u00ac(Cold(arthritis) \u2295 Have(arthritis, mutation))", "conclusion": "If arthritis is not colorectal cancer, then arthritis has mutations.", "conclusion-FOL": "\u00acColorectalCancer(arthritis) \u2192 Have(arthritis, mutation)", "label": "False", "example_id": 815}
{"story_id": 303, "premises": "Jerry should not worry about things outside of his control.\nAll traffic is outside of my control.", "premises-FOL": "\u2200x (OutsideOfControl(x) \u2192 \u00acShouldWorry(jerry, x))\n\u2200x (Traffic(x) \u2192 OutsideControl(x))", "conclusion": "Jerry should not worry about traffic.", "conclusion-FOL": "\u00acShouldWorry(jerry, traffic)", "label": "True", "example_id": 747}
{"story_id": 113, "premises": "Roversi is an Italian surname.\nAlba Roversi uses Roversi as a surname.\nPaolo Roversi uses Roversi as a surname.\nRoberto Roversi uses Roversi as a surname.\nPaolo Roversi is a photographer.\nA photographer is a professional or an amateur.", "premises-FOL": "ItalianName(roversi) \u2227 Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n\u2200x (Photographer(x) \u2192 Professional(x) \u2295 Amateur(x))", "conclusion": "Alba Roversi uses an Italian surname.", "conclusion-FOL": "\u2203x (ItalianName(x) \u2227 Surname(x) \u2227 UseAsSurname(albaRoversi, x))", "label": "True", "example_id": 341}
{"story_id": 113, "premises": "Roversi is an Italian surname.\nAlba Roversi uses Roversi as a surname.\nPaolo Roversi uses Roversi as a surname.\nRoberto Roversi uses Roversi as a surname.\nPaolo Roversi is a photographer.\nA photographer is a professional or an amateur.", "premises-FOL": "ItalianName(roversi) \u2227 Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n\u2200x (Photographer(x) \u2192 Professional(x) \u2295 Amateur(x))", "conclusion": "There are no photographers using an Italian surname.", "conclusion-FOL": "\u00ac(\u2203x \u2203y (Photographer(x) \u2227 ItalianName(y) \u2227 Surname(y) \u2227 UseAsSurname(x, y)))", "label": "False", "example_id": 342}
{"story_id": 113, "premises": "Roversi is an Italian surname.\nAlba Roversi uses Roversi as a surname.\nPaolo Roversi uses Roversi as a surname.\nRoberto Roversi uses Roversi as a surname.\nPaolo Roversi is a photographer.\nA photographer is a professional or an amateur.", "premises-FOL": "ItalianName(roversi) \u2227 Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n\u2200x (Photographer(x) \u2192 Professional(x) \u2295 Amateur(x))", "conclusion": "Paolo is an amateur photographer.", "conclusion-FOL": "Amateur(paoloRoversi) \u2227 Photographer(paoloRoversi)", "label": "Uncertain", "example_id": 343}
{"story_id": 237, "premises": "Zaha Hadid is a British-Iraqi architect, artist, and designer.\nZaha Hadid was born on 31 October 1950 in Baghdad, Iraq.\nZaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.\nMax is an aspiring architecture student and plans to apply to the Yale School of Architecture. ", "premises-FOL": "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)", "conclusion": "Zaha Hadid was a citizen of Britain and Iraq.", "conclusion-FOL": "British-Iraqi(zahaHadid)", "label": "True", "example_id": 672}
{"story_id": 237, "premises": "Zaha Hadid is a British-Iraqi architect, artist, and designer.\nZaha Hadid was born on 31 October 1950 in Baghdad, Iraq.\nZaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.\nMax is an aspiring architecture student and plans to apply to the Yale School of Architecture. ", "premises-FOL": "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)", "conclusion": "Zaha Hadid did some work in interior design.", "conclusion-FOL": "DidWorkIn(zahaHadid, interiorDesign)", "label": "Uncertain", "example_id": 673}
{"story_id": 237, "premises": "Zaha Hadid is a British-Iraqi architect, artist, and designer.\nZaha Hadid was born on 31 October 1950 in Baghdad, Iraq.\nZaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.\nMax is an aspiring architecture student and plans to apply to the Yale School of Architecture. ", "premises-FOL": "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)", "conclusion": "Zaha Hadid was born on the 31st of October in 1982.", "conclusion-FOL": "BornOn(zahaHadid, 31October1950)", "label": "Uncertain", "example_id": 674}
{"story_id": 237, "premises": "Zaha Hadid is a British-Iraqi architect, artist, and designer.\nZaha Hadid was born on 31 October 1950 in Baghdad, Iraq.\nZaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.\nMax is an aspiring architecture student and plans to apply to the Yale School of Architecture. ", "premises-FOL": "British-Iraqi(zahaHadid) \u2227 Architect(zahaHadid) \u2227 Artist(zahaHadid) \u2227 Designer(zahaHadid)\nBornOn(zahaHadid, 31October1950) \u2227 BornIn(zahaHadid, baghdadIraq)\nVisitingProfessorOf(zahaHadid, architecturalDesign) \u2227 VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)\nAspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)", "conclusion": "Max admires Zaha Hadid.", "conclusion-FOL": "Admires(max, zahaHadid)", "label": "Uncertain", "example_id": 675}
{"story_id": 396, "premises": "A neuroimaging technique is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. \nAll noninvasive neuroimaging techniques provide a spatial resolution of brains.\nIf a technique provides a spatial resolution of brains, then it is a measurement of brain activity. \nAll measurements of brain activity are used by neuroscience researchers.\nFMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.\nFMRI is a neuroimaging technique.", "premises-FOL": "\u2200x (NeuroimagingTechnique(x) \u2192 (Invasive(x) \u2295 Noninvasive(x))) \n\u2200x (Noninvasive(x) \u2192 Provides(x, spatialResolutionOfBrains))\n\u2200x (Provides(x, spatialResolutionOfBrains) \u2192 Measure(x, brainActivity))\n\u2200x (Measure(x, brainActivity) \u2192 UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) \u2295 Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)", "conclusion": "FMRI provides a spatial resolution of brains.", "conclusion-FOL": "Provides(fMRI, spatialResolutionOfBrains)", "label": "Uncertain", "example_id": 1076}
{"story_id": 396, "premises": "A neuroimaging technique is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. \nAll noninvasive neuroimaging techniques provide a spatial resolution of brains.\nIf a technique provides a spatial resolution of brains, then it is a measurement of brain activity. \nAll measurements of brain activity are used by neuroscience researchers.\nFMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.\nFMRI is a neuroimaging technique.", "premises-FOL": "\u2200x (NeuroimagingTechnique(x) \u2192 (Invasive(x) \u2295 Noninvasive(x))) \n\u2200x (Noninvasive(x) \u2192 Provides(x, spatialResolutionOfBrains))\n\u2200x (Provides(x, spatialResolutionOfBrains) \u2192 Measure(x, brainActivity))\n\u2200x (Measure(x, brainActivity) \u2192 UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) \u2295 Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)", "conclusion": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.", "conclusion-FOL": "Invasive(fMRI) \u2227 UsedBy(fMRI, neuroscienceResearchers)", "label": "True", "example_id": 1077}
{"story_id": 396, "premises": "A neuroimaging technique is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. \nAll noninvasive neuroimaging techniques provide a spatial resolution of brains.\nIf a technique provides a spatial resolution of brains, then it is a measurement of brain activity. \nAll measurements of brain activity are used by neuroscience researchers.\nFMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.\nFMRI is a neuroimaging technique.", "premises-FOL": "\u2200x (NeuroimagingTechnique(x) \u2192 (Invasive(x) \u2295 Noninvasive(x))) \n\u2200x (Noninvasive(x) \u2192 Provides(x, spatialResolutionOfBrains))\n\u2200x (Provides(x, spatialResolutionOfBrains) \u2192 Measure(x, brainActivity))\n\u2200x (Measure(x, brainActivity) \u2192 UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) \u2295 Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)", "conclusion": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.", "conclusion-FOL": "Invasive(fMRI) \u2295 UsedBy(fMRI, neuroscienceResearchers)", "label": "False", "example_id": 1078}
{"story_id": 396, "premises": "A neuroimaging technique is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. \nAll noninvasive neuroimaging techniques provide a spatial resolution of brains.\nIf a technique provides a spatial resolution of brains, then it is a measurement of brain activity. \nAll measurements of brain activity are used by neuroscience researchers.\nFMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.\nFMRI is a neuroimaging technique.", "premises-FOL": "\u2200x (NeuroimagingTechnique(x) \u2192 (Invasive(x) \u2295 Noninvasive(x))) \n\u2200x (Noninvasive(x) \u2192 Provides(x, spatialResolutionOfBrains))\n\u2200x (Provides(x, spatialResolutionOfBrains) \u2192 Measure(x, brainActivity))\n\u2200x (Measure(x, brainActivity) \u2192 UsedBy(x, neuroscienceResearchers))\nMeasure(fMRI, brainActivity) \u2295 Noninvasive(fMRI)\nNeuroimagingTechnique(fMRI)", "conclusion": "If fMRI is not an invasive neuroimaging technique used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.", "conclusion-FOL": "\u00ac(Invasive(fMRI) \u2227 UsedBy(fMRI, neuroscienceResearchers)) \u2192 \u00ac(Noninvasive(fMRI) \u2228 Provides(fMRI, spatialResolutionOfBrains))", "label": "True", "example_id": 1079}
{"story_id": 437, "premises": "Researchers present their work at the conference or provide a tutorial session there.\nEveryone who presents their work at the conference will attend in person. \nEveryone providing a tutorial session at the conference will be invited to join the club. \nEveryone who attends the conference in person is provided with souvenirs. \nEveryone invited to join the club is provided with delicious meals. \nEveryone provided with delicious meals is happy to communicate with each other during the dinner. \nEveryone who is provided with delicious meals is invited to take a photo with the audience. \nIt is not true that James both attended the conference in person and was provided with souvenirs.", "premises-FOL": "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))\n\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))\n\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))\n\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))\n\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))\n\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))", "conclusion": "James is provided with souvenirs.", "conclusion-FOL": "ProvidedWith(james, souvenir)", "label": "Uncertain", "example_id": 1253}
{"story_id": 437, "premises": "Researchers present their work at the conference or provide a tutorial session there.\nEveryone who presents their work at the conference will attend in person. \nEveryone providing a tutorial session at the conference will be invited to join the club. \nEveryone who attends the conference in person is provided with souvenirs. \nEveryone invited to join the club is provided with delicious meals. \nEveryone provided with delicious meals is happy to communicate with each other during the dinner. \nEveryone who is provided with delicious meals is invited to take a photo with the audience. \nIt is not true that James both attended the conference in person and was provided with souvenirs.", "premises-FOL": "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))\n\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))\n\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))\n\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))\n\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))\n\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))", "conclusion": "James is not provided with souvenirs.", "conclusion-FOL": "\u00acProvidedWith(x, souvenir)", "label": "Uncertain", "example_id": 1254}
{"story_id": 437, "premises": "Researchers present their work at the conference or provide a tutorial session there.\nEveryone who presents their work at the conference will attend in person. \nEveryone providing a tutorial session at the conference will be invited to join the club. \nEveryone who attends the conference in person is provided with souvenirs. \nEveryone invited to join the club is provided with delicious meals. \nEveryone provided with delicious meals is happy to communicate with each other during the dinner. \nEveryone who is provided with delicious meals is invited to take a photo with the audience. \nIt is not true that James both attended the conference in person and was provided with souvenirs.", "premises-FOL": "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))\n\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))\n\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))\n\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))\n\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))\n\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))", "conclusion": "James is invited to take a photo with the audience and is happy to communicate with other guests at the dinner.", "conclusion-FOL": "InvitedToTakePhotoWith(james, audience) \u2192 \u2203y \u2203z (\u00ac(y=james) \u2227 \u00ac(z=james) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(james, y) \u2227 HappyToCommunicateWithDuringDinner(james, z)))", "label": "True", "example_id": 1255}
{"story_id": 437, "premises": "Researchers present their work at the conference or provide a tutorial session there.\nEveryone who presents their work at the conference will attend in person. \nEveryone providing a tutorial session at the conference will be invited to join the club. \nEveryone who attends the conference in person is provided with souvenirs. \nEveryone invited to join the club is provided with delicious meals. \nEveryone provided with delicious meals is happy to communicate with each other during the dinner. \nEveryone who is provided with delicious meals is invited to take a photo with the audience. \nIt is not true that James both attended the conference in person and was provided with souvenirs.", "premises-FOL": "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))\n\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))\n\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))\n\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))\n\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))\n\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))", "conclusion": "James is invited to take a photo with the audience or is happy to communicate with other guests(?) during the dinner.", "conclusion-FOL": "InvitedToTakePhotoWith(james, audience) \u2192 \u2203y \u2203z (\u00ac(y=james) \u2227 \u00ac(z=james) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(james, y) \u2227 HappyToCommunicateWithDuringDinner(james, z)))", "label": "True", "example_id": 1256}
{"story_id": 437, "premises": "Researchers present their work at the conference or provide a tutorial session there.\nEveryone who presents their work at the conference will attend in person. \nEveryone providing a tutorial session at the conference will be invited to join the club. \nEveryone who attends the conference in person is provided with souvenirs. \nEveryone invited to join the club is provided with delicious meals. \nEveryone provided with delicious meals is happy to communicate with each other during the dinner. \nEveryone who is provided with delicious meals is invited to take a photo with the audience. \nIt is not true that James both attended the conference in person and was provided with souvenirs.", "premises-FOL": "\u2200x (PresentWorkAt(x, conference) \u2295 ProvideAt(x, tutorialSession, conference))\n\u2200x (PresentWorkAt(x, conference) \u2192 AttendInPerson(x, conference))\n\u2200x (ProvideSessionAt(x, tutorial, conference) \u2192 InvitedToJoin(x, club))\n\u2200x (AttendInPerson(x, conference) \u2192 ProvidedWith(x, souvenir))\n\u2200x (InvitedToJoin(x, club) \u2192 ProvidedWith(x, deliciousMeal))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2227 ProvidedWith(y, deliciousMeal)  \u2192 \u2203y \u2203z (\u00ac(y=x) \u2227 \u00ac(z=x) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(x, y) \u2227 HappyToCommunicateWithDuringTheDinner(x, z)))\n\u2200x (ProvidedWith(x, deliciousMeal) \u2192 InvitedToTakePhotoWith(x, audience))\n\u00ac(AttendInPerson(james, conference) \u2227 ProvidedWith(x, souvenir))", "conclusion": "James is either invited to take a photo with the audience or happy to communicate with other guests(?) during the dinner.", "conclusion-FOL": "InvitedToTakePhotoWith(james, audience) \u2192 \u2203y \u2203z (\u00ac(y=james) \u2227 \u00ac(z=james) \u2227 \u00ac(y=z) \u2227 HappyToCommunicateWithDuringTheDinner(james, y) \u2227 HappyToCommunicateWithDuringDinner(james, z)))", "label": "False", "example_id": 1257}
{"story_id": 14, "premises": "The USS Salem is a heavy cruiser built for the United States Navy.\nThe last heavy cruiser to enter service was the USS Salem.\nThe USS Salem is a museum ship.\nMuseum ships are open to the public.\nThe USS Salem served in the Atlantic and Mediterranean.", "premises-FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))\nServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "conclusion": "The USS Salem is open to the public.", "conclusion-FOL": "OpenToPublic(usssalem)", "label": "True", "example_id": 38}
{"story_id": 14, "premises": "The USS Salem is a heavy cruiser built for the United States Navy.\nThe last heavy cruiser to enter service was the USS Salem.\nThe USS Salem is a museum ship.\nMuseum ships are open to the public.\nThe USS Salem served in the Atlantic and Mediterranean.", "premises-FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))\nServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "conclusion": "There is a museum ship open to the public that served in the Mediterranean.", "conclusion-FOL": "\u2203x (MuseumShip(x) \u2227 OpenToPublic(x) \u2227 ServedIn(x, mediterranean))", "label": "True", "example_id": 39}
{"story_id": 14, "premises": "The USS Salem is a heavy cruiser built for the United States Navy.\nThe last heavy cruiser to enter service was the USS Salem.\nThe USS Salem is a museum ship.\nMuseum ships are open to the public.\nThe USS Salem served in the Atlantic and Mediterranean.", "premises-FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))\nServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "conclusion": "The USS Salem was not the last heavy cruiser to enter service.", "conclusion-FOL": "\u00acLastHeavyCruiserToEnterService(usssalem)", "label": "False", "example_id": 40}
{"story_id": 141, "premises": "TS Leda was a good passenger and cargo vessel.\nTS Leda was a Norwegian vessel that was built with stabilizers.\nStabilizers are mechanical devices found only on ships with powerful steam turbine engines.\nTo be a good passenger and cargo vessel, ships must be quiet and good at sea.\nSome ships that are quiet and good at sea have powerful steam turbine engines.\nVessels are ships.", "premises-FOL": "\u2200x (TSLeda(x) \u2192 ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)))\n\u2200x (TSLeda(x) \u2192 (Norweigian(x) \u2227 Vessel(x) \u2227 Stabilizers(x)))\n\u2200x (Stabilizers(x) \u2192 MechanicalDevice(x) \u2227 OnlyOnShips(x) \u2227 PowerfulSteamTurbine(x))\n\u2200x ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)) \u2192 (Quiet(x) \u2227 GoodAt(x, sea)))\n\u2203x (Quiet(x) \u2227 GoodAt(x, sea) \u2227 PowerfulSteamTurbine(x))\n\u2200x (Ship(x) \u2192 Vessel(x))", "conclusion": "TS Leda was quiet and good at sea.", "conclusion-FOL": "\u2200x (TSLeda(x) \u2192 Quiet(x) \u2227 GoodAt(x, sea))", "label": "True", "example_id": 413}
{"story_id": 141, "premises": "TS Leda was a good passenger and cargo vessel.\nTS Leda was a Norwegian vessel that was built with stabilizers.\nStabilizers are mechanical devices found only on ships with powerful steam turbine engines.\nTo be a good passenger and cargo vessel, ships must be quiet and good at sea.\nSome ships that are quiet and good at sea have powerful steam turbine engines.\nVessels are ships.", "premises-FOL": "\u2200x (TSLeda(x) \u2192 ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)))\n\u2200x (TSLeda(x) \u2192 (Norweigian(x) \u2227 Vessel(x) \u2227 Stabilizers(x)))\n\u2200x (Stabilizers(x) \u2192 MechanicalDevice(x) \u2227 OnlyOnShips(x) \u2227 PowerfulSteamTurbine(x))\n\u2200x ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)) \u2192 (Quiet(x) \u2227 GoodAt(x, sea)))\n\u2203x (Quiet(x) \u2227 GoodAt(x, sea) \u2227 PowerfulSteamTurbine(x))\n\u2200x (Ship(x) \u2192 Vessel(x))", "conclusion": "TS Leda had powerful steam turbine engines.", "conclusion-FOL": "\u2200x (TSLeda(x) \u2192 PowerfulSteamTurbine(x))", "label": "True", "example_id": 414}
{"story_id": 141, "premises": "TS Leda was a good passenger and cargo vessel.\nTS Leda was a Norwegian vessel that was built with stabilizers.\nStabilizers are mechanical devices found only on ships with powerful steam turbine engines.\nTo be a good passenger and cargo vessel, ships must be quiet and good at sea.\nSome ships that are quiet and good at sea have powerful steam turbine engines.\nVessels are ships.", "premises-FOL": "\u2200x (TSLeda(x) \u2192 ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)))\n\u2200x (TSLeda(x) \u2192 (Norweigian(x) \u2227 Vessel(x) \u2227 Stabilizers(x)))\n\u2200x (Stabilizers(x) \u2192 MechanicalDevice(x) \u2227 OnlyOnShips(x) \u2227 PowerfulSteamTurbine(x))\n\u2200x ((Passenger(x) \u2227 Vessel(x)) \u2227 (Cargo(x) \u2227 Vessel(x)) \u2192 (Quiet(x) \u2227 GoodAt(x, sea)))\n\u2203x (Quiet(x) \u2227 GoodAt(x, sea) \u2227 PowerfulSteamTurbine(x))\n\u2200x (Ship(x) \u2192 Vessel(x))", "conclusion": "TS Leda was not a Norwegian vessel.", "conclusion-FOL": "\u2200x (TSLeda(x) \u2192 \u00ac(Norweigian(x) \u2227 Vessel(x)))", "label": "False", "example_id": 415}
{"story_id": 194, "premises": "Rosa was born in Santiago. \nSantiago is the capital and largest city of Chile.\nRosa is the daughter of a Catalan building contractor, Jose.\nJose has a Chilean wife, Carmen.\nCarmen and Jose are Rosa's parents.\nPeople from Catalan are not from Chile.\nA building contractor is responsible for the day-to-day oversight of a construction site. ", "premises-FOL": "BornIn(rosa, santiago)\nCapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)\nWifeOf(jose, carmen) \u2227 Chilean(carmen)\nParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)\n\u2200x (Catalan(x) \u2192 \u00acChilean(x))\n\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))", "conclusion": "Rosa was born in the largest city of Chile.", "conclusion-FOL": "\u2203x (BornIn(rosa, x) \u2227 LargestCityOf(x, chile))", "label": "True", "example_id": 552}
{"story_id": 194, "premises": "Rosa was born in Santiago. \nSantiago is the capital and largest city of Chile.\nRosa is the daughter of a Catalan building contractor, Jose.\nJose has a Chilean wife, Carmen.\nCarmen and Jose are Rosa's parents.\nPeople from Catalan are not from Chile.\nA building contractor is responsible for the day-to-day oversight of a construction site. ", "premises-FOL": "BornIn(rosa, santiago)\nCapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)\nWifeOf(jose, carmen) \u2227 Chilean(carmen)\nParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)\n\u2200x (Catalan(x) \u2192 \u00acChilean(x))\n\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))", "conclusion": "Neither of Rosa's parents is Chilean.", "conclusion-FOL": "\u00acChilean(jose) \u2227 \u00acChilean(carmen)", "label": "False", "example_id": 553}
{"story_id": 194, "premises": "Rosa was born in Santiago. \nSantiago is the capital and largest city of Chile.\nRosa is the daughter of a Catalan building contractor, Jose.\nJose has a Chilean wife, Carmen.\nCarmen and Jose are Rosa's parents.\nPeople from Catalan are not from Chile.\nA building contractor is responsible for the day-to-day oversight of a construction site. ", "premises-FOL": "BornIn(rosa, santiago)\nCapitalOf(santiago, chile) \u2227 LargestCityOf(santiago, chile)\nDaughterOf(rosa, jose) \u2227 BuildingContractor(jose) \u2227 Catalan(jose)\nWifeOf(jose, carmen) \u2227 Chilean(carmen)\nParentOf(jose, rosa) \u2227 ParentOf(carmen, rosa)\n\u2200x (Catalan(x) \u2192 \u00acChilean(x))\n\u2200x \u2203y (BuildingContractor(x) \u2192 ConstructionSite(y) \u2227 Oversee(x, y))", "conclusion": "Rosa is the daughter of someone who is responsible for the oversight of traffic.", "conclusion-FOL": "\u2203x (DaughterOf(rosa, x) \u2227 Oversee(x, traffic))", "label": "True", "example_id": 554}
{"story_id": 36, "premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "conclusion": "Well Done 3 is a rap album.", "conclusion-FOL": "IsRapAlbum(wellDone3)", "label": "True", "example_id": 104}
{"story_id": 36, "premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "conclusion": "Tyga is an opera singer.", "conclusion-FOL": "IsOperaSinger(tyga)", "label": "False", "example_id": 105}
{"story_id": 36, "premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "conclusion": "Well Done 3 is worth listening to.", "conclusion-FOL": "IsWorthListening(wellDone3)", "label": "Uncertain", "example_id": 106}
{"story_id": 97, "premises": "Deborah Wallace is a Scottish-born actress, playwright, and producer.\nPsyche is a play based on the life of James Miranda Barry.\nHomesick, Psyche and The Void are plays by Deborah Wallace.\nDeborah Wallace co-produced Gasland.", "premises-FOL": "BornIn(deborahWallace, scotland) \u2227 Actress(deborahWallace) \u2227 Playwright(deborahWallace) \u2227 Producer(deborahWallace)\nPlay(psyche) \u2227 BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) \u2227 WrittenBy(homesick, deborahWallace) \u2227 Play(psyche) \u2227 WrittenBy(psyche, deborahWallace) \u2227 Play(theVoid) \u2227 WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)", "conclusion": "Gasland was coproduced by the same person Homesick was from.", "conclusion-FOL": "\u2203x (CoProduces(x, gasland) \u2227 WrittenBy(homesick, x))", "label": "True", "example_id": 292}
{"story_id": 97, "premises": "Deborah Wallace is a Scottish-born actress, playwright, and producer.\nPsyche is a play based on the life of James Miranda Barry.\nHomesick, Psyche and The Void are plays by Deborah Wallace.\nDeborah Wallace co-produced Gasland.", "premises-FOL": "BornIn(deborahWallace, scotland) \u2227 Actress(deborahWallace) \u2227 Playwright(deborahWallace) \u2227 Producer(deborahWallace)\nPlay(psyche) \u2227 BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) \u2227 WrittenBy(homesick, deborahWallace) \u2227 Play(psyche) \u2227 WrittenBy(psyche, deborahWallace) \u2227 Play(theVoid) \u2227 WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)", "conclusion": "No plays by Deborah Wallace are based on the life of James Miranda Barry.", "conclusion-FOL": "\u2200x (Play(x) \u2227 WrittenBy(x, deborahwallace) \u2192 \u00acBasedOn(x, lifeofjamesmirandabarry))", "label": "False", "example_id": 293}
{"story_id": 97, "premises": "Deborah Wallace is a Scottish-born actress, playwright, and producer.\nPsyche is a play based on the life of James Miranda Barry.\nHomesick, Psyche and The Void are plays by Deborah Wallace.\nDeborah Wallace co-produced Gasland.", "premises-FOL": "BornIn(deborahWallace, scotland) \u2227 Actress(deborahWallace) \u2227 Playwright(deborahWallace) \u2227 Producer(deborahWallace)\nPlay(psyche) \u2227 BasedOn(psyche, lifeOfJamesMirandaBarry)\nPlay(homesick) \u2227 WrittenBy(homesick, deborahWallace) \u2227 Play(psyche) \u2227 WrittenBy(psyche, deborahWallace) \u2227 Play(theVoid) \u2227 WrittenBy(theVoid, deborahWallace)\nCoProduce(deborahWallace, gasland)", "conclusion": "Gasland is a play.", "conclusion-FOL": "Play(gasland)", "label": "Uncertain", "example_id": 294}
{"story_id": 449, "premises": "Animals who need large territory travel far.\nEvery animal that eats a lot needs a large territory.\nIf something is a big animal, then it will eat a lot.\nBears are big animals.\nLarry is a big animal.", "premises-FOL": "\u2200x (Animal(x) \u2227 Need(x, largeTerritory) \u2192 TravelFar(x))\n\u2200x (EatALot(x) \u2192 Need(x, largeTerritory))\n\u2200x (Big(x) \u2227 Animal(x) \u2192 EatALot(x))\n\u2200x (Bear(x) \u2192 Big(x) \u2227 Animal(x))\nBig(larry) \u2227 Animal(larry)", "conclusion": "Larry is a bear.", "conclusion-FOL": "Bear(larry)", "label": "Uncertain", "example_id": 1292}
{"story_id": 449, "premises": "Animals who need large territory travel far.\nEvery animal that eats a lot needs a large territory.\nIf something is a big animal, then it will eat a lot.\nBears are big animals.\nLarry is a big animal.", "premises-FOL": "\u2200x (Animal(x) \u2227 Need(x, largeTerritory) \u2192 TravelFar(x))\n\u2200x (EatALot(x) \u2192 Need(x, largeTerritory))\n\u2200x (Big(x) \u2227 Animal(x) \u2192 EatALot(x))\n\u2200x (Bear(x) \u2192 Big(x) \u2227 Animal(x))\nBig(larry) \u2227 Animal(larry)", "conclusion": "Larry is not a bear and does not travel far.", "conclusion-FOL": "\u00acBear(larry) \u2227 \u00acTravelFar(larry)", "label": "False", "example_id": 1293}
{"story_id": 449, "premises": "Animals who need large territory travel far.\nEvery animal that eats a lot needs a large territory.\nIf something is a big animal, then it will eat a lot.\nBears are big animals.\nLarry is a big animal.", "premises-FOL": "\u2200x (Animal(x) \u2227 Need(x, largeTerritory) \u2192 TravelFar(x))\n\u2200x (EatALot(x) \u2192 Need(x, largeTerritory))\n\u2200x (Big(x) \u2227 Animal(x) \u2192 EatALot(x))\n\u2200x (Bear(x) \u2192 Big(x) \u2227 Animal(x))\nBig(larry) \u2227 Animal(larry)", "conclusion": "If Larry either travels far or needs a large territory, then Larry is a bear.", "conclusion-FOL": "TravelFar(larry) \u2295 Need(larry, largeTerritory) \u2192 Bear(larry)", "label": "True", "example_id": 1294}
{"story_id": 461, "premises": "Any convicted criminal that is innocent is not truly guilty.\nAll convicted criminals who did not commit a crime are truly innocent.\nAll convicted criminals are truly guilty or found guilty.\nIf a convicted criminal is found guilty, then they are sentenced to a punishment.\nIf a convicted criminal is found guilty, then they can argue against their punishment.\nGarry is a convicted criminal who not found guilty or is sentenced to punishment.", "premises-FOL": "\u2200x (ConvictedCriminal(x) \u2227 Innocent(x) \u2192 \u00acTrulyGuilty(x))\n\u2200x (ConvictedCriminal(x) \u2227 \u00acCommitCrime(x) \u2192 Innocent(x))\n\u2200x (ConvictedCriminal(x) \u2227 (TrulyGuilty(x) \u2228 FoundGuilty(x)))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 SentencedToPunishment(x))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) \u2227 (\u00ac(FoundGuilty(garry) \u2228 SentencedToPunishment(garry)))", "conclusion": "Garry is sentenced to a punishment.", "conclusion-FOL": "SentencedToPunishment(garry)", "label": "Uncertain", "example_id": 1330}
{"story_id": 461, "premises": "Any convicted criminal that is innocent is not truly guilty.\nAll convicted criminals who did not commit a crime are truly innocent.\nAll convicted criminals are truly guilty or found guilty.\nIf a convicted criminal is found guilty, then they are sentenced to a punishment.\nIf a convicted criminal is found guilty, then they can argue against their punishment.\nGarry is a convicted criminal who not found guilty or is sentenced to punishment.", "premises-FOL": "\u2200x (ConvictedCriminal(x) \u2227 Innocent(x) \u2192 \u00acTrulyGuilty(x))\n\u2200x (ConvictedCriminal(x) \u2227 \u00acCommitCrime(x) \u2192 Innocent(x))\n\u2200x (ConvictedCriminal(x) \u2227 (TrulyGuilty(x) \u2228 FoundGuilty(x)))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 SentencedToPunishment(x))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) \u2227 (\u00ac(FoundGuilty(garry) \u2228 SentencedToPunishment(garry)))", "conclusion": "Garry did not commit a crime and can argue against his punishment.", "conclusion-FOL": "\u00acCommitCrime(garry) \u2227 CanArgueAgainst(garry, punishment)", "label": "False", "example_id": 1331}
{"story_id": 461, "premises": "Any convicted criminal that is innocent is not truly guilty.\nAll convicted criminals who did not commit a crime are truly innocent.\nAll convicted criminals are truly guilty or found guilty.\nIf a convicted criminal is found guilty, then they are sentenced to a punishment.\nIf a convicted criminal is found guilty, then they can argue against their punishment.\nGarry is a convicted criminal who not found guilty or is sentenced to punishment.", "premises-FOL": "\u2200x (ConvictedCriminal(x) \u2227 Innocent(x) \u2192 \u00acTrulyGuilty(x))\n\u2200x (ConvictedCriminal(x) \u2227 \u00acCommitCrime(x) \u2192 Innocent(x))\n\u2200x (ConvictedCriminal(x) \u2227 (TrulyGuilty(x) \u2228 FoundGuilty(x)))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 SentencedToPunishment(x))\n\u2200x (ConvictedCriminal(x) \u2227 FoundGuilty(x) \u2192 CanArgueAgainst(x, punishment))\nConvictedCriminal(garry) \u2227 (\u00ac(FoundGuilty(garry) \u2228 SentencedToPunishment(garry)))", "conclusion": "Garry is not both innocent and someone who did not commit a crime.", "conclusion-FOL": "\u00ac(Innocent(garry) \u2227 \u00acCommitCrime(garry))", "label": "True", "example_id": 1332}
{"story_id": 136, "premises": "Phoneix's music is classified under the indie pop genre.\nPhoenix is a band from France.\nFrench bands write songs in French or in English.\nAside from indie pop, pop rock and synth-pop are two other genres of music.\nPhoenix has no songs in French.", "premises-FOL": "IndiePop(phoenix)\nBand(phoenix) \u2227 From(phoenix, france)\n\u2200x \u2203y (Band(x) \u2227 From(x, france) \u2227 Write(x, y) \u2227 Song(y) \u2192 InFrench(y) \u2295 InEnglish(y))\n\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))\n\u2200x (Song(x) \u2227 By(phoenix, x) \u2192 \u00acInFrench(x))", "conclusion": "Phoneix's music is classified under the pop rock genre.", "conclusion-FOL": "PopRock(phoenix)", "label": "False", "example_id": 400}
{"story_id": 136, "premises": "Phoneix's music is classified under the indie pop genre.\nPhoenix is a band from France.\nFrench bands write songs in French or in English.\nAside from indie pop, pop rock and synth-pop are two other genres of music.\nPhoenix has no songs in French.", "premises-FOL": "IndiePop(phoenix)\nBand(phoenix) \u2227 From(phoenix, france)\n\u2200x \u2203y (Band(x) \u2227 From(x, france) \u2227 Write(x, y) \u2227 Song(y) \u2192 InFrench(y) \u2295 InEnglish(y))\n\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))\n\u2200x (Song(x) \u2227 By(phoenix, x) \u2192 \u00acInFrench(x))", "conclusion": "Phoenix writes songs in French.", "conclusion-FOL": "\u2203x (Write(phoenix, y) \u2227 Song(x) \u2192 InFrench(x))", "label": "False", "example_id": 401}
